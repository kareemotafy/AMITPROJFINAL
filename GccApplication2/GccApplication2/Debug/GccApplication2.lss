
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000007b0  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800072  00800072  00000856  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000008f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001425  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf1  00000000  00000000  00001ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e1e  00000000  00000000  00002ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  000038e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fe  00000000  00000000  00003b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000403  00000000  00000000  0000427e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004681  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  8a:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INIT_buttons>:
char count;
char iteration;

void INIT_buttons()
{
	SetBit(OnOffPort, OnOffPin);
  92:	92 9a       	sbi	0x12, 2	; 18
	ClearBit(OnOffDDR, OnOffPin);
  94:	8a 98       	cbi	0x11, 2	; 17
	SetBit(upPort, upPin);
  96:	90 9a       	sbi	0x12, 0	; 18
	ClearBit(upDDR, upPin);
  98:	88 98       	cbi	0x11, 0	; 17
	SetBit(downPort, downPin);
  9a:	91 9a       	sbi	0x12, 1	; 18
	ClearBit(downDDR, downPin);
  9c:	89 98       	cbi	0x11, 1	; 17
	GICR = 1 << INT0;				 /* Enable INT0*/
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1 << ISC01 | 1 << ISC00; /* Trigger INT0 on rising edge */
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	85 bf       	out	0x35, r24	; 53
	sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <UpdateSetTemp>:
}

void UpdateSetTemp()
{

	if ((!GetBit(PIND, 0)) || (!GetBit(PIND, 1)))
  aa:	80 9b       	sbis	0x10, 0	; 16
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <UpdateSetTemp+0x8>
  ae:	81 99       	sbic	0x10, 1	; 16
  b0:	47 c0       	rjmp	.+142    	; 0x140 <UpdateSetTemp+0x96>
	{
		if ((setting == 1) && (!GetBit(PIND, 0)) && (count > 0))
  b2:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <setting>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	71 f5       	brne	.+92     	; 0x116 <UpdateSetTemp+0x6c>
  ba:	80 99       	sbic	0x10, 0	; 16
  bc:	17 c0       	rjmp	.+46     	; 0xec <UpdateSetTemp+0x42>
  be:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <count>
  c2:	88 23       	and	r24, r24
  c4:	99 f0       	breq	.+38     	; 0xec <UpdateSetTemp+0x42>
		{
			if (!(settemp >= maxTemp))
  c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  ca:	8b 34       	cpi	r24, 0x4B	; 75
  cc:	18 f4       	brcc	.+6      	; 0xd4 <UpdateSetTemp+0x2a>
			{
				settemp += 5;
  ce:	8b 5f       	subi	r24, 0xFB	; 251
  d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
			}
			while (!GetBit(PIND, 0))
  d4:	80 99       	sbic	0x10, 0	; 16
  d6:	0a c0       	rjmp	.+20     	; 0xec <UpdateSetTemp+0x42>
			{
				SSD_write(settemp);
  d8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  dc:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
		{
			if (!(settemp >= maxTemp))
			{
				settemp += 5;
			}
			while (!GetBit(PIND, 0))
  e0:	80 9b       	sbis	0x10, 0	; 16
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <UpdateSetTemp+0x2e>
			{
				SSD_write(settemp);
			}
		}
		if ((setting == 1) && (!GetBit(PIND, 1)) && (settemp > miniTemp) && (count > 0))
  e4:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <setting>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	a9 f4       	brne	.+42     	; 0x116 <UpdateSetTemp+0x6c>
  ec:	81 99       	sbic	0x10, 1	; 16
  ee:	13 c0       	rjmp	.+38     	; 0x116 <UpdateSetTemp+0x6c>
  f0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  f4:	84 32       	cpi	r24, 0x24	; 36
  f6:	78 f0       	brcs	.+30     	; 0x116 <UpdateSetTemp+0x6c>
  f8:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <count>
  fc:	99 23       	and	r25, r25
  fe:	59 f0       	breq	.+22     	; 0x116 <UpdateSetTemp+0x6c>
		{
			if (!(settemp <= miniTemp))
			{
				settemp -= 5;
 100:	85 50       	subi	r24, 0x05	; 5
 102:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
			}
			while (!GetBit(PIND, 1))
 106:	81 99       	sbic	0x10, 1	; 16
 108:	06 c0       	rjmp	.+12     	; 0x116 <UpdateSetTemp+0x6c>
			{
				SSD_write(settemp);
 10a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
 10e:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
		{
			if (!(settemp <= miniTemp))
			{
				settemp -= 5;
			}
			while (!GetBit(PIND, 1))
 112:	81 9b       	sbis	0x10, 1	; 16
 114:	fa cf       	rjmp	.-12     	; 0x10a <UpdateSetTemp+0x60>
			{
				SSD_write(settemp);
			}
		}
		eeprom_write_byte((int *)0x55, settemp);
 116:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <settemp>
 11a:	85 e5       	ldi	r24, 0x55	; 85
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 c9 03 	call	0x792	; 0x792 <eeprom_write_byte>
		setting = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <setting>
		count = 0;
 128:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <count>
		settemp = eeprom_read_byte((int *)0x55);
 12c:	85 e5       	ldi	r24, 0x55	; 85
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 c1 03 	call	0x782	; 0x782 <eeprom_read_byte>
 134:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
		TCNT1 = 57723;
 138:	8b e7       	ldi	r24, 0x7B	; 123
 13a:	91 ee       	ldi	r25, 0xE1	; 225
 13c:	9d bd       	out	0x2d, r25	; 45
 13e:	8c bd       	out	0x2c, r24	; 44
 140:	08 95       	ret

00000142 <INIT_eeprom>:
#include "EEPROM.h"
extern char settemp;
void INIT_eeprom()
{

	eeprom_write_byte((int *)0x55, settemp);
 142:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <settemp>
 146:	85 e5       	ldi	r24, 0x55	; 85
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 c9 03 	call	0x792	; 0x792 <eeprom_write_byte>
 14e:	08 95       	ret

00000150 <LM35_Init>:
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 a0 02 	call	0x540	; 0x540 <malloc>
 15c:	26 e0       	ldi	r18, 0x06	; 6
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
 162:	11 82       	std	Z+1, r1	; 0x01
 164:	23 e0       	ldi	r18, 0x03	; 3
 166:	22 83       	std	Z+2, r18	; 0x02
 168:	c3 83       	std	Z+3, r28	; 0x03
 16a:	0e 94 19 02 	call	0x432	; 0x432 <ADC_Init>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <LM35_Read>:
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 44 02 	call	0x488	; 0x488 <ADC_Read>
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	08 95       	ret

00000182 <INIT_SSD>:
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	87 bb       	out	0x17, r24	; 23
 186:	18 ba       	out	0x18, r1	; 24
 188:	08 95       	ret

0000018a <SSD_OFF>:
 18a:	8f e7       	ldi	r24, 0x7F	; 127
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	08 95       	ret

00000190 <SSD_write>:
 190:	9d ec       	ldi	r25, 0xCD	; 205
 192:	89 9f       	mul	r24, r25
 194:	91 2d       	mov	r25, r1
 196:	11 24       	eor	r1, r1
 198:	e9 2f       	mov	r30, r25
 19a:	e6 95       	lsr	r30
 19c:	e6 95       	lsr	r30
 19e:	e6 95       	lsr	r30
 1a0:	ee 0f       	add	r30, r30
 1a2:	2e 2f       	mov	r18, r30
 1a4:	22 0f       	add	r18, r18
 1a6:	22 0f       	add	r18, r18
 1a8:	e2 0f       	add	r30, r18
 1aa:	8e 1b       	sub	r24, r30
 1ac:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <units>
 1b0:	96 95       	lsr	r25
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <tens>
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ea 59       	subi	r30, 0x9A	; 154
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	80 81       	ld	r24, Z
 1c4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	8f e1       	ldi	r24, 0x1F	; 31
 1c8:	9e e4       	ldi	r25, 0x4E	; 78
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <SSD_write+0x3a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <SSD_write+0x40>
 1d0:	00 00       	nop
 1d2:	d9 98       	cbi	0x1b, 1	; 27
 1d4:	da 9a       	sbi	0x1b, 2	; 27
 1d6:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <tens>
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ea 59       	subi	r30, 0x9A	; 154
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	80 81       	ld	r24, Z
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	8f e1       	ldi	r24, 0x1F	; 31
 1e6:	9e e4       	ldi	r25, 0x4E	; 78
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <SSD_write+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <SSD_write+0x5e>
 1ee:	00 00       	nop
 1f0:	d9 9a       	sbi	0x1b, 1	; 27
 1f2:	da 98       	cbi	0x1b, 2	; 27
 1f4:	08 95       	ret

000001f6 <INIT_HeaterCooler>:

#include "TCS.h"

void INIT_HeaterCooler()
{
	SetBit(heaterDDR, heaterPin);
 1f6:	8f 9a       	sbi	0x11, 7	; 17
	SetBit(coolerDDR, coolerPin);
 1f8:	8e 9a       	sbi	0x11, 6	; 17
 1fa:	08 95       	ret

000001fc <COOLER_ON>:
}

void COOLER_ON()
{
	SetBit(coolerPort, coolerPin);
 1fc:	96 9a       	sbi	0x12, 6	; 18
 1fe:	08 95       	ret

00000200 <COOLER_OFF>:
}

void COOLER_OFF()
{
	ClearBit(coolerPort, coolerPin);
 200:	96 98       	cbi	0x12, 6	; 18
 202:	08 95       	ret

00000204 <HEATER_ON>:
}
void HEATER_ON()
{
	SetBit(heaterPort, heaterPin);
 204:	97 9a       	sbi	0x12, 7	; 18
 206:	08 95       	ret

00000208 <HEATER_OFF>:
}
void HEATER_OFF()
{
	ClearBit(heaterPort, heaterPin);
 208:	97 98       	cbi	0x12, 7	; 18
 20a:	08 95       	ret

0000020c <TCS_Actuator>:
short temp_reading[10] = {};
long int current_temp = 0;

void TCS_Actuator()
{
	char settemp = eeprom_read_byte((int *)0x55);
 20c:	85 e5       	ldi	r24, 0x55	; 85
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 c1 03 	call	0x782	; 0x782 <eeprom_read_byte>
	int diff = settemp - current_temp;
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 21a:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 21e:	82 1b       	sub	r24, r18
 220:	93 0b       	sbc	r25, r19

	if (diff < -10)
 222:	86 3f       	cpi	r24, 0xF6	; 246
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	92 07       	cpc	r25, r18
 228:	2c f4       	brge	.+10     	; 0x234 <TCS_Actuator+0x28>
	{
		COOLER_ON();
 22a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <COOLER_ON>
		HEATER_OFF();
 22e:	0e 94 04 01 	call	0x208	; 0x208 <HEATER_OFF>
 232:	08 95       	ret
	}
	else if (diff > 0)
 234:	18 16       	cp	r1, r24
 236:	19 06       	cpc	r1, r25
 238:	2c f4       	brge	.+10     	; 0x244 <TCS_Actuator+0x38>
	{
		HEATER_ON();
 23a:	0e 94 02 01 	call	0x204	; 0x204 <HEATER_ON>
		COOLER_OFF();
 23e:	0e 94 00 01 	call	0x200	; 0x200 <COOLER_OFF>
 242:	08 95       	ret
	}
	else
	{
		HEATER_OFF();
 244:	0e 94 04 01 	call	0x208	; 0x208 <HEATER_OFF>
		COOLER_OFF();
 248:	0e 94 00 01 	call	0x200	; 0x200 <COOLER_OFF>
 24c:	08 95       	ret

0000024e <TCS_Handler>:
	}
}

void TCS_Handler()
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29

	if (temp_reading_counter < 10)
 252:	c0 91 8a 00 	lds	r28, 0x008A	; 0x80008a <temp_reading_counter>
 256:	d0 91 8b 00 	lds	r29, 0x008B	; 0x80008b <temp_reading_counter+0x1>
 25a:	ca 30       	cpi	r28, 0x0A	; 10
 25c:	d1 05       	cpc	r29, r1
 25e:	94 f4       	brge	.+36     	; 0x284 <TCS_Handler+0x36>
	{
		temp_reading[temp_reading_counter] = LM35_Read();
 260:	0e 94 b9 00 	call	0x172	; 0x172 <LM35_Read>
 264:	cc 0f       	add	r28, r28
 266:	dd 1f       	adc	r29, r29
 268:	ca 58       	subi	r28, 0x8A	; 138
 26a:	df 4f       	sbci	r29, 0xFF	; 255
 26c:	99 83       	std	Y+1, r25	; 0x01
 26e:	88 83       	st	Y, r24
		temp_reading_counter++;
 270:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <temp_reading_counter>
 274:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <temp_reading_counter+0x1>
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <temp_reading_counter+0x1>
 27e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <temp_reading_counter>
 282:	2f c0       	rjmp	.+94     	; 0x2e2 <TCS_Handler+0x94>
	}
	else
	{
		temp_reading_counter = 0;
 284:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <temp_reading_counter+0x1>
 288:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <temp_reading_counter>
 28c:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <__data_end>
 290:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <__data_end+0x1>
 294:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <__data_end+0x2>
 298:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <__data_end+0x3>
 29c:	e6 e7       	ldi	r30, 0x76	; 118
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	2a e8       	ldi	r18, 0x8A	; 138
 2a2:	30 e0       	ldi	r19, 0x00	; 0
		for (int i = 0; i < 10; i++)
		{
			current_temp += temp_reading[i];
 2a4:	81 91       	ld	r24, Z+
 2a6:	91 91       	ld	r25, Z+
 2a8:	09 2e       	mov	r0, r25
 2aa:	00 0c       	add	r0, r0
 2ac:	aa 0b       	sbc	r26, r26
 2ae:	bb 0b       	sbc	r27, r27
 2b0:	48 0f       	add	r20, r24
 2b2:	59 1f       	adc	r21, r25
 2b4:	6a 1f       	adc	r22, r26
 2b6:	7b 1f       	adc	r23, r27
		temp_reading_counter++;
	}
	else
	{
		temp_reading_counter = 0;
		for (int i = 0; i < 10; i++)
 2b8:	e2 17       	cp	r30, r18
 2ba:	f3 07       	cpc	r31, r19
 2bc:	99 f7       	brne	.-26     	; 0x2a4 <TCS_Handler+0x56>
		{
			current_temp += temp_reading[i];
		}
		current_temp /= 10;
 2be:	cb 01       	movw	r24, r22
 2c0:	ba 01       	movw	r22, r20
 2c2:	2a e0       	ldi	r18, 0x0A	; 10
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	0e 94 5f 02 	call	0x4be	; 0x4be <__divmodsi4>
 2ce:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <__data_end>
 2d2:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <__data_end+0x1>
 2d6:	40 93 74 00 	sts	0x0074, r20	; 0x800074 <__data_end+0x2>
 2da:	50 93 75 00 	sts	0x0075, r21	; 0x800075 <__data_end+0x3>
		TCS_Actuator();
 2de:	0e 94 06 01 	call	0x20c	; 0x20c <TCS_Actuator>
	}
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <__vector_9>:
#include "TCS.h"
#include "Timer.h"
char on = 0; // variable to hold button state (0 or 1)

ISR(TIMER1_OVF_vect) // Timer1 ISR
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25

	if (setting == 1)
 2f6:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <setting>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	59 f4       	brne	.+22     	; 0x314 <__vector_9+0x2c>
	{
		PORTB = 0xff;
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	88 bb       	out	0x18, r24	; 24

		if (count == 9)
 302:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <count>
 306:	89 30       	cpi	r24, 0x09	; 9
 308:	29 f4       	brne	.+10     	; 0x314 <__vector_9+0x2c>
		{
			setting = 0;
 30a:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <setting>
			count = 1;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <count>
		}
	}
	TCNT1 = 57723;
 314:	8b e7       	ldi	r24, 0x7B	; 123
 316:	91 ee       	ldi	r25, 0xE1	; 225
 318:	9d bd       	out	0x2d, r25	; 45
 31a:	8c bd       	out	0x2c, r24	; 44
	count++;
 31c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <count>
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <count>
}
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <__vector_11>:

ISR(TIMER0_OVF_vect) // Timer2 ISR
{
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
	timer2Count++;
 356:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <timer2Count>
 35a:	8f 5f       	subi	r24, 0xFF	; 255
	if (timer2Count == 1)
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	19 f0       	breq	.+6      	; 0x366 <__vector_11+0x32>
	count++;
}

ISR(TIMER0_OVF_vect) // Timer2 ISR
{
	timer2Count++;
 360:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <timer2Count>
 364:	04 c0       	rjmp	.+8      	; 0x36e <__vector_11+0x3a>
	if (timer2Count == 1)
	{
		timer2Count = 0;
 366:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <timer2Count>
		TCS_Handler();
 36a:	0e 94 27 01 	call	0x24e	; 0x24e <TCS_Handler>
	}
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <__vector_1>:

ISR(INT0_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	2f 93       	push	r18
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
	on = ~on;
 3a0:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <on>
 3a4:	80 95       	com	r24
 3a6:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <on>
 3aa:	2f e7       	ldi	r18, 0x7F	; 127
 3ac:	88 e3       	ldi	r24, 0x38	; 56
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <__vector_1+0x20>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <__vector_1+0x2a>
 3ba:	00 00       	nop
	_delay_ms(50); /* Software debouncing control delay */
}
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <main>:

int main(void)
{

	INIT_eeprom();
 3cc:	0e 94 a1 00 	call	0x142	; 0x142 <INIT_eeprom>
	INIT_buttons();
 3d0:	0e 94 49 00 	call	0x92	; 0x92 <INIT_buttons>
	INIT_SSD();
 3d4:	0e 94 c1 00 	call	0x182	; 0x182 <INIT_SSD>
	INIT_Timer0();
 3d8:	0e 94 4c 02 	call	0x498	; 0x498 <INIT_Timer0>
	INIT_Timer1();
 3dc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <INIT_Timer1>
	INIT_HeaterCooler();
 3e0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <INIT_HeaterCooler>
	LM35_Init(ADC_Channel0);
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 a8 00 	call	0x150	; 0x150 <LM35_Init>
		{
			SSD_OFF();
			HEATER_OFF();
			COOLER_OFF();
			setting = 0;
			count = 1;
 3ea:	c1 e0       	ldi	r28, 0x01	; 1
	INIT_HeaterCooler();
	LM35_Init(ADC_Channel0);
	while (1)
	{

		if (on)
 3ec:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <on>
 3f0:	88 23       	and	r24, r24
 3f2:	a1 f0       	breq	.+40     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{
			UpdateSetTemp();
 3f4:	0e 94 55 00 	call	0xaa	; 0xaa <UpdateSetTemp>

			if (!setting)
 3f8:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <setting>
 3fc:	81 11       	cpse	r24, r1
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			{
				SSD_write(LM35_Read());
 400:	0e 94 b9 00 	call	0x172	; 0x172 <LM35_Read>
 404:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
 408:	f1 cf       	rjmp	.-30     	; 0x3ec <main+0x20>
			}
			else
			{

				if (count % 2 == 0)
 40a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <count>
 40e:	80 fd       	sbrc	r24, 0
 410:	ed cf       	rjmp	.-38     	; 0x3ec <main+0x20>
				{
					SSD_write(settemp);
 412:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
 416:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
 41a:	e8 cf       	rjmp	.-48     	; 0x3ec <main+0x20>
				}
			}
		}
		else
		{
			SSD_OFF();
 41c:	0e 94 c5 00 	call	0x18a	; 0x18a <SSD_OFF>
			HEATER_OFF();
 420:	0e 94 04 01 	call	0x208	; 0x208 <HEATER_OFF>
			COOLER_OFF();
 424:	0e 94 00 01 	call	0x200	; 0x200 <COOLER_OFF>
			setting = 0;
 428:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <setting>
			count = 1;
 42c:	c0 93 8e 00 	sts	0x008E, r28	; 0x80008e <count>
 430:	dd cf       	rjmp	.-70     	; 0x3ec <main+0x20>

00000432 <ADC_Init>:
 432:	dc 01       	movw	r26, r24
 434:	e0 e9       	ldi	r30, 0x90	; 144
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	8c 91       	ld	r24, X
 43a:	80 83       	st	Z, r24
 43c:	11 96       	adiw	r26, 0x01	; 1
 43e:	8c 91       	ld	r24, X
 440:	11 97       	sbiw	r26, 0x01	; 1
 442:	81 83       	std	Z+1, r24	; 0x01
 444:	12 96       	adiw	r26, 0x02	; 2
 446:	9c 91       	ld	r25, X
 448:	12 97       	sbiw	r26, 0x02	; 2
 44a:	92 83       	std	Z+2, r25	; 0x02
 44c:	13 96       	adiw	r26, 0x03	; 3
 44e:	9c 91       	ld	r25, X
 450:	93 83       	std	Z+3, r25	; 0x03
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	11 f4       	brne	.+4      	; 0x45a <ADC_Init+0x28>
 456:	33 9a       	sbi	0x06, 3	; 6
 458:	03 c0       	rjmp	.+6      	; 0x460 <ADC_Init+0x2e>
 45a:	81 11       	cpse	r24, r1
 45c:	01 c0       	rjmp	.+2      	; 0x460 <ADC_Init+0x2e>
 45e:	33 98       	cbi	0x06, 3	; 6
 460:	37 9a       	sbi	0x06, 7	; 6
 462:	96 b1       	in	r25, 0x06	; 6
 464:	e0 e9       	ldi	r30, 0x90	; 144
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	89 2b       	or	r24, r25
 46c:	86 b9       	out	0x06, r24	; 6
 46e:	27 b1       	in	r18, 0x07	; 7
 470:	92 81       	ldd	r25, Z+2	; 0x02
 472:	30 e4       	ldi	r19, 0x40	; 64
 474:	93 9f       	mul	r25, r19
 476:	c0 01       	movw	r24, r0
 478:	11 24       	eor	r1, r1
 47a:	82 2b       	or	r24, r18
 47c:	87 b9       	out	0x07, r24	; 7
 47e:	97 b1       	in	r25, 0x07	; 7
 480:	83 81       	ldd	r24, Z+3	; 0x03
 482:	89 2b       	or	r24, r25
 484:	87 b9       	out	0x07, r24	; 7
 486:	08 95       	ret

00000488 <ADC_Read>:
 488:	36 9a       	sbi	0x06, 6	; 6
 48a:	34 9b       	sbis	0x06, 4	; 6
 48c:	fe cf       	rjmp	.-4      	; 0x48a <ADC_Read+0x2>
 48e:	84 b1       	in	r24, 0x04	; 4
 490:	25 b1       	in	r18, 0x05	; 5
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	92 2b       	or	r25, r18
 496:	08 95       	ret

00000498 <INIT_Timer0>:
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	89 bf       	out	0x39, r24	; 57
 49c:	82 eb       	ldi	r24, 0xB2	; 178
 49e:	82 bf       	out	0x32, r24	; 50
 4a0:	85 e0       	ldi	r24, 0x05	; 5
 4a2:	83 bf       	out	0x33, r24	; 51
 4a4:	08 95       	ret

000004a6 <INIT_Timer1>:
 4a6:	1f bc       	out	0x2f, r1	; 47
 4a8:	8e b5       	in	r24, 0x2e	; 46
 4aa:	85 60       	ori	r24, 0x05	; 5
 4ac:	8e bd       	out	0x2e, r24	; 46
 4ae:	8b e7       	ldi	r24, 0x7B	; 123
 4b0:	91 ee       	ldi	r25, 0xE1	; 225
 4b2:	9d bd       	out	0x2d, r25	; 45
 4b4:	8c bd       	out	0x2c, r24	; 44
 4b6:	89 b7       	in	r24, 0x39	; 57
 4b8:	84 60       	ori	r24, 0x04	; 4
 4ba:	89 bf       	out	0x39, r24	; 57
 4bc:	08 95       	ret

000004be <__divmodsi4>:
 4be:	05 2e       	mov	r0, r21
 4c0:	97 fb       	bst	r25, 7
 4c2:	1e f4       	brtc	.+6      	; 0x4ca <__divmodsi4+0xc>
 4c4:	00 94       	com	r0
 4c6:	0e 94 76 02 	call	0x4ec	; 0x4ec <__negsi2>
 4ca:	57 fd       	sbrc	r21, 7
 4cc:	07 d0       	rcall	.+14     	; 0x4dc <__divmodsi4_neg2>
 4ce:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__udivmodsi4>
 4d2:	07 fc       	sbrc	r0, 7
 4d4:	03 d0       	rcall	.+6      	; 0x4dc <__divmodsi4_neg2>
 4d6:	4e f4       	brtc	.+18     	; 0x4ea <__divmodsi4_exit>
 4d8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__negsi2>

000004dc <__divmodsi4_neg2>:
 4dc:	50 95       	com	r21
 4de:	40 95       	com	r20
 4e0:	30 95       	com	r19
 4e2:	21 95       	neg	r18
 4e4:	3f 4f       	sbci	r19, 0xFF	; 255
 4e6:	4f 4f       	sbci	r20, 0xFF	; 255
 4e8:	5f 4f       	sbci	r21, 0xFF	; 255

000004ea <__divmodsi4_exit>:
 4ea:	08 95       	ret

000004ec <__negsi2>:
 4ec:	90 95       	com	r25
 4ee:	80 95       	com	r24
 4f0:	70 95       	com	r23
 4f2:	61 95       	neg	r22
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	08 95       	ret

000004fc <__udivmodsi4>:
 4fc:	a1 e2       	ldi	r26, 0x21	; 33
 4fe:	1a 2e       	mov	r1, r26
 500:	aa 1b       	sub	r26, r26
 502:	bb 1b       	sub	r27, r27
 504:	fd 01       	movw	r30, r26
 506:	0d c0       	rjmp	.+26     	; 0x522 <__udivmodsi4_ep>

00000508 <__udivmodsi4_loop>:
 508:	aa 1f       	adc	r26, r26
 50a:	bb 1f       	adc	r27, r27
 50c:	ee 1f       	adc	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	a2 17       	cp	r26, r18
 512:	b3 07       	cpc	r27, r19
 514:	e4 07       	cpc	r30, r20
 516:	f5 07       	cpc	r31, r21
 518:	20 f0       	brcs	.+8      	; 0x522 <__udivmodsi4_ep>
 51a:	a2 1b       	sub	r26, r18
 51c:	b3 0b       	sbc	r27, r19
 51e:	e4 0b       	sbc	r30, r20
 520:	f5 0b       	sbc	r31, r21

00000522 <__udivmodsi4_ep>:
 522:	66 1f       	adc	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	1a 94       	dec	r1
 52c:	69 f7       	brne	.-38     	; 0x508 <__udivmodsi4_loop>
 52e:	60 95       	com	r22
 530:	70 95       	com	r23
 532:	80 95       	com	r24
 534:	90 95       	com	r25
 536:	9b 01       	movw	r18, r22
 538:	ac 01       	movw	r20, r24
 53a:	bd 01       	movw	r22, r26
 53c:	cf 01       	movw	r24, r30
 53e:	08 95       	ret

00000540 <malloc>:
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	91 05       	cpc	r25, r1
 54c:	10 f4       	brcc	.+4      	; 0x552 <malloc+0x12>
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <__flp>
 556:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <__flp+0x1>
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	a0 e0       	ldi	r26, 0x00	; 0
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	30 97       	sbiw	r30, 0x00	; 0
 564:	19 f1       	breq	.+70     	; 0x5ac <malloc+0x6c>
 566:	40 81       	ld	r20, Z
 568:	51 81       	ldd	r21, Z+1	; 0x01
 56a:	02 81       	ldd	r16, Z+2	; 0x02
 56c:	13 81       	ldd	r17, Z+3	; 0x03
 56e:	48 17       	cp	r20, r24
 570:	59 07       	cpc	r21, r25
 572:	c8 f0       	brcs	.+50     	; 0x5a6 <malloc+0x66>
 574:	84 17       	cp	r24, r20
 576:	95 07       	cpc	r25, r21
 578:	69 f4       	brne	.+26     	; 0x594 <malloc+0x54>
 57a:	10 97       	sbiw	r26, 0x00	; 0
 57c:	31 f0       	breq	.+12     	; 0x58a <malloc+0x4a>
 57e:	12 96       	adiw	r26, 0x02	; 2
 580:	0c 93       	st	X, r16
 582:	12 97       	sbiw	r26, 0x02	; 2
 584:	13 96       	adiw	r26, 0x03	; 3
 586:	1c 93       	st	X, r17
 588:	27 c0       	rjmp	.+78     	; 0x5d8 <malloc+0x98>
 58a:	00 93 98 00 	sts	0x0098, r16	; 0x800098 <__flp>
 58e:	10 93 99 00 	sts	0x0099, r17	; 0x800099 <__flp+0x1>
 592:	22 c0       	rjmp	.+68     	; 0x5d8 <malloc+0x98>
 594:	21 15       	cp	r18, r1
 596:	31 05       	cpc	r19, r1
 598:	19 f0       	breq	.+6      	; 0x5a0 <malloc+0x60>
 59a:	42 17       	cp	r20, r18
 59c:	53 07       	cpc	r21, r19
 59e:	18 f4       	brcc	.+6      	; 0x5a6 <malloc+0x66>
 5a0:	9a 01       	movw	r18, r20
 5a2:	bd 01       	movw	r22, r26
 5a4:	ef 01       	movw	r28, r30
 5a6:	df 01       	movw	r26, r30
 5a8:	f8 01       	movw	r30, r16
 5aa:	db cf       	rjmp	.-74     	; 0x562 <malloc+0x22>
 5ac:	21 15       	cp	r18, r1
 5ae:	31 05       	cpc	r19, r1
 5b0:	f9 f0       	breq	.+62     	; 0x5f0 <malloc+0xb0>
 5b2:	28 1b       	sub	r18, r24
 5b4:	39 0b       	sbc	r19, r25
 5b6:	24 30       	cpi	r18, 0x04	; 4
 5b8:	31 05       	cpc	r19, r1
 5ba:	80 f4       	brcc	.+32     	; 0x5dc <malloc+0x9c>
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	9b 81       	ldd	r25, Y+3	; 0x03
 5c0:	61 15       	cp	r22, r1
 5c2:	71 05       	cpc	r23, r1
 5c4:	21 f0       	breq	.+8      	; 0x5ce <malloc+0x8e>
 5c6:	fb 01       	movw	r30, r22
 5c8:	93 83       	std	Z+3, r25	; 0x03
 5ca:	82 83       	std	Z+2, r24	; 0x02
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <malloc+0x96>
 5ce:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__flp+0x1>
 5d2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__flp>
 5d6:	fe 01       	movw	r30, r28
 5d8:	32 96       	adiw	r30, 0x02	; 2
 5da:	44 c0       	rjmp	.+136    	; 0x664 <malloc+0x124>
 5dc:	fe 01       	movw	r30, r28
 5de:	e2 0f       	add	r30, r18
 5e0:	f3 1f       	adc	r31, r19
 5e2:	81 93       	st	Z+, r24
 5e4:	91 93       	st	Z+, r25
 5e6:	22 50       	subi	r18, 0x02	; 2
 5e8:	31 09       	sbc	r19, r1
 5ea:	39 83       	std	Y+1, r19	; 0x01
 5ec:	28 83       	st	Y, r18
 5ee:	3a c0       	rjmp	.+116    	; 0x664 <malloc+0x124>
 5f0:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__brkval>
 5f4:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__brkval+0x1>
 5f8:	23 2b       	or	r18, r19
 5fa:	41 f4       	brne	.+16     	; 0x60c <malloc+0xcc>
 5fc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 600:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 604:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__brkval+0x1>
 608:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__brkval>
 60c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 610:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 614:	21 15       	cp	r18, r1
 616:	31 05       	cpc	r19, r1
 618:	41 f4       	brne	.+16     	; 0x62a <malloc+0xea>
 61a:	2d b7       	in	r18, 0x3d	; 61
 61c:	3e b7       	in	r19, 0x3e	; 62
 61e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 622:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 626:	24 1b       	sub	r18, r20
 628:	35 0b       	sbc	r19, r21
 62a:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__brkval>
 62e:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__brkval+0x1>
 632:	e2 17       	cp	r30, r18
 634:	f3 07       	cpc	r31, r19
 636:	a0 f4       	brcc	.+40     	; 0x660 <malloc+0x120>
 638:	2e 1b       	sub	r18, r30
 63a:	3f 0b       	sbc	r19, r31
 63c:	28 17       	cp	r18, r24
 63e:	39 07       	cpc	r19, r25
 640:	78 f0       	brcs	.+30     	; 0x660 <malloc+0x120>
 642:	ac 01       	movw	r20, r24
 644:	4e 5f       	subi	r20, 0xFE	; 254
 646:	5f 4f       	sbci	r21, 0xFF	; 255
 648:	24 17       	cp	r18, r20
 64a:	35 07       	cpc	r19, r21
 64c:	48 f0       	brcs	.+18     	; 0x660 <malloc+0x120>
 64e:	4e 0f       	add	r20, r30
 650:	5f 1f       	adc	r21, r31
 652:	50 93 97 00 	sts	0x0097, r21	; 0x800097 <__brkval+0x1>
 656:	40 93 96 00 	sts	0x0096, r20	; 0x800096 <__brkval>
 65a:	81 93       	st	Z+, r24
 65c:	91 93       	st	Z+, r25
 65e:	02 c0       	rjmp	.+4      	; 0x664 <malloc+0x124>
 660:	e0 e0       	ldi	r30, 0x00	; 0
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	cf 01       	movw	r24, r30
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	0f 91       	pop	r16
 66e:	08 95       	ret

00000670 <free>:
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	09 f4       	brne	.+2      	; 0x67a <free+0xa>
 678:	81 c0       	rjmp	.+258    	; 0x77c <free+0x10c>
 67a:	fc 01       	movw	r30, r24
 67c:	32 97       	sbiw	r30, 0x02	; 2
 67e:	13 82       	std	Z+3, r1	; 0x03
 680:	12 82       	std	Z+2, r1	; 0x02
 682:	a0 91 98 00 	lds	r26, 0x0098	; 0x800098 <__flp>
 686:	b0 91 99 00 	lds	r27, 0x0099	; 0x800099 <__flp+0x1>
 68a:	10 97       	sbiw	r26, 0x00	; 0
 68c:	81 f4       	brne	.+32     	; 0x6ae <free+0x3e>
 68e:	20 81       	ld	r18, Z
 690:	31 81       	ldd	r19, Z+1	; 0x01
 692:	82 0f       	add	r24, r18
 694:	93 1f       	adc	r25, r19
 696:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__brkval>
 69a:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__brkval+0x1>
 69e:	28 17       	cp	r18, r24
 6a0:	39 07       	cpc	r19, r25
 6a2:	51 f5       	brne	.+84     	; 0x6f8 <free+0x88>
 6a4:	f0 93 97 00 	sts	0x0097, r31	; 0x800097 <__brkval+0x1>
 6a8:	e0 93 96 00 	sts	0x0096, r30	; 0x800096 <__brkval>
 6ac:	67 c0       	rjmp	.+206    	; 0x77c <free+0x10c>
 6ae:	ed 01       	movw	r28, r26
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	ce 17       	cp	r28, r30
 6b6:	df 07       	cpc	r29, r31
 6b8:	40 f4       	brcc	.+16     	; 0x6ca <free+0x5a>
 6ba:	4a 81       	ldd	r20, Y+2	; 0x02
 6bc:	5b 81       	ldd	r21, Y+3	; 0x03
 6be:	9e 01       	movw	r18, r28
 6c0:	41 15       	cp	r20, r1
 6c2:	51 05       	cpc	r21, r1
 6c4:	f1 f0       	breq	.+60     	; 0x702 <free+0x92>
 6c6:	ea 01       	movw	r28, r20
 6c8:	f5 cf       	rjmp	.-22     	; 0x6b4 <free+0x44>
 6ca:	d3 83       	std	Z+3, r29	; 0x03
 6cc:	c2 83       	std	Z+2, r28	; 0x02
 6ce:	40 81       	ld	r20, Z
 6d0:	51 81       	ldd	r21, Z+1	; 0x01
 6d2:	84 0f       	add	r24, r20
 6d4:	95 1f       	adc	r25, r21
 6d6:	c8 17       	cp	r28, r24
 6d8:	d9 07       	cpc	r29, r25
 6da:	59 f4       	brne	.+22     	; 0x6f2 <free+0x82>
 6dc:	88 81       	ld	r24, Y
 6de:	99 81       	ldd	r25, Y+1	; 0x01
 6e0:	84 0f       	add	r24, r20
 6e2:	95 1f       	adc	r25, r21
 6e4:	02 96       	adiw	r24, 0x02	; 2
 6e6:	91 83       	std	Z+1, r25	; 0x01
 6e8:	80 83       	st	Z, r24
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	9b 81       	ldd	r25, Y+3	; 0x03
 6ee:	93 83       	std	Z+3, r25	; 0x03
 6f0:	82 83       	std	Z+2, r24	; 0x02
 6f2:	21 15       	cp	r18, r1
 6f4:	31 05       	cpc	r19, r1
 6f6:	29 f4       	brne	.+10     	; 0x702 <free+0x92>
 6f8:	f0 93 99 00 	sts	0x0099, r31	; 0x800099 <__flp+0x1>
 6fc:	e0 93 98 00 	sts	0x0098, r30	; 0x800098 <__flp>
 700:	3d c0       	rjmp	.+122    	; 0x77c <free+0x10c>
 702:	e9 01       	movw	r28, r18
 704:	fb 83       	std	Y+3, r31	; 0x03
 706:	ea 83       	std	Y+2, r30	; 0x02
 708:	49 91       	ld	r20, Y+
 70a:	59 91       	ld	r21, Y+
 70c:	c4 0f       	add	r28, r20
 70e:	d5 1f       	adc	r29, r21
 710:	ec 17       	cp	r30, r28
 712:	fd 07       	cpc	r31, r29
 714:	61 f4       	brne	.+24     	; 0x72e <free+0xbe>
 716:	80 81       	ld	r24, Z
 718:	91 81       	ldd	r25, Z+1	; 0x01
 71a:	84 0f       	add	r24, r20
 71c:	95 1f       	adc	r25, r21
 71e:	02 96       	adiw	r24, 0x02	; 2
 720:	e9 01       	movw	r28, r18
 722:	99 83       	std	Y+1, r25	; 0x01
 724:	88 83       	st	Y, r24
 726:	82 81       	ldd	r24, Z+2	; 0x02
 728:	93 81       	ldd	r25, Z+3	; 0x03
 72a:	9b 83       	std	Y+3, r25	; 0x03
 72c:	8a 83       	std	Y+2, r24	; 0x02
 72e:	e0 e0       	ldi	r30, 0x00	; 0
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	12 96       	adiw	r26, 0x02	; 2
 734:	8d 91       	ld	r24, X+
 736:	9c 91       	ld	r25, X
 738:	13 97       	sbiw	r26, 0x03	; 3
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	19 f0       	breq	.+6      	; 0x744 <free+0xd4>
 73e:	fd 01       	movw	r30, r26
 740:	dc 01       	movw	r26, r24
 742:	f7 cf       	rjmp	.-18     	; 0x732 <free+0xc2>
 744:	8d 91       	ld	r24, X+
 746:	9c 91       	ld	r25, X
 748:	11 97       	sbiw	r26, 0x01	; 1
 74a:	9d 01       	movw	r18, r26
 74c:	2e 5f       	subi	r18, 0xFE	; 254
 74e:	3f 4f       	sbci	r19, 0xFF	; 255
 750:	82 0f       	add	r24, r18
 752:	93 1f       	adc	r25, r19
 754:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__brkval>
 758:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__brkval+0x1>
 75c:	28 17       	cp	r18, r24
 75e:	39 07       	cpc	r19, r25
 760:	69 f4       	brne	.+26     	; 0x77c <free+0x10c>
 762:	30 97       	sbiw	r30, 0x00	; 0
 764:	29 f4       	brne	.+10     	; 0x770 <free+0x100>
 766:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__flp+0x1>
 76a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__flp>
 76e:	02 c0       	rjmp	.+4      	; 0x774 <free+0x104>
 770:	13 82       	std	Z+3, r1	; 0x03
 772:	12 82       	std	Z+2, r1	; 0x02
 774:	b0 93 97 00 	sts	0x0097, r27	; 0x800097 <__brkval+0x1>
 778:	a0 93 96 00 	sts	0x0096, r26	; 0x800096 <__brkval>
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <eeprom_read_byte>:
 782:	e1 99       	sbic	0x1c, 1	; 28
 784:	fe cf       	rjmp	.-4      	; 0x782 <eeprom_read_byte>
 786:	9f bb       	out	0x1f, r25	; 31
 788:	8e bb       	out	0x1e, r24	; 30
 78a:	e0 9a       	sbi	0x1c, 0	; 28
 78c:	99 27       	eor	r25, r25
 78e:	8d b3       	in	r24, 0x1d	; 29
 790:	08 95       	ret

00000792 <eeprom_write_byte>:
 792:	26 2f       	mov	r18, r22

00000794 <eeprom_write_r18>:
 794:	e1 99       	sbic	0x1c, 1	; 28
 796:	fe cf       	rjmp	.-4      	; 0x794 <eeprom_write_r18>
 798:	9f bb       	out	0x1f, r25	; 31
 79a:	8e bb       	out	0x1e, r24	; 30
 79c:	2d bb       	out	0x1d, r18	; 29
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	f8 94       	cli
 7a2:	e2 9a       	sbi	0x1c, 2	; 28
 7a4:	e1 9a       	sbi	0x1c, 1	; 28
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	01 96       	adiw	r24, 0x01	; 1
 7aa:	08 95       	ret

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
