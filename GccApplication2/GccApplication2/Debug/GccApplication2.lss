
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800072  00800072  0000067a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000006e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001336  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb1  00000000  00000000  00001bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d26  00000000  00000000  00002777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  000034a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000683  00000000  00000000  000036d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ed  00000000  00000000  00003d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 42 01 	call	0x284	; 0x284 <main>
  8a:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INIT_buttons>:



void INIT_buttons()
{
		SetBit(OnOffPort,OnOffPin);  
  92:	92 9a       	sbi	0x12, 2	; 18
		ClearBit(OnOffDDR,OnOffPin);
  94:	8a 98       	cbi	0x11, 2	; 17
		SetBit(upPort,upPin); 
  96:	90 9a       	sbi	0x12, 0	; 18
		ClearBit(upDDR,upPin);
  98:	88 98       	cbi	0x11, 0	; 17
		SetBit(downPort,downPin);  
  9a:	91 9a       	sbi	0x12, 1	; 18
		ClearBit(downDDR,downPin);
  9c:	89 98       	cbi	0x11, 1	; 17
		GICR = 1<<INT0;		/* Enable INT0*/
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	8b bf       	out	0x3b, r24	; 59
		MCUCR = 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	85 bf       	out	0x35, r24	; 53
		sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <UpdateSetTemp>:
}

void UpdateSetTemp()
{
	
	if ((!GetBit(PIND,0))||(!GetBit(PIND,1)))
  aa:	80 9b       	sbis	0x10, 0	; 16
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <UpdateSetTemp+0x8>
  ae:	81 99       	sbic	0x10, 1	; 16
  b0:	43 c0       	rjmp	.+134    	; 0x138 <UpdateSetTemp+0x8e>
	{
		if ((setting==1)&&(!GetBit(PIND,0))&&(count>0))
  b2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <setting>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	71 f5       	brne	.+92     	; 0x116 <UpdateSetTemp+0x6c>
  ba:	80 99       	sbic	0x10, 0	; 16
  bc:	17 c0       	rjmp	.+46     	; 0xec <UpdateSetTemp+0x42>
  be:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <count>
  c2:	88 23       	and	r24, r24
  c4:	99 f0       	breq	.+38     	; 0xec <UpdateSetTemp+0x42>
		{
			if (!(settemp>=maxTemp))
  c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  ca:	8b 34       	cpi	r24, 0x4B	; 75
  cc:	18 f4       	brcc	.+6      	; 0xd4 <UpdateSetTemp+0x2a>
			{
				settemp+=5;
  ce:	8b 5f       	subi	r24, 0xFB	; 251
  d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
			}
			while (!GetBit(PIND,0))
  d4:	80 99       	sbic	0x10, 0	; 16
  d6:	0a c0       	rjmp	.+20     	; 0xec <UpdateSetTemp+0x42>
			{
				SSD_write(settemp);
  d8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  dc:	0e 94 c4 00 	call	0x188	; 0x188 <SSD_write>
		{
			if (!(settemp>=maxTemp))
			{
				settemp+=5;
			}
			while (!GetBit(PIND,0))
  e0:	80 9b       	sbis	0x10, 0	; 16
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <UpdateSetTemp+0x2e>
				SSD_write(settemp);
			}
			
			
		}
		if ((setting==1)&&(!GetBit(PIND,1))&&(settemp>miniTemp)&&(count>0))
  e4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <setting>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	a9 f4       	brne	.+42     	; 0x116 <UpdateSetTemp+0x6c>
  ec:	81 99       	sbic	0x10, 1	; 16
  ee:	13 c0       	rjmp	.+38     	; 0x116 <UpdateSetTemp+0x6c>
  f0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  f4:	84 32       	cpi	r24, 0x24	; 36
  f6:	78 f0       	brcs	.+30     	; 0x116 <UpdateSetTemp+0x6c>
  f8:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <count>
  fc:	99 23       	and	r25, r25
  fe:	59 f0       	breq	.+22     	; 0x116 <UpdateSetTemp+0x6c>
		{
			if (!(settemp<=miniTemp))
			{
				settemp-=5;
 100:	85 50       	subi	r24, 0x05	; 5
 102:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
			}
			while (!GetBit(PIND,1))
 106:	81 99       	sbic	0x10, 1	; 16
 108:	06 c0       	rjmp	.+12     	; 0x116 <UpdateSetTemp+0x6c>
			{
				SSD_write(settemp);
 10a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
 10e:	0e 94 c4 00 	call	0x188	; 0x188 <SSD_write>
		{
			if (!(settemp<=miniTemp))
			{
				settemp-=5;
			}
			while (!GetBit(PIND,1))
 112:	81 9b       	sbis	0x10, 1	; 16
 114:	fa cf       	rjmp	.-12     	; 0x10a <UpdateSetTemp+0x60>
			{
				SSD_write(settemp);
			}
		}
		eeprom_write_byte((int*) 0x55,settemp);
 116:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <settemp>
 11a:	85 e5       	ldi	r24, 0x55	; 85
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <eeprom_write_byte>
		setting=1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <setting>
		count=0;
 128:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <count>
		settemp=eeprom_read_byte((int*)0x55);
 12c:	85 e5       	ldi	r24, 0x55	; 85
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <eeprom_read_byte>
 134:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
 138:	08 95       	ret

0000013a <INIT_eeprom>:
#include "EEPROM.h"
extern char settemp;
void INIT_eeprom()
{

		eeprom_write_byte ((int*)0x55,settemp);
 13a:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <settemp>
 13e:	85 e5       	ldi	r24, 0x55	; 85
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 db 02 	call	0x5b6	; 0x5b6 <eeprom_write_byte>
 146:	08 95       	ret

00000148 <LM35_Init>:
 * Created: 1/5/2023 11:09:05 PM
 *  Author: Kareem
 */
#include "LM35.h"
void LM35_Init(ADC_Channel Channel_confg)
{
 148:	cf 93       	push	r28
 14a:	c8 2f       	mov	r28, r24
	ADC_ConfigStruct *ptr = (ADC_ConfigStruct *)(malloc(sizeof(ADC_ConfigStruct)));
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 b2 01 	call	0x364	; 0x364 <malloc>
	;
	ptr->PSC = PSC_64;
 154:	26 e0       	ldi	r18, 0x06	; 6
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
	ptr->RMode = Polling;
 15a:	11 82       	std	Z+1, r1	; 0x01
	ptr->VRef = VInternal;
 15c:	23 e0       	ldi	r18, 0x03	; 3
 15e:	22 83       	std	Z+2, r18	; 0x02
	ptr->Channel = Channel_confg;
 160:	c3 83       	std	Z+3, r28	; 0x03
	ADC_Init(ptr);
 162:	0e 94 73 01 	call	0x2e6	; 0x2e6 <ADC_Init>
}
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <LM35_Read>:

unsigned short int LM35_Read(void)
{
	unsigned short int temp;

	temp = ADC_Read(ADC_Channel0) / 4;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 9e 01 	call	0x33c	; 0x33c <ADC_Read>

	return temp;
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	08 95       	ret

0000017a <INIT_SSD>:
char units;
char tens;

	void INIT_SSD()
	{
		DDRB=0xff;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	87 bb       	out	0x17, r24	; 23
		PORTB=0;
 17e:	18 ba       	out	0x18, r1	; 24
 180:	08 95       	ret

00000182 <SSD_OFF>:
	}
	
	void SSD_OFF()
	{
		SSD_port=0x7f;
 182:	8f e7       	ldi	r24, 0x7F	; 127
 184:	88 bb       	out	0x18, r24	; 24
 186:	08 95       	ret

00000188 <SSD_write>:
	
	
	
	void SSD_write(char num)
	{
			units=num%10;
 188:	9d ec       	ldi	r25, 0xCD	; 205
 18a:	89 9f       	mul	r24, r25
 18c:	91 2d       	mov	r25, r1
 18e:	11 24       	eor	r1, r1
 190:	e9 2f       	mov	r30, r25
 192:	e6 95       	lsr	r30
 194:	e6 95       	lsr	r30
 196:	e6 95       	lsr	r30
 198:	ee 0f       	add	r30, r30
 19a:	2e 2f       	mov	r18, r30
 19c:	22 0f       	add	r18, r18
 19e:	22 0f       	add	r18, r18
 1a0:	e2 0f       	add	r30, r18
 1a2:	8e 1b       	sub	r24, r30
 1a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <units>
			tens=num/10;
 1a8:	96 95       	lsr	r25
 1aa:	96 95       	lsr	r25
 1ac:	96 95       	lsr	r25
 1ae:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <tens>
			
			SSD_port=number[units];
 1b2:	e8 2f       	mov	r30, r24
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	ea 59       	subi	r30, 0x9A	; 154
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	80 81       	ld	r24, Z
 1bc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	8f e1       	ldi	r24, 0x1F	; 31
 1c0:	9e e4       	ldi	r25, 0x4E	; 78
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <SSD_write+0x3a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <SSD_write+0x40>
 1c8:	00 00       	nop
			_delay_ms(MultiplexDelay);
			ClearBit(Display1Port,Display1Pin);
 1ca:	d9 98       	cbi	0x1b, 1	; 27
			SetBit(Display2Port,Display2Pin);
 1cc:	da 9a       	sbi	0x1b, 2	; 27
			
			
			SSD_port=number[tens];
 1ce:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <tens>
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	ea 59       	subi	r30, 0x9A	; 154
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	80 81       	ld	r24, Z
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	9e e4       	ldi	r25, 0x4E	; 78
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <SSD_write+0x58>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <SSD_write+0x5e>
 1e6:	00 00       	nop
			_delay_ms(MultiplexDelay);	
			SetBit(Display1Port,Display1Pin);
 1e8:	d9 9a       	sbi	0x1b, 1	; 27
			ClearBit(Display2Port,Display2Pin);	
 1ea:	da 98       	cbi	0x1b, 2	; 27
 1ec:	08 95       	ret

000001ee <INIT_HeaterCooler>:
{
	ClearBit(coolerPort, coolerPin);
}
void HEATER_ON()
{
	SetBit(heaterPort, heaterPin);
 1ee:	8f 9a       	sbi	0x11, 7	; 17
 1f0:	8e 9a       	sbi	0x11, 6	; 17
 1f2:	08 95       	ret

000001f4 <COOLER_OFF>:
 1f4:	96 98       	cbi	0x12, 6	; 18
 1f6:	08 95       	ret

000001f8 <HEATER_OFF>:
}
void HEATER_OFF()
{
	ClearBit(heaterPort, heaterPin);
 1f8:	97 98       	cbi	0x12, 7	; 18
 1fa:	08 95       	ret

000001fc <__vector_9>:
#include "TCS.h"
#include "Timer.h"
char on = 0;  // variable to hold button state (0 or 1)

ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
	
	
	if (setting==1)
 20a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <setting>
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	59 f4       	brne	.+22     	; 0x228 <__vector_9+0x2c>
	{
		PORTB=0xff;
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	88 bb       	out	0x18, r24	; 24
		
		if (count==9)
 216:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <count>
 21a:	89 30       	cpi	r24, 0x09	; 9
 21c:	29 f4       	brne	.+10     	; 0x228 <__vector_9+0x2c>
		{
			setting=0;
 21e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <setting>
			count=1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <count>
		}
		
	}
	TCNT1 = 57723;   
 228:	8b e7       	ldi	r24, 0x7B	; 123
 22a:	91 ee       	ldi	r25, 0xE1	; 225
 22c:	9d bd       	out	0x2d, r25	; 45
 22e:	8c bd       	out	0x2c, r24	; 44
	count++;
 230:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <count>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <count>
	
}
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_1>:



ISR(INT0_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	2f 93       	push	r18
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
	on=~on;		
 258:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 25c:	80 95       	com	r24
 25e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 262:	2f e7       	ldi	r18, 0x7F	; 127
 264:	88 e3       	ldi	r24, 0x38	; 56
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <__vector_1+0x20>
 270:	00 c0       	rjmp	.+0      	; 0x272 <__vector_1+0x2a>
 272:	00 00       	nop
	_delay_ms(50);  	/* Software debouncing control delay */
	
}
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <main>:

int main(void) {
	
	
	
	INIT_eeprom();
 284:	0e 94 9d 00 	call	0x13a	; 0x13a <INIT_eeprom>
	INIT_buttons();
 288:	0e 94 49 00 	call	0x92	; 0x92 <INIT_buttons>
	INIT_SSD();
 28c:	0e 94 bd 00 	call	0x17a	; 0x17a <INIT_SSD>
	INIT_Timer1();
 290:	0e 94 a6 01 	call	0x34c	; 0x34c <INIT_Timer1>
	INIT_HeaterCooler();
 294:	0e 94 f7 00 	call	0x1ee	; 0x1ee <INIT_HeaterCooler>
	LM35_Init(ADC_Channel0);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 a4 00 	call	0x148	; 0x148 <LM35_Init>
		{
			SSD_OFF();
			HEATER_OFF();
			COOLER_OFF();
			setting=0;
			count=1;
 29e:	c1 e0       	ldi	r28, 0x01	; 1
	INIT_HeaterCooler();
	LM35_Init(ADC_Channel0);
	while (1)
	 {	
		
		if (on)
 2a0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 2a4:	88 23       	and	r24, r24
 2a6:	a1 f0       	breq	.+40     	; 0x2d0 <main+0x4c>
		{
			UpdateSetTemp();
 2a8:	0e 94 55 00 	call	0xaa	; 0xaa <UpdateSetTemp>
			
			if(!setting)
 2ac:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <setting>
 2b0:	81 11       	cpse	r24, r1
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <main+0x3a>
			{
				SSD_write(LM35_Read());
 2b4:	0e 94 b5 00 	call	0x16a	; 0x16a <LM35_Read>
 2b8:	0e 94 c4 00 	call	0x188	; 0x188 <SSD_write>
 2bc:	f1 cf       	rjmp	.-30     	; 0x2a0 <main+0x1c>
			}
			else
			{
				if (count%2==0)
 2be:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <count>
 2c2:	80 fd       	sbrc	r24, 0
 2c4:	ed cf       	rjmp	.-38     	; 0x2a0 <main+0x1c>
				{
					{SSD_write(settemp);}
 2c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
 2ca:	0e 94 c4 00 	call	0x188	; 0x188 <SSD_write>
 2ce:	e8 cf       	rjmp	.-48     	; 0x2a0 <main+0x1c>
			
			
		}
		else
		{
			SSD_OFF();
 2d0:	0e 94 c1 00 	call	0x182	; 0x182 <SSD_OFF>
			HEATER_OFF();
 2d4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <HEATER_OFF>
			COOLER_OFF();
 2d8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <COOLER_OFF>
			setting=0;
 2dc:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <setting>
			count=1;
 2e0:	c0 93 73 00 	sts	0x0073, r28	; 0x800073 <count>
 2e4:	dd cf       	rjmp	.-70     	; 0x2a0 <main+0x1c>

000002e6 <ADC_Init>:
#include "ADC.h"

static ADC_ConfigStruct ADC_InitStruct;


void ADC_Init(ADC_ConfigStruct* ptr){
 2e6:	dc 01       	movw	r26, r24
	ADC_InitStruct.PSC = ptr->PSC;
 2e8:	e5 e7       	ldi	r30, 0x75	; 117
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	8c 91       	ld	r24, X
 2ee:	80 83       	st	Z, r24
	ADC_InitStruct.RMode = ptr->RMode;
 2f0:	11 96       	adiw	r26, 0x01	; 1
 2f2:	8c 91       	ld	r24, X
 2f4:	11 97       	sbiw	r26, 0x01	; 1
 2f6:	81 83       	std	Z+1, r24	; 0x01
	ADC_InitStruct.VRef = ptr->VRef;
 2f8:	12 96       	adiw	r26, 0x02	; 2
 2fa:	9c 91       	ld	r25, X
 2fc:	12 97       	sbiw	r26, 0x02	; 2
 2fe:	92 83       	std	Z+2, r25	; 0x02
	ADC_InitStruct.Channel = ptr->Channel;
 300:	13 96       	adiw	r26, 0x03	; 3
 302:	9c 91       	ld	r25, X
 304:	93 83       	std	Z+3, r25	; 0x03
	if(ADC_InitStruct.RMode == Interrupt){
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	11 f4       	brne	.+4      	; 0x30e <ADC_Init+0x28>
		SetBit(ADCSRA_REG,ADIE_BIT);
 30a:	33 9a       	sbi	0x06, 3	; 6
 30c:	03 c0       	rjmp	.+6      	; 0x314 <ADC_Init+0x2e>
		}else if(ADC_InitStruct.RMode == Polling){
 30e:	81 11       	cpse	r24, r1
 310:	01 c0       	rjmp	.+2      	; 0x314 <ADC_Init+0x2e>
		ClearBit(ADCSRA_REG,ADIE_BIT);
 312:	33 98       	cbi	0x06, 3	; 6
	}
	// Enabling the ADC
	SetBit(ADCSRA_REG,ADEN_BIT);
 314:	37 9a       	sbi	0x06, 7	; 6
	// Setting System Clock pre-scalar
	ADCSRA_REG |= ADC_InitStruct.PSC;
 316:	96 b1       	in	r25, 0x06	; 6
 318:	e5 e7       	ldi	r30, 0x75	; 117
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	89 2b       	or	r24, r25
 320:	86 b9       	out	0x06, r24	; 6
	// Setting Vref
	//ADMUX_REG &= 0x3F;
	ADMUX_REG |= (ADC_InitStruct.VRef<<6);
 322:	27 b1       	in	r18, 0x07	; 7
 324:	92 81       	ldd	r25, Z+2	; 0x02
 326:	30 e4       	ldi	r19, 0x40	; 64
 328:	93 9f       	mul	r25, r19
 32a:	c0 01       	movw	r24, r0
 32c:	11 24       	eor	r1, r1
 32e:	82 2b       	or	r24, r18
 330:	87 b9       	out	0x07, r24	; 7
	// Setting the ADC channel to be used
	ADMUX_REG |= (ADC_InitStruct.Channel);
 332:	97 b1       	in	r25, 0x07	; 7
 334:	83 81       	ldd	r24, Z+3	; 0x03
 336:	89 2b       	or	r24, r25
 338:	87 b9       	out	0x07, r24	; 7
 33a:	08 95       	ret

0000033c <ADC_Read>:
}

unsigned short int ADC_Read(ADC_Channel channel){
	unsigned short Read=0;
	SetBit(ADCSRA_REG,ADSC_BIT);
 33c:	36 9a       	sbi	0x06, 6	; 6
	while(GetBit(ADCSRA_REG,ADIF_BIT)==0){
 33e:	34 9b       	sbis	0x06, 4	; 6
 340:	fe cf       	rjmp	.-4      	; 0x33e <ADC_Read+0x2>
	}
	Read = ADCL_REG;
 342:	84 b1       	in	r24, 0x04	; 4
	Read |= ADCH_REG<<8;
 344:	25 b1       	in	r18, 0x05	; 5
	return Read;
 346:	90 e0       	ldi	r25, 0x00	; 0
}
 348:	92 2b       	or	r25, r18
 34a:	08 95       	ret

0000034c <INIT_Timer1>:
	TIMSK |= (1 << TOIE0);
}

void INIT_Timer1()
{
	TCCR1A = 0x00;
 34c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS12)|(1 << CS10);
 34e:	8e b5       	in	r24, 0x2e	; 46
 350:	85 60       	ori	r24, 0x05	; 5
 352:	8e bd       	out	0x2e, r24	; 46
	
	TCNT1 = 57723;
 354:	8b e7       	ldi	r24, 0x7B	; 123
 356:	91 ee       	ldi	r25, 0xE1	; 225
 358:	9d bd       	out	0x2d, r25	; 45
 35a:	8c bd       	out	0x2c, r24	; 44
	
	TIMSK |= (1 << TOIE1);
 35c:	89 b7       	in	r24, 0x39	; 57
 35e:	84 60       	ori	r24, 0x04	; 4
 360:	89 bf       	out	0x39, r24	; 57
 362:	08 95       	ret

00000364 <malloc>:
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	91 05       	cpc	r25, r1
 370:	10 f4       	brcc	.+4      	; 0x376 <malloc+0x12>
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <__flp>
 37a:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <__flp+0x1>
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	a0 e0       	ldi	r26, 0x00	; 0
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	30 97       	sbiw	r30, 0x00	; 0
 388:	19 f1       	breq	.+70     	; 0x3d0 <malloc+0x6c>
 38a:	40 81       	ld	r20, Z
 38c:	51 81       	ldd	r21, Z+1	; 0x01
 38e:	02 81       	ldd	r16, Z+2	; 0x02
 390:	13 81       	ldd	r17, Z+3	; 0x03
 392:	48 17       	cp	r20, r24
 394:	59 07       	cpc	r21, r25
 396:	c8 f0       	brcs	.+50     	; 0x3ca <malloc+0x66>
 398:	84 17       	cp	r24, r20
 39a:	95 07       	cpc	r25, r21
 39c:	69 f4       	brne	.+26     	; 0x3b8 <malloc+0x54>
 39e:	10 97       	sbiw	r26, 0x00	; 0
 3a0:	31 f0       	breq	.+12     	; 0x3ae <malloc+0x4a>
 3a2:	12 96       	adiw	r26, 0x02	; 2
 3a4:	0c 93       	st	X, r16
 3a6:	12 97       	sbiw	r26, 0x02	; 2
 3a8:	13 96       	adiw	r26, 0x03	; 3
 3aa:	1c 93       	st	X, r17
 3ac:	27 c0       	rjmp	.+78     	; 0x3fc <malloc+0x98>
 3ae:	00 93 7d 00 	sts	0x007D, r16	; 0x80007d <__flp>
 3b2:	10 93 7e 00 	sts	0x007E, r17	; 0x80007e <__flp+0x1>
 3b6:	22 c0       	rjmp	.+68     	; 0x3fc <malloc+0x98>
 3b8:	21 15       	cp	r18, r1
 3ba:	31 05       	cpc	r19, r1
 3bc:	19 f0       	breq	.+6      	; 0x3c4 <malloc+0x60>
 3be:	42 17       	cp	r20, r18
 3c0:	53 07       	cpc	r21, r19
 3c2:	18 f4       	brcc	.+6      	; 0x3ca <malloc+0x66>
 3c4:	9a 01       	movw	r18, r20
 3c6:	bd 01       	movw	r22, r26
 3c8:	ef 01       	movw	r28, r30
 3ca:	df 01       	movw	r26, r30
 3cc:	f8 01       	movw	r30, r16
 3ce:	db cf       	rjmp	.-74     	; 0x386 <malloc+0x22>
 3d0:	21 15       	cp	r18, r1
 3d2:	31 05       	cpc	r19, r1
 3d4:	f9 f0       	breq	.+62     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3d6:	28 1b       	sub	r18, r24
 3d8:	39 0b       	sbc	r19, r25
 3da:	24 30       	cpi	r18, 0x04	; 4
 3dc:	31 05       	cpc	r19, r1
 3de:	80 f4       	brcc	.+32     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	9b 81       	ldd	r25, Y+3	; 0x03
 3e4:	61 15       	cp	r22, r1
 3e6:	71 05       	cpc	r23, r1
 3e8:	21 f0       	breq	.+8      	; 0x3f2 <malloc+0x8e>
 3ea:	fb 01       	movw	r30, r22
 3ec:	93 83       	std	Z+3, r25	; 0x03
 3ee:	82 83       	std	Z+2, r24	; 0x02
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <malloc+0x96>
 3f2:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__flp+0x1>
 3f6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__flp>
 3fa:	fe 01       	movw	r30, r28
 3fc:	32 96       	adiw	r30, 0x02	; 2
 3fe:	44 c0       	rjmp	.+136    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 400:	fe 01       	movw	r30, r28
 402:	e2 0f       	add	r30, r18
 404:	f3 1f       	adc	r31, r19
 406:	81 93       	st	Z+, r24
 408:	91 93       	st	Z+, r25
 40a:	22 50       	subi	r18, 0x02	; 2
 40c:	31 09       	sbc	r19, r1
 40e:	39 83       	std	Y+1, r19	; 0x01
 410:	28 83       	st	Y, r18
 412:	3a c0       	rjmp	.+116    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 414:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__brkval>
 418:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <__brkval+0x1>
 41c:	23 2b       	or	r18, r19
 41e:	41 f4       	brne	.+16     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 420:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 424:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 428:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <__brkval+0x1>
 42c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__brkval>
 430:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 434:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 438:	21 15       	cp	r18, r1
 43a:	31 05       	cpc	r19, r1
 43c:	41 f4       	brne	.+16     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 43e:	2d b7       	in	r18, 0x3d	; 61
 440:	3e b7       	in	r19, 0x3e	; 62
 442:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 446:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 44a:	24 1b       	sub	r18, r20
 44c:	35 0b       	sbc	r19, r21
 44e:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <__brkval>
 452:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <__brkval+0x1>
 456:	e2 17       	cp	r30, r18
 458:	f3 07       	cpc	r31, r19
 45a:	a0 f4       	brcc	.+40     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 45c:	2e 1b       	sub	r18, r30
 45e:	3f 0b       	sbc	r19, r31
 460:	28 17       	cp	r18, r24
 462:	39 07       	cpc	r19, r25
 464:	78 f0       	brcs	.+30     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 466:	ac 01       	movw	r20, r24
 468:	4e 5f       	subi	r20, 0xFE	; 254
 46a:	5f 4f       	sbci	r21, 0xFF	; 255
 46c:	24 17       	cp	r18, r20
 46e:	35 07       	cpc	r19, r21
 470:	48 f0       	brcs	.+18     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 472:	4e 0f       	add	r20, r30
 474:	5f 1f       	adc	r21, r31
 476:	50 93 7c 00 	sts	0x007C, r21	; 0x80007c <__brkval+0x1>
 47a:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__brkval>
 47e:	81 93       	st	Z+, r24
 480:	91 93       	st	Z+, r25
 482:	02 c0       	rjmp	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 484:	e0 e0       	ldi	r30, 0x00	; 0
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	cf 01       	movw	r24, r30
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <free>:
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	09 f4       	brne	.+2      	; 0x49e <free+0xa>
 49c:	81 c0       	rjmp	.+258    	; 0x5a0 <free+0x10c>
 49e:	fc 01       	movw	r30, r24
 4a0:	32 97       	sbiw	r30, 0x02	; 2
 4a2:	13 82       	std	Z+3, r1	; 0x03
 4a4:	12 82       	std	Z+2, r1	; 0x02
 4a6:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <__flp>
 4aa:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <__flp+0x1>
 4ae:	10 97       	sbiw	r26, 0x00	; 0
 4b0:	81 f4       	brne	.+32     	; 0x4d2 <free+0x3e>
 4b2:	20 81       	ld	r18, Z
 4b4:	31 81       	ldd	r19, Z+1	; 0x01
 4b6:	82 0f       	add	r24, r18
 4b8:	93 1f       	adc	r25, r19
 4ba:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__brkval>
 4be:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <__brkval+0x1>
 4c2:	28 17       	cp	r18, r24
 4c4:	39 07       	cpc	r19, r25
 4c6:	51 f5       	brne	.+84     	; 0x51c <free+0x88>
 4c8:	f0 93 7c 00 	sts	0x007C, r31	; 0x80007c <__brkval+0x1>
 4cc:	e0 93 7b 00 	sts	0x007B, r30	; 0x80007b <__brkval>
 4d0:	67 c0       	rjmp	.+206    	; 0x5a0 <free+0x10c>
 4d2:	ed 01       	movw	r28, r26
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	ce 17       	cp	r28, r30
 4da:	df 07       	cpc	r29, r31
 4dc:	40 f4       	brcc	.+16     	; 0x4ee <free+0x5a>
 4de:	4a 81       	ldd	r20, Y+2	; 0x02
 4e0:	5b 81       	ldd	r21, Y+3	; 0x03
 4e2:	9e 01       	movw	r18, r28
 4e4:	41 15       	cp	r20, r1
 4e6:	51 05       	cpc	r21, r1
 4e8:	f1 f0       	breq	.+60     	; 0x526 <free+0x92>
 4ea:	ea 01       	movw	r28, r20
 4ec:	f5 cf       	rjmp	.-22     	; 0x4d8 <free+0x44>
 4ee:	d3 83       	std	Z+3, r29	; 0x03
 4f0:	c2 83       	std	Z+2, r28	; 0x02
 4f2:	40 81       	ld	r20, Z
 4f4:	51 81       	ldd	r21, Z+1	; 0x01
 4f6:	84 0f       	add	r24, r20
 4f8:	95 1f       	adc	r25, r21
 4fa:	c8 17       	cp	r28, r24
 4fc:	d9 07       	cpc	r29, r25
 4fe:	59 f4       	brne	.+22     	; 0x516 <free+0x82>
 500:	88 81       	ld	r24, Y
 502:	99 81       	ldd	r25, Y+1	; 0x01
 504:	84 0f       	add	r24, r20
 506:	95 1f       	adc	r25, r21
 508:	02 96       	adiw	r24, 0x02	; 2
 50a:	91 83       	std	Z+1, r25	; 0x01
 50c:	80 83       	st	Z, r24
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	9b 81       	ldd	r25, Y+3	; 0x03
 512:	93 83       	std	Z+3, r25	; 0x03
 514:	82 83       	std	Z+2, r24	; 0x02
 516:	21 15       	cp	r18, r1
 518:	31 05       	cpc	r19, r1
 51a:	29 f4       	brne	.+10     	; 0x526 <free+0x92>
 51c:	f0 93 7e 00 	sts	0x007E, r31	; 0x80007e <__flp+0x1>
 520:	e0 93 7d 00 	sts	0x007D, r30	; 0x80007d <__flp>
 524:	3d c0       	rjmp	.+122    	; 0x5a0 <free+0x10c>
 526:	e9 01       	movw	r28, r18
 528:	fb 83       	std	Y+3, r31	; 0x03
 52a:	ea 83       	std	Y+2, r30	; 0x02
 52c:	49 91       	ld	r20, Y+
 52e:	59 91       	ld	r21, Y+
 530:	c4 0f       	add	r28, r20
 532:	d5 1f       	adc	r29, r21
 534:	ec 17       	cp	r30, r28
 536:	fd 07       	cpc	r31, r29
 538:	61 f4       	brne	.+24     	; 0x552 <free+0xbe>
 53a:	80 81       	ld	r24, Z
 53c:	91 81       	ldd	r25, Z+1	; 0x01
 53e:	84 0f       	add	r24, r20
 540:	95 1f       	adc	r25, r21
 542:	02 96       	adiw	r24, 0x02	; 2
 544:	e9 01       	movw	r28, r18
 546:	99 83       	std	Y+1, r25	; 0x01
 548:	88 83       	st	Y, r24
 54a:	82 81       	ldd	r24, Z+2	; 0x02
 54c:	93 81       	ldd	r25, Z+3	; 0x03
 54e:	9b 83       	std	Y+3, r25	; 0x03
 550:	8a 83       	std	Y+2, r24	; 0x02
 552:	e0 e0       	ldi	r30, 0x00	; 0
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	12 96       	adiw	r26, 0x02	; 2
 558:	8d 91       	ld	r24, X+
 55a:	9c 91       	ld	r25, X
 55c:	13 97       	sbiw	r26, 0x03	; 3
 55e:	00 97       	sbiw	r24, 0x00	; 0
 560:	19 f0       	breq	.+6      	; 0x568 <free+0xd4>
 562:	fd 01       	movw	r30, r26
 564:	dc 01       	movw	r26, r24
 566:	f7 cf       	rjmp	.-18     	; 0x556 <free+0xc2>
 568:	8d 91       	ld	r24, X+
 56a:	9c 91       	ld	r25, X
 56c:	11 97       	sbiw	r26, 0x01	; 1
 56e:	9d 01       	movw	r18, r26
 570:	2e 5f       	subi	r18, 0xFE	; 254
 572:	3f 4f       	sbci	r19, 0xFF	; 255
 574:	82 0f       	add	r24, r18
 576:	93 1f       	adc	r25, r19
 578:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__brkval>
 57c:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <__brkval+0x1>
 580:	28 17       	cp	r18, r24
 582:	39 07       	cpc	r19, r25
 584:	69 f4       	brne	.+26     	; 0x5a0 <free+0x10c>
 586:	30 97       	sbiw	r30, 0x00	; 0
 588:	29 f4       	brne	.+10     	; 0x594 <free+0x100>
 58a:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__flp+0x1>
 58e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__flp>
 592:	02 c0       	rjmp	.+4      	; 0x598 <free+0x104>
 594:	13 82       	std	Z+3, r1	; 0x03
 596:	12 82       	std	Z+2, r1	; 0x02
 598:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <__brkval+0x1>
 59c:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <__brkval>
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <eeprom_read_byte>:
 5a6:	e1 99       	sbic	0x1c, 1	; 28
 5a8:	fe cf       	rjmp	.-4      	; 0x5a6 <eeprom_read_byte>
 5aa:	9f bb       	out	0x1f, r25	; 31
 5ac:	8e bb       	out	0x1e, r24	; 30
 5ae:	e0 9a       	sbi	0x1c, 0	; 28
 5b0:	99 27       	eor	r25, r25
 5b2:	8d b3       	in	r24, 0x1d	; 29
 5b4:	08 95       	ret

000005b6 <eeprom_write_byte>:
 5b6:	26 2f       	mov	r18, r22

000005b8 <eeprom_write_r18>:
 5b8:	e1 99       	sbic	0x1c, 1	; 28
 5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <eeprom_write_r18>
 5bc:	9f bb       	out	0x1f, r25	; 31
 5be:	8e bb       	out	0x1e, r24	; 30
 5c0:	2d bb       	out	0x1d, r18	; 29
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	e2 9a       	sbi	0x1c, 2	; 28
 5c8:	e1 9a       	sbi	0x1c, 1	; 28
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
