
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000764  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000764  000007f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800072  00800072  0000080a  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000086c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000008a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001425  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf1  00000000  00000000  00001e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e1e  00000000  00000000  00002a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00003894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fe  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000403  00000000  00000000  0000422e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004631  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <main>
  8a:	0c 94 b0 03 	jmp	0x760	; 0x760 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INIT_buttons>:
char count;
char iteration;

void INIT_buttons()
{
	SetBit(OnOffPort, OnOffPin);
  92:	92 9a       	sbi	0x12, 2	; 18
	ClearBit(OnOffDDR, OnOffPin);
  94:	8a 98       	cbi	0x11, 2	; 17
	SetBit(upPort, upPin);
  96:	90 9a       	sbi	0x12, 0	; 18
	ClearBit(upDDR, upPin);
  98:	88 98       	cbi	0x11, 0	; 17
	SetBit(downPort, downPin);
  9a:	91 9a       	sbi	0x12, 1	; 18
	ClearBit(downDDR, downPin);
  9c:	89 98       	cbi	0x11, 1	; 17
	GICR = 1 << INT0;				 /* Enable INT0*/
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1 << ISC01 | 1 << ISC00; /* Trigger INT0 on rising edge */
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	85 bf       	out	0x35, r24	; 53
	sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <UpdateSetTemp>:
}

void UpdateSetTemp()
{

	if ((!GetBit(PIND, 0)) || (!GetBit(PIND, 1)))
  aa:	80 9b       	sbis	0x10, 0	; 16
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <UpdateSetTemp+0x8>
  ae:	81 99       	sbic	0x10, 1	; 16
  b0:	47 c0       	rjmp	.+142    	; 0x140 <UpdateSetTemp+0x96>
	{
		if ((setting == 1) && (!GetBit(PIND, 0)) && (count > 0))
  b2:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <setting>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	71 f5       	brne	.+92     	; 0x116 <UpdateSetTemp+0x6c>
  ba:	80 99       	sbic	0x10, 0	; 16
  bc:	17 c0       	rjmp	.+46     	; 0xec <UpdateSetTemp+0x42>
  be:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <count>
  c2:	88 23       	and	r24, r24
  c4:	99 f0       	breq	.+38     	; 0xec <UpdateSetTemp+0x42>
		{
			if (!(settemp >= maxTemp))
  c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  ca:	8b 34       	cpi	r24, 0x4B	; 75
  cc:	18 f4       	brcc	.+6      	; 0xd4 <UpdateSetTemp+0x2a>
			{
				settemp += 5;
  ce:	8b 5f       	subi	r24, 0xFB	; 251
  d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
			}
			while (!GetBit(PIND, 0))
  d4:	80 99       	sbic	0x10, 0	; 16
  d6:	0a c0       	rjmp	.+20     	; 0xec <UpdateSetTemp+0x42>
			{
				SSD_write(settemp);
  d8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  dc:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
		{
			if (!(settemp >= maxTemp))
			{
				settemp += 5;
			}
			while (!GetBit(PIND, 0))
  e0:	80 9b       	sbis	0x10, 0	; 16
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <UpdateSetTemp+0x2e>
			{
				SSD_write(settemp);
			}
		}
		if ((setting == 1) && (!GetBit(PIND, 1)) && (settemp > miniTemp) && (count > 0))
  e4:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <setting>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	a9 f4       	brne	.+42     	; 0x116 <UpdateSetTemp+0x6c>
  ec:	81 99       	sbic	0x10, 1	; 16
  ee:	13 c0       	rjmp	.+38     	; 0x116 <UpdateSetTemp+0x6c>
  f0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  f4:	84 32       	cpi	r24, 0x24	; 36
  f6:	78 f0       	brcs	.+30     	; 0x116 <UpdateSetTemp+0x6c>
  f8:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <count>
  fc:	99 23       	and	r25, r25
  fe:	59 f0       	breq	.+22     	; 0x116 <UpdateSetTemp+0x6c>
		{
			if (!(settemp <= miniTemp))
			{
				settemp -= 5;
 100:	85 50       	subi	r24, 0x05	; 5
 102:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
			}
			while (!GetBit(PIND, 1))
 106:	81 99       	sbic	0x10, 1	; 16
 108:	06 c0       	rjmp	.+12     	; 0x116 <UpdateSetTemp+0x6c>
			{
				SSD_write(settemp);
 10a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
 10e:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
		{
			if (!(settemp <= miniTemp))
			{
				settemp -= 5;
			}
			while (!GetBit(PIND, 1))
 112:	81 9b       	sbis	0x10, 1	; 16
 114:	fa cf       	rjmp	.-12     	; 0x10a <UpdateSetTemp+0x60>
			{
				SSD_write(settemp);
			}
		}
		eeprom_write_byte((int *)0x55, settemp);
 116:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <settemp>
 11a:	85 e5       	ldi	r24, 0x55	; 85
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 a3 03 	call	0x746	; 0x746 <eeprom_write_byte>
		setting = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <setting>
		count = 0;
 128:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <count>
		settemp = eeprom_read_byte((int *)0x55);
 12c:	85 e5       	ldi	r24, 0x55	; 85
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 9b 03 	call	0x736	; 0x736 <eeprom_read_byte>
 134:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
		TCNT1 = 57723;
 138:	8b e7       	ldi	r24, 0x7B	; 123
 13a:	91 ee       	ldi	r25, 0xE1	; 225
 13c:	9d bd       	out	0x2d, r25	; 45
 13e:	8c bd       	out	0x2c, r24	; 44
 140:	08 95       	ret

00000142 <INIT_eeprom>:
#include "EEPROM.h"
extern char settemp;
void INIT_eeprom()
{

	eeprom_write_byte((int *)0x55, settemp);
 142:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <settemp>
 146:	85 e5       	ldi	r24, 0x55	; 85
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 a3 03 	call	0x746	; 0x746 <eeprom_write_byte>
 14e:	08 95       	ret

00000150 <LM35_Init>:
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <malloc>
 15c:	26 e0       	ldi	r18, 0x06	; 6
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
 162:	11 82       	std	Z+1, r1	; 0x01
 164:	23 e0       	ldi	r18, 0x03	; 3
 166:	22 83       	std	Z+2, r18	; 0x02
 168:	c3 83       	std	Z+3, r28	; 0x03
 16a:	0e 94 0c 02 	call	0x418	; 0x418 <ADC_Init>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <LM35_Read>:
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 37 02 	call	0x46e	; 0x46e <ADC_Read>
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	08 95       	ret

00000182 <INIT_SSD>:
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	87 bb       	out	0x17, r24	; 23
 186:	18 ba       	out	0x18, r1	; 24
 188:	08 95       	ret

0000018a <SSD_OFF>:
 18a:	8f e7       	ldi	r24, 0x7F	; 127
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	08 95       	ret

00000190 <SSD_write>:
 190:	9d ec       	ldi	r25, 0xCD	; 205
 192:	89 9f       	mul	r24, r25
 194:	91 2d       	mov	r25, r1
 196:	11 24       	eor	r1, r1
 198:	e9 2f       	mov	r30, r25
 19a:	e6 95       	lsr	r30
 19c:	e6 95       	lsr	r30
 19e:	e6 95       	lsr	r30
 1a0:	ee 0f       	add	r30, r30
 1a2:	2e 2f       	mov	r18, r30
 1a4:	22 0f       	add	r18, r18
 1a6:	22 0f       	add	r18, r18
 1a8:	e2 0f       	add	r30, r18
 1aa:	8e 1b       	sub	r24, r30
 1ac:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <units>
 1b0:	96 95       	lsr	r25
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <tens>
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ea 59       	subi	r30, 0x9A	; 154
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	80 81       	ld	r24, Z
 1c4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	8f e1       	ldi	r24, 0x1F	; 31
 1c8:	9e e4       	ldi	r25, 0x4E	; 78
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <SSD_write+0x3a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <SSD_write+0x40>
 1d0:	00 00       	nop
 1d2:	d9 98       	cbi	0x1b, 1	; 27
 1d4:	da 9a       	sbi	0x1b, 2	; 27
 1d6:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <tens>
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ea 59       	subi	r30, 0x9A	; 154
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	80 81       	ld	r24, Z
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	8f e1       	ldi	r24, 0x1F	; 31
 1e6:	9e e4       	ldi	r25, 0x4E	; 78
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <SSD_write+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <SSD_write+0x5e>
 1ee:	00 00       	nop
 1f0:	d9 9a       	sbi	0x1b, 1	; 27
 1f2:	da 98       	cbi	0x1b, 2	; 27
 1f4:	08 95       	ret

000001f6 <INIT_HeaterCooler>:

#include "TCS.h"

void INIT_HeaterCooler()
{
	SetBit(heaterDDR, heaterPin);
 1f6:	8f 9a       	sbi	0x11, 7	; 17
	SetBit(coolerDDR, coolerPin);
 1f8:	8e 9a       	sbi	0x11, 6	; 17
 1fa:	08 95       	ret

000001fc <COOLER_ON>:
}

void COOLER_ON()
{
	SetBit(coolerPort, coolerPin);
 1fc:	96 9a       	sbi	0x12, 6	; 18
 1fe:	08 95       	ret

00000200 <COOLER_OFF>:
}

void COOLER_OFF()
{
	ClearBit(coolerPort, coolerPin);
 200:	96 98       	cbi	0x12, 6	; 18
 202:	08 95       	ret

00000204 <HEATER_ON>:
}
void HEATER_ON()
{
	SetBit(heaterPort, heaterPin);
 204:	97 9a       	sbi	0x12, 7	; 18
 206:	08 95       	ret

00000208 <HEATER_OFF>:
}
void HEATER_OFF()
{
	ClearBit(heaterPort, heaterPin);
 208:	97 98       	cbi	0x12, 7	; 18
 20a:	08 95       	ret

0000020c <TCS_Actuator>:
short temp_reading[10] = {};
short current_temp = 0;

void TCS_Actuator()
{
	char settemp = eeprom_read_byte((int *)0x55);
 20c:	85 e5       	ldi	r24, 0x55	; 85
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 9b 03 	call	0x736	; 0x736 <eeprom_read_byte>
	short diff = current_temp - settemp;
 214:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 218:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 21c:	a9 01       	movw	r20, r18
 21e:	48 1b       	sub	r20, r24
 220:	51 09       	sbc	r21, r1
 222:	ca 01       	movw	r24, r20

	if (diff > 5)
 224:	46 30       	cpi	r20, 0x06	; 6
 226:	51 05       	cpc	r21, r1
 228:	2c f0       	brlt	.+10     	; 0x234 <TCS_Actuator+0x28>
	{
		COOLER_ON();
 22a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <COOLER_ON>
		HEATER_OFF();
 22e:	0e 94 04 01 	call	0x208	; 0x208 <HEATER_OFF>
 232:	08 95       	ret
	}
	else if (diff < -5)
 234:	8b 3f       	cpi	r24, 0xFB	; 251
 236:	9f 4f       	sbci	r25, 0xFF	; 255
 238:	2c f4       	brge	.+10     	; 0x244 <TCS_Actuator+0x38>
	{
		HEATER_ON();
 23a:	0e 94 02 01 	call	0x204	; 0x204 <HEATER_ON>
		COOLER_OFF();
 23e:	0e 94 00 01 	call	0x200	; 0x200 <COOLER_OFF>
 242:	08 95       	ret
	}
	else
	{
		HEATER_OFF();
 244:	0e 94 04 01 	call	0x208	; 0x208 <HEATER_OFF>
		COOLER_OFF();
 248:	0e 94 00 01 	call	0x200	; 0x200 <COOLER_OFF>
 24c:	08 95       	ret

0000024e <TCS_Handler>:
	}
}

void TCS_Handler()
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29

	if (temp_reading_counter < 10)
 252:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <temp_reading_counter>
 256:	d0 91 89 00 	lds	r29, 0x0089	; 0x800089 <temp_reading_counter+0x1>
 25a:	ca 30       	cpi	r28, 0x0A	; 10
 25c:	d1 05       	cpc	r29, r1
 25e:	94 f4       	brge	.+36     	; 0x284 <TCS_Handler+0x36>
	{
		temp_reading[temp_reading_counter] = LM35_Read();
 260:	0e 94 b9 00 	call	0x172	; 0x172 <LM35_Read>
 264:	cc 0f       	add	r28, r28
 266:	dd 1f       	adc	r29, r29
 268:	cc 58       	subi	r28, 0x8C	; 140
 26a:	df 4f       	sbci	r29, 0xFF	; 255
 26c:	99 83       	std	Y+1, r25	; 0x01
 26e:	88 83       	st	Y, r24
		temp_reading_counter++;
 270:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <temp_reading_counter>
 274:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <temp_reading_counter+0x1>
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <temp_reading_counter+0x1>
 27e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <temp_reading_counter>
 282:	19 c0       	rjmp	.+50     	; 0x2b6 <TCS_Handler+0x68>
	}
	else
	{
		temp_reading_counter = 0;
 284:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <temp_reading_counter+0x1>
 288:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <temp_reading_counter>
 28c:	14 c0       	rjmp	.+40     	; 0x2b6 <TCS_Handler+0x68>
	}

	for (int i = 0; i < 10; i++)
	{
		current_temp += temp_reading[i];
 28e:	81 91       	ld	r24, Z+
 290:	91 91       	ld	r25, Z+
 292:	28 0f       	add	r18, r24
 294:	39 1f       	adc	r19, r25
 296:	82 2f       	mov	r24, r18
 298:	93 2f       	mov	r25, r19
	else
	{
		temp_reading_counter = 0;
	}

	for (int i = 0; i < 10; i++)
 29a:	e4 17       	cp	r30, r20
 29c:	f5 07       	cpc	r31, r21
 29e:	b9 f7       	brne	.-18     	; 0x28e <TCS_Handler+0x40>
	{
		current_temp += temp_reading[i];
	}
	current_temp /= 10;
 2a0:	6a e0       	ldi	r22, 0x0A	; 10
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__divmodhi4>
 2a8:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <__data_end+0x1>
 2ac:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <__data_end>
	TCS_Actuator();
 2b0:	0e 94 06 01 	call	0x20c	; 0x20c <TCS_Actuator>
}
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <TCS_Handler+0x7a>
 2b6:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 2ba:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 2be:	e4 e7       	ldi	r30, 0x74	; 116
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	48 e8       	ldi	r20, 0x88	; 136
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	e3 cf       	rjmp	.-58     	; 0x28e <TCS_Handler+0x40>
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <__vector_9>:
#include "TCS.h"
#include "Timer.h"
char on = 0; // variable to hold button state (0 or 1)

ISR(TIMER1_OVF_vect) // Timer1 ISR
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25

	if (setting == 1)
 2dc:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <setting>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	59 f4       	brne	.+22     	; 0x2fa <__vector_9+0x2c>
	{
		PORTB = 0xff;
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	88 bb       	out	0x18, r24	; 24

		if (count == 9)
 2e8:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <count>
 2ec:	89 30       	cpi	r24, 0x09	; 9
 2ee:	29 f4       	brne	.+10     	; 0x2fa <__vector_9+0x2c>
		{
			setting = 0;
 2f0:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <setting>
			count = 1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <count>
		}
	}
	TCNT1 = 57723;
 2fa:	8b e7       	ldi	r24, 0x7B	; 123
 2fc:	91 ee       	ldi	r25, 0xE1	; 225
 2fe:	9d bd       	out	0x2d, r25	; 45
 300:	8c bd       	out	0x2c, r24	; 44
	count++;
 302:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <count>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <count>
}
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__vector_11>:

ISR(TIMER0_OVF_vect) // Timer2 ISR
{
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	2f 93       	push	r18
 326:	3f 93       	push	r19
 328:	4f 93       	push	r20
 32a:	5f 93       	push	r21
 32c:	6f 93       	push	r22
 32e:	7f 93       	push	r23
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
 338:	ef 93       	push	r30
 33a:	ff 93       	push	r31
	timer2Count++;
 33c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <timer2Count>
 340:	8f 5f       	subi	r24, 0xFF	; 255
	if (timer2Count==10)
 342:	8a 30       	cpi	r24, 0x0A	; 10
 344:	19 f0       	breq	.+6      	; 0x34c <__vector_11+0x32>
	count++;
}

ISR(TIMER0_OVF_vect) // Timer2 ISR
{
	timer2Count++;
 346:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <timer2Count>
 34a:	04 c0       	rjmp	.+8      	; 0x354 <__vector_11+0x3a>
	if (timer2Count==10)
	{
		timer2Count=0;
 34c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <timer2Count>
		TCS_Handler();
 350:	0e 94 27 01 	call	0x24e	; 0x24e <TCS_Handler>
	}
	
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__vector_1>:

ISR(INT0_vect)
{
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
	on = ~on;
 386:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <on>
 38a:	80 95       	com	r24
 38c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <on>
 390:	2f e7       	ldi	r18, 0x7F	; 127
 392:	88 e3       	ldi	r24, 0x38	; 56
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <__vector_1+0x20>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <__vector_1+0x2a>
 3a0:	00 00       	nop
	_delay_ms(50); /* Software debouncing control delay */
}
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	2f 91       	pop	r18
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <main>:

int main(void)
{

	INIT_eeprom();
 3b2:	0e 94 a1 00 	call	0x142	; 0x142 <INIT_eeprom>
	INIT_buttons();
 3b6:	0e 94 49 00 	call	0x92	; 0x92 <INIT_buttons>
	INIT_SSD();
 3ba:	0e 94 c1 00 	call	0x182	; 0x182 <INIT_SSD>
	INIT_Timer0();
 3be:	0e 94 3f 02 	call	0x47e	; 0x47e <INIT_Timer0>
	INIT_Timer1();
 3c2:	0e 94 46 02 	call	0x48c	; 0x48c <INIT_Timer1>
	INIT_HeaterCooler();
 3c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <INIT_HeaterCooler>
	LM35_Init(ADC_Channel0);
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 a8 00 	call	0x150	; 0x150 <LM35_Init>
		{
			SSD_OFF();
			HEATER_OFF();
			COOLER_OFF();
			setting = 0;
			count = 1;
 3d0:	c1 e0       	ldi	r28, 0x01	; 1
	INIT_HeaterCooler();
	LM35_Init(ADC_Channel0);
	while (1)
	{

		if (on)
 3d2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <on>
 3d6:	88 23       	and	r24, r24
 3d8:	a1 f0       	breq	.+40     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		{
			UpdateSetTemp();
 3da:	0e 94 55 00 	call	0xaa	; 0xaa <UpdateSetTemp>

			if (!setting)
 3de:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <setting>
 3e2:	81 11       	cpse	r24, r1
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <main+0x3e>
			{
				SSD_write(LM35_Read());
 3e6:	0e 94 b9 00 	call	0x172	; 0x172 <LM35_Read>
 3ea:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
 3ee:	f1 cf       	rjmp	.-30     	; 0x3d2 <main+0x20>
			}
			else
			{

				if (count % 2 == 0)
 3f0:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <count>
 3f4:	80 fd       	sbrc	r24, 0
 3f6:	ed cf       	rjmp	.-38     	; 0x3d2 <main+0x20>
				{
					SSD_write(settemp);
 3f8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
 3fc:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
 400:	e8 cf       	rjmp	.-48     	; 0x3d2 <main+0x20>
				}
			}
		}
		else
		{
			SSD_OFF();
 402:	0e 94 c5 00 	call	0x18a	; 0x18a <SSD_OFF>
			HEATER_OFF();
 406:	0e 94 04 01 	call	0x208	; 0x208 <HEATER_OFF>
			COOLER_OFF();
 40a:	0e 94 00 01 	call	0x200	; 0x200 <COOLER_OFF>
			setting = 0;
 40e:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <setting>
			count = 1;
 412:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <count>
 416:	dd cf       	rjmp	.-70     	; 0x3d2 <main+0x20>

00000418 <ADC_Init>:
 418:	dc 01       	movw	r26, r24
 41a:	ee e8       	ldi	r30, 0x8E	; 142
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	8c 91       	ld	r24, X
 420:	80 83       	st	Z, r24
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	8c 91       	ld	r24, X
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	81 83       	std	Z+1, r24	; 0x01
 42a:	12 96       	adiw	r26, 0x02	; 2
 42c:	9c 91       	ld	r25, X
 42e:	12 97       	sbiw	r26, 0x02	; 2
 430:	92 83       	std	Z+2, r25	; 0x02
 432:	13 96       	adiw	r26, 0x03	; 3
 434:	9c 91       	ld	r25, X
 436:	93 83       	std	Z+3, r25	; 0x03
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	11 f4       	brne	.+4      	; 0x440 <ADC_Init+0x28>
 43c:	33 9a       	sbi	0x06, 3	; 6
 43e:	03 c0       	rjmp	.+6      	; 0x446 <ADC_Init+0x2e>
 440:	81 11       	cpse	r24, r1
 442:	01 c0       	rjmp	.+2      	; 0x446 <ADC_Init+0x2e>
 444:	33 98       	cbi	0x06, 3	; 6
 446:	37 9a       	sbi	0x06, 7	; 6
 448:	96 b1       	in	r25, 0x06	; 6
 44a:	ee e8       	ldi	r30, 0x8E	; 142
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	89 2b       	or	r24, r25
 452:	86 b9       	out	0x06, r24	; 6
 454:	27 b1       	in	r18, 0x07	; 7
 456:	92 81       	ldd	r25, Z+2	; 0x02
 458:	30 e4       	ldi	r19, 0x40	; 64
 45a:	93 9f       	mul	r25, r19
 45c:	c0 01       	movw	r24, r0
 45e:	11 24       	eor	r1, r1
 460:	82 2b       	or	r24, r18
 462:	87 b9       	out	0x07, r24	; 7
 464:	97 b1       	in	r25, 0x07	; 7
 466:	83 81       	ldd	r24, Z+3	; 0x03
 468:	89 2b       	or	r24, r25
 46a:	87 b9       	out	0x07, r24	; 7
 46c:	08 95       	ret

0000046e <ADC_Read>:
 46e:	36 9a       	sbi	0x06, 6	; 6
 470:	34 9b       	sbis	0x06, 4	; 6
 472:	fe cf       	rjmp	.-4      	; 0x470 <ADC_Read+0x2>
 474:	84 b1       	in	r24, 0x04	; 4
 476:	25 b1       	in	r18, 0x05	; 5
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	92 2b       	or	r25, r18
 47c:	08 95       	ret

0000047e <INIT_Timer0>:
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	89 bf       	out	0x39, r24	; 57
 482:	82 eb       	ldi	r24, 0xB2	; 178
 484:	82 bf       	out	0x32, r24	; 50
 486:	85 e0       	ldi	r24, 0x05	; 5
 488:	83 bf       	out	0x33, r24	; 51
 48a:	08 95       	ret

0000048c <INIT_Timer1>:
 48c:	1f bc       	out	0x2f, r1	; 47
 48e:	8e b5       	in	r24, 0x2e	; 46
 490:	85 60       	ori	r24, 0x05	; 5
 492:	8e bd       	out	0x2e, r24	; 46
 494:	8b e7       	ldi	r24, 0x7B	; 123
 496:	91 ee       	ldi	r25, 0xE1	; 225
 498:	9d bd       	out	0x2d, r25	; 45
 49a:	8c bd       	out	0x2c, r24	; 44
 49c:	89 b7       	in	r24, 0x39	; 57
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	89 bf       	out	0x39, r24	; 57
 4a2:	08 95       	ret

000004a4 <__divmodhi4>:
 4a4:	97 fb       	bst	r25, 7
 4a6:	07 2e       	mov	r0, r23
 4a8:	16 f4       	brtc	.+4      	; 0x4ae <__divmodhi4+0xa>
 4aa:	00 94       	com	r0
 4ac:	07 d0       	rcall	.+14     	; 0x4bc <__divmodhi4_neg1>
 4ae:	77 fd       	sbrc	r23, 7
 4b0:	09 d0       	rcall	.+18     	; 0x4c4 <__divmodhi4_neg2>
 4b2:	0e 94 66 02 	call	0x4cc	; 0x4cc <__udivmodhi4>
 4b6:	07 fc       	sbrc	r0, 7
 4b8:	05 d0       	rcall	.+10     	; 0x4c4 <__divmodhi4_neg2>
 4ba:	3e f4       	brtc	.+14     	; 0x4ca <__divmodhi4_exit>

000004bc <__divmodhi4_neg1>:
 4bc:	90 95       	com	r25
 4be:	81 95       	neg	r24
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	08 95       	ret

000004c4 <__divmodhi4_neg2>:
 4c4:	70 95       	com	r23
 4c6:	61 95       	neg	r22
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255

000004ca <__divmodhi4_exit>:
 4ca:	08 95       	ret

000004cc <__udivmodhi4>:
 4cc:	aa 1b       	sub	r26, r26
 4ce:	bb 1b       	sub	r27, r27
 4d0:	51 e1       	ldi	r21, 0x11	; 17
 4d2:	07 c0       	rjmp	.+14     	; 0x4e2 <__udivmodhi4_ep>

000004d4 <__udivmodhi4_loop>:
 4d4:	aa 1f       	adc	r26, r26
 4d6:	bb 1f       	adc	r27, r27
 4d8:	a6 17       	cp	r26, r22
 4da:	b7 07       	cpc	r27, r23
 4dc:	10 f0       	brcs	.+4      	; 0x4e2 <__udivmodhi4_ep>
 4de:	a6 1b       	sub	r26, r22
 4e0:	b7 0b       	sbc	r27, r23

000004e2 <__udivmodhi4_ep>:
 4e2:	88 1f       	adc	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	5a 95       	dec	r21
 4e8:	a9 f7       	brne	.-22     	; 0x4d4 <__udivmodhi4_loop>
 4ea:	80 95       	com	r24
 4ec:	90 95       	com	r25
 4ee:	bc 01       	movw	r22, r24
 4f0:	cd 01       	movw	r24, r26
 4f2:	08 95       	ret

000004f4 <malloc>:
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	91 05       	cpc	r25, r1
 500:	10 f4       	brcc	.+4      	; 0x506 <malloc+0x12>
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__flp>
 50a:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__flp+0x1>
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	a0 e0       	ldi	r26, 0x00	; 0
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	30 97       	sbiw	r30, 0x00	; 0
 518:	19 f1       	breq	.+70     	; 0x560 <malloc+0x6c>
 51a:	40 81       	ld	r20, Z
 51c:	51 81       	ldd	r21, Z+1	; 0x01
 51e:	02 81       	ldd	r16, Z+2	; 0x02
 520:	13 81       	ldd	r17, Z+3	; 0x03
 522:	48 17       	cp	r20, r24
 524:	59 07       	cpc	r21, r25
 526:	c8 f0       	brcs	.+50     	; 0x55a <malloc+0x66>
 528:	84 17       	cp	r24, r20
 52a:	95 07       	cpc	r25, r21
 52c:	69 f4       	brne	.+26     	; 0x548 <malloc+0x54>
 52e:	10 97       	sbiw	r26, 0x00	; 0
 530:	31 f0       	breq	.+12     	; 0x53e <malloc+0x4a>
 532:	12 96       	adiw	r26, 0x02	; 2
 534:	0c 93       	st	X, r16
 536:	12 97       	sbiw	r26, 0x02	; 2
 538:	13 96       	adiw	r26, 0x03	; 3
 53a:	1c 93       	st	X, r17
 53c:	27 c0       	rjmp	.+78     	; 0x58c <malloc+0x98>
 53e:	00 93 96 00 	sts	0x0096, r16	; 0x800096 <__flp>
 542:	10 93 97 00 	sts	0x0097, r17	; 0x800097 <__flp+0x1>
 546:	22 c0       	rjmp	.+68     	; 0x58c <malloc+0x98>
 548:	21 15       	cp	r18, r1
 54a:	31 05       	cpc	r19, r1
 54c:	19 f0       	breq	.+6      	; 0x554 <malloc+0x60>
 54e:	42 17       	cp	r20, r18
 550:	53 07       	cpc	r21, r19
 552:	18 f4       	brcc	.+6      	; 0x55a <malloc+0x66>
 554:	9a 01       	movw	r18, r20
 556:	bd 01       	movw	r22, r26
 558:	ef 01       	movw	r28, r30
 55a:	df 01       	movw	r26, r30
 55c:	f8 01       	movw	r30, r16
 55e:	db cf       	rjmp	.-74     	; 0x516 <malloc+0x22>
 560:	21 15       	cp	r18, r1
 562:	31 05       	cpc	r19, r1
 564:	f9 f0       	breq	.+62     	; 0x5a4 <malloc+0xb0>
 566:	28 1b       	sub	r18, r24
 568:	39 0b       	sbc	r19, r25
 56a:	24 30       	cpi	r18, 0x04	; 4
 56c:	31 05       	cpc	r19, r1
 56e:	80 f4       	brcc	.+32     	; 0x590 <malloc+0x9c>
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	9b 81       	ldd	r25, Y+3	; 0x03
 574:	61 15       	cp	r22, r1
 576:	71 05       	cpc	r23, r1
 578:	21 f0       	breq	.+8      	; 0x582 <malloc+0x8e>
 57a:	fb 01       	movw	r30, r22
 57c:	93 83       	std	Z+3, r25	; 0x03
 57e:	82 83       	std	Z+2, r24	; 0x02
 580:	04 c0       	rjmp	.+8      	; 0x58a <malloc+0x96>
 582:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__flp+0x1>
 586:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__flp>
 58a:	fe 01       	movw	r30, r28
 58c:	32 96       	adiw	r30, 0x02	; 2
 58e:	44 c0       	rjmp	.+136    	; 0x618 <malloc+0x124>
 590:	fe 01       	movw	r30, r28
 592:	e2 0f       	add	r30, r18
 594:	f3 1f       	adc	r31, r19
 596:	81 93       	st	Z+, r24
 598:	91 93       	st	Z+, r25
 59a:	22 50       	subi	r18, 0x02	; 2
 59c:	31 09       	sbc	r19, r1
 59e:	39 83       	std	Y+1, r19	; 0x01
 5a0:	28 83       	st	Y, r18
 5a2:	3a c0       	rjmp	.+116    	; 0x618 <malloc+0x124>
 5a4:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <__brkval>
 5a8:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <__brkval+0x1>
 5ac:	23 2b       	or	r18, r19
 5ae:	41 f4       	brne	.+16     	; 0x5c0 <malloc+0xcc>
 5b0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 5b4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 5b8:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <__brkval+0x1>
 5bc:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <__brkval>
 5c0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5c4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5c8:	21 15       	cp	r18, r1
 5ca:	31 05       	cpc	r19, r1
 5cc:	41 f4       	brne	.+16     	; 0x5de <malloc+0xea>
 5ce:	2d b7       	in	r18, 0x3d	; 61
 5d0:	3e b7       	in	r19, 0x3e	; 62
 5d2:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 5d6:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 5da:	24 1b       	sub	r18, r20
 5dc:	35 0b       	sbc	r19, r21
 5de:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__brkval>
 5e2:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__brkval+0x1>
 5e6:	e2 17       	cp	r30, r18
 5e8:	f3 07       	cpc	r31, r19
 5ea:	a0 f4       	brcc	.+40     	; 0x614 <malloc+0x120>
 5ec:	2e 1b       	sub	r18, r30
 5ee:	3f 0b       	sbc	r19, r31
 5f0:	28 17       	cp	r18, r24
 5f2:	39 07       	cpc	r19, r25
 5f4:	78 f0       	brcs	.+30     	; 0x614 <malloc+0x120>
 5f6:	ac 01       	movw	r20, r24
 5f8:	4e 5f       	subi	r20, 0xFE	; 254
 5fa:	5f 4f       	sbci	r21, 0xFF	; 255
 5fc:	24 17       	cp	r18, r20
 5fe:	35 07       	cpc	r19, r21
 600:	48 f0       	brcs	.+18     	; 0x614 <malloc+0x120>
 602:	4e 0f       	add	r20, r30
 604:	5f 1f       	adc	r21, r31
 606:	50 93 95 00 	sts	0x0095, r21	; 0x800095 <__brkval+0x1>
 60a:	40 93 94 00 	sts	0x0094, r20	; 0x800094 <__brkval>
 60e:	81 93       	st	Z+, r24
 610:	91 93       	st	Z+, r25
 612:	02 c0       	rjmp	.+4      	; 0x618 <malloc+0x124>
 614:	e0 e0       	ldi	r30, 0x00	; 0
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	cf 01       	movw	r24, r30
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	1f 91       	pop	r17
 620:	0f 91       	pop	r16
 622:	08 95       	ret

00000624 <free>:
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	00 97       	sbiw	r24, 0x00	; 0
 62a:	09 f4       	brne	.+2      	; 0x62e <free+0xa>
 62c:	81 c0       	rjmp	.+258    	; 0x730 <free+0x10c>
 62e:	fc 01       	movw	r30, r24
 630:	32 97       	sbiw	r30, 0x02	; 2
 632:	13 82       	std	Z+3, r1	; 0x03
 634:	12 82       	std	Z+2, r1	; 0x02
 636:	a0 91 96 00 	lds	r26, 0x0096	; 0x800096 <__flp>
 63a:	b0 91 97 00 	lds	r27, 0x0097	; 0x800097 <__flp+0x1>
 63e:	10 97       	sbiw	r26, 0x00	; 0
 640:	81 f4       	brne	.+32     	; 0x662 <free+0x3e>
 642:	20 81       	ld	r18, Z
 644:	31 81       	ldd	r19, Z+1	; 0x01
 646:	82 0f       	add	r24, r18
 648:	93 1f       	adc	r25, r19
 64a:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <__brkval>
 64e:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <__brkval+0x1>
 652:	28 17       	cp	r18, r24
 654:	39 07       	cpc	r19, r25
 656:	51 f5       	brne	.+84     	; 0x6ac <free+0x88>
 658:	f0 93 95 00 	sts	0x0095, r31	; 0x800095 <__brkval+0x1>
 65c:	e0 93 94 00 	sts	0x0094, r30	; 0x800094 <__brkval>
 660:	67 c0       	rjmp	.+206    	; 0x730 <free+0x10c>
 662:	ed 01       	movw	r28, r26
 664:	20 e0       	ldi	r18, 0x00	; 0
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	ce 17       	cp	r28, r30
 66a:	df 07       	cpc	r29, r31
 66c:	40 f4       	brcc	.+16     	; 0x67e <free+0x5a>
 66e:	4a 81       	ldd	r20, Y+2	; 0x02
 670:	5b 81       	ldd	r21, Y+3	; 0x03
 672:	9e 01       	movw	r18, r28
 674:	41 15       	cp	r20, r1
 676:	51 05       	cpc	r21, r1
 678:	f1 f0       	breq	.+60     	; 0x6b6 <free+0x92>
 67a:	ea 01       	movw	r28, r20
 67c:	f5 cf       	rjmp	.-22     	; 0x668 <free+0x44>
 67e:	d3 83       	std	Z+3, r29	; 0x03
 680:	c2 83       	std	Z+2, r28	; 0x02
 682:	40 81       	ld	r20, Z
 684:	51 81       	ldd	r21, Z+1	; 0x01
 686:	84 0f       	add	r24, r20
 688:	95 1f       	adc	r25, r21
 68a:	c8 17       	cp	r28, r24
 68c:	d9 07       	cpc	r29, r25
 68e:	59 f4       	brne	.+22     	; 0x6a6 <free+0x82>
 690:	88 81       	ld	r24, Y
 692:	99 81       	ldd	r25, Y+1	; 0x01
 694:	84 0f       	add	r24, r20
 696:	95 1f       	adc	r25, r21
 698:	02 96       	adiw	r24, 0x02	; 2
 69a:	91 83       	std	Z+1, r25	; 0x01
 69c:	80 83       	st	Z, r24
 69e:	8a 81       	ldd	r24, Y+2	; 0x02
 6a0:	9b 81       	ldd	r25, Y+3	; 0x03
 6a2:	93 83       	std	Z+3, r25	; 0x03
 6a4:	82 83       	std	Z+2, r24	; 0x02
 6a6:	21 15       	cp	r18, r1
 6a8:	31 05       	cpc	r19, r1
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <free+0x92>
 6ac:	f0 93 97 00 	sts	0x0097, r31	; 0x800097 <__flp+0x1>
 6b0:	e0 93 96 00 	sts	0x0096, r30	; 0x800096 <__flp>
 6b4:	3d c0       	rjmp	.+122    	; 0x730 <free+0x10c>
 6b6:	e9 01       	movw	r28, r18
 6b8:	fb 83       	std	Y+3, r31	; 0x03
 6ba:	ea 83       	std	Y+2, r30	; 0x02
 6bc:	49 91       	ld	r20, Y+
 6be:	59 91       	ld	r21, Y+
 6c0:	c4 0f       	add	r28, r20
 6c2:	d5 1f       	adc	r29, r21
 6c4:	ec 17       	cp	r30, r28
 6c6:	fd 07       	cpc	r31, r29
 6c8:	61 f4       	brne	.+24     	; 0x6e2 <free+0xbe>
 6ca:	80 81       	ld	r24, Z
 6cc:	91 81       	ldd	r25, Z+1	; 0x01
 6ce:	84 0f       	add	r24, r20
 6d0:	95 1f       	adc	r25, r21
 6d2:	02 96       	adiw	r24, 0x02	; 2
 6d4:	e9 01       	movw	r28, r18
 6d6:	99 83       	std	Y+1, r25	; 0x01
 6d8:	88 83       	st	Y, r24
 6da:	82 81       	ldd	r24, Z+2	; 0x02
 6dc:	93 81       	ldd	r25, Z+3	; 0x03
 6de:	9b 83       	std	Y+3, r25	; 0x03
 6e0:	8a 83       	std	Y+2, r24	; 0x02
 6e2:	e0 e0       	ldi	r30, 0x00	; 0
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	12 96       	adiw	r26, 0x02	; 2
 6e8:	8d 91       	ld	r24, X+
 6ea:	9c 91       	ld	r25, X
 6ec:	13 97       	sbiw	r26, 0x03	; 3
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	19 f0       	breq	.+6      	; 0x6f8 <free+0xd4>
 6f2:	fd 01       	movw	r30, r26
 6f4:	dc 01       	movw	r26, r24
 6f6:	f7 cf       	rjmp	.-18     	; 0x6e6 <free+0xc2>
 6f8:	8d 91       	ld	r24, X+
 6fa:	9c 91       	ld	r25, X
 6fc:	11 97       	sbiw	r26, 0x01	; 1
 6fe:	9d 01       	movw	r18, r26
 700:	2e 5f       	subi	r18, 0xFE	; 254
 702:	3f 4f       	sbci	r19, 0xFF	; 255
 704:	82 0f       	add	r24, r18
 706:	93 1f       	adc	r25, r19
 708:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <__brkval>
 70c:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <__brkval+0x1>
 710:	28 17       	cp	r18, r24
 712:	39 07       	cpc	r19, r25
 714:	69 f4       	brne	.+26     	; 0x730 <free+0x10c>
 716:	30 97       	sbiw	r30, 0x00	; 0
 718:	29 f4       	brne	.+10     	; 0x724 <free+0x100>
 71a:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__flp+0x1>
 71e:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__flp>
 722:	02 c0       	rjmp	.+4      	; 0x728 <free+0x104>
 724:	13 82       	std	Z+3, r1	; 0x03
 726:	12 82       	std	Z+2, r1	; 0x02
 728:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__brkval+0x1>
 72c:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__brkval>
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <eeprom_read_byte>:
 736:	e1 99       	sbic	0x1c, 1	; 28
 738:	fe cf       	rjmp	.-4      	; 0x736 <eeprom_read_byte>
 73a:	9f bb       	out	0x1f, r25	; 31
 73c:	8e bb       	out	0x1e, r24	; 30
 73e:	e0 9a       	sbi	0x1c, 0	; 28
 740:	99 27       	eor	r25, r25
 742:	8d b3       	in	r24, 0x1d	; 29
 744:	08 95       	ret

00000746 <eeprom_write_byte>:
 746:	26 2f       	mov	r18, r22

00000748 <eeprom_write_r18>:
 748:	e1 99       	sbic	0x1c, 1	; 28
 74a:	fe cf       	rjmp	.-4      	; 0x748 <eeprom_write_r18>
 74c:	9f bb       	out	0x1f, r25	; 31
 74e:	8e bb       	out	0x1e, r24	; 30
 750:	2d bb       	out	0x1d, r18	; 29
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	e2 9a       	sbi	0x1c, 2	; 28
 758:	e1 9a       	sbi	0x1c, 1	; 28
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	08 95       	ret

00000760 <_exit>:
 760:	f8 94       	cli

00000762 <__stop_program>:
 762:	ff cf       	rjmp	.-2      	; 0x762 <__stop_program>
