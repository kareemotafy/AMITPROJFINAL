
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000604  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800072  00800072  000006aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000718  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001344  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b99  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d2c  00000000  00000000  0000279d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000034cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000683  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036f  00000000  00000000  00003db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004126  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  8a:	0c 94 00 03 	jmp	0x600	; 0x600 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INIT_buttons>:



void INIT_buttons()
{
		SetBit(OnOffPort,OnOffPin);  
  92:	92 9a       	sbi	0x12, 2	; 18
		ClearBit(OnOffDDR,OnOffPin);
  94:	8a 98       	cbi	0x11, 2	; 17
		SetBit(upPort,upPin); 
  96:	90 9a       	sbi	0x12, 0	; 18
		ClearBit(upDDR,upPin);
  98:	88 98       	cbi	0x11, 0	; 17
		SetBit(downPort,downPin);  
  9a:	91 9a       	sbi	0x12, 1	; 18
		ClearBit(downDDR,downPin);
  9c:	89 98       	cbi	0x11, 1	; 17
		GICR = 1<<INT0;		/* Enable INT0*/
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	8b bf       	out	0x3b, r24	; 59
		MCUCR = 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	85 bf       	out	0x35, r24	; 53
		sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <UpdateSetTemp>:
}

void UpdateSetTemp()
{
	
	if ((!GetBit(PIND,0))||(!GetBit(PIND,1)))
  aa:	80 9b       	sbis	0x10, 0	; 16
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <UpdateSetTemp+0x8>
  ae:	81 99       	sbic	0x10, 1	; 16
  b0:	47 c0       	rjmp	.+142    	; 0x140 <UpdateSetTemp+0x96>
	{
		if ((setting==1)&&(!GetBit(PIND,0))&&(count>0))
  b2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <setting>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	71 f5       	brne	.+92     	; 0x116 <UpdateSetTemp+0x6c>
  ba:	80 99       	sbic	0x10, 0	; 16
  bc:	17 c0       	rjmp	.+46     	; 0xec <UpdateSetTemp+0x42>
  be:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <count>
  c2:	88 23       	and	r24, r24
  c4:	99 f0       	breq	.+38     	; 0xec <UpdateSetTemp+0x42>
		{
			if (!(settemp>=maxTemp))
  c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  ca:	8b 34       	cpi	r24, 0x4B	; 75
  cc:	18 f4       	brcc	.+6      	; 0xd4 <UpdateSetTemp+0x2a>
			{
				settemp+=5;
  ce:	8b 5f       	subi	r24, 0xFB	; 251
  d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
			}
			while (!GetBit(PIND,0))
  d4:	80 99       	sbic	0x10, 0	; 16
  d6:	0a c0       	rjmp	.+20     	; 0xec <UpdateSetTemp+0x42>
			{
				SSD_write(settemp);
  d8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  dc:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
		{
			if (!(settemp>=maxTemp))
			{
				settemp+=5;
			}
			while (!GetBit(PIND,0))
  e0:	80 9b       	sbis	0x10, 0	; 16
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <UpdateSetTemp+0x2e>
				SSD_write(settemp);
			}
			
			
		}
		if ((setting==1)&&(!GetBit(PIND,1))&&(settemp>miniTemp)&&(count>0))
  e4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <setting>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	a9 f4       	brne	.+42     	; 0x116 <UpdateSetTemp+0x6c>
  ec:	81 99       	sbic	0x10, 1	; 16
  ee:	13 c0       	rjmp	.+38     	; 0x116 <UpdateSetTemp+0x6c>
  f0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  f4:	84 32       	cpi	r24, 0x24	; 36
  f6:	78 f0       	brcs	.+30     	; 0x116 <UpdateSetTemp+0x6c>
  f8:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <count>
  fc:	99 23       	and	r25, r25
  fe:	59 f0       	breq	.+22     	; 0x116 <UpdateSetTemp+0x6c>
		{
			if (!(settemp<=miniTemp))
			{
				settemp-=5;
 100:	85 50       	subi	r24, 0x05	; 5
 102:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
			}
			while (!GetBit(PIND,1))
 106:	81 99       	sbic	0x10, 1	; 16
 108:	06 c0       	rjmp	.+12     	; 0x116 <UpdateSetTemp+0x6c>
			{
				SSD_write(settemp);
 10a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
 10e:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
		{
			if (!(settemp<=miniTemp))
			{
				settemp-=5;
			}
			while (!GetBit(PIND,1))
 112:	81 9b       	sbis	0x10, 1	; 16
 114:	fa cf       	rjmp	.-12     	; 0x10a <UpdateSetTemp+0x60>
			{
				SSD_write(settemp);
			}
		}
		eeprom_write_byte((int*) 0x55,settemp);
 116:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <settemp>
 11a:	85 e5       	ldi	r24, 0x55	; 85
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <eeprom_write_byte>
		setting=1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <setting>
		count=0;
 128:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <count>
		settemp=eeprom_read_byte((int*)0x55);
 12c:	85 e5       	ldi	r24, 0x55	; 85
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <eeprom_read_byte>
 134:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
		TCNT1 = 57723; 
 138:	8b e7       	ldi	r24, 0x7B	; 123
 13a:	91 ee       	ldi	r25, 0xE1	; 225
 13c:	9d bd       	out	0x2d, r25	; 45
 13e:	8c bd       	out	0x2c, r24	; 44
 140:	08 95       	ret

00000142 <INIT_eeprom>:
#include "EEPROM.h"
extern char settemp;
void INIT_eeprom()
{

		eeprom_write_byte ((int*)0x55,settemp);
 142:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <settemp>
 146:	85 e5       	ldi	r24, 0x55	; 85
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <eeprom_write_byte>
 14e:	08 95       	ret

00000150 <LM35_Init>:
 * Created: 1/5/2023 11:09:05 PM
 *  Author: Kareem
 */
#include "LM35.h"
void LM35_Init(ADC_Channel Channel_confg)
{
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
	ADC_ConfigStruct *ptr = (ADC_ConfigStruct *)(malloc(sizeof(ADC_ConfigStruct)));
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 ca 01 	call	0x394	; 0x394 <malloc>
	;
	ptr->PSC = PSC_64;
 15c:	26 e0       	ldi	r18, 0x06	; 6
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
	ptr->RMode = Polling;
 162:	11 82       	std	Z+1, r1	; 0x01
	ptr->VRef = VInternal;
 164:	23 e0       	ldi	r18, 0x03	; 3
 166:	22 83       	std	Z+2, r18	; 0x02
	ptr->Channel = Channel_confg;
 168:	c3 83       	std	Z+3, r28	; 0x03
	ADC_Init(ptr);
 16a:	0e 94 8b 01 	call	0x316	; 0x316 <ADC_Init>
}
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <LM35_Read>:

unsigned short int LM35_Read(void)
{
	unsigned short int temp;

	temp = ADC_Read(ADC_Channel0) / 4;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 b6 01 	call	0x36c	; 0x36c <ADC_Read>

	return temp;
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	08 95       	ret

00000182 <INIT_SSD>:
char units;
char tens;

	void INIT_SSD()
	{
		DDRB=0xff;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	87 bb       	out	0x17, r24	; 23
		PORTB=0;
 186:	18 ba       	out	0x18, r1	; 24
 188:	08 95       	ret

0000018a <SSD_OFF>:
	}
	
	void SSD_OFF()
	{
		SSD_port=0x7f;
 18a:	8f e7       	ldi	r24, 0x7F	; 127
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	08 95       	ret

00000190 <SSD_write>:
	
	
	
	void SSD_write(char num)
	{
			units=num%10;
 190:	9d ec       	ldi	r25, 0xCD	; 205
 192:	89 9f       	mul	r24, r25
 194:	91 2d       	mov	r25, r1
 196:	11 24       	eor	r1, r1
 198:	e9 2f       	mov	r30, r25
 19a:	e6 95       	lsr	r30
 19c:	e6 95       	lsr	r30
 19e:	e6 95       	lsr	r30
 1a0:	ee 0f       	add	r30, r30
 1a2:	2e 2f       	mov	r18, r30
 1a4:	22 0f       	add	r18, r18
 1a6:	22 0f       	add	r18, r18
 1a8:	e2 0f       	add	r30, r18
 1aa:	8e 1b       	sub	r24, r30
 1ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <units>
			tens=num/10;
 1b0:	96 95       	lsr	r25
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <tens>
			
			SSD_port=number[units];
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ea 59       	subi	r30, 0x9A	; 154
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	80 81       	ld	r24, Z
 1c4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	8f e1       	ldi	r24, 0x1F	; 31
 1c8:	9e e4       	ldi	r25, 0x4E	; 78
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <SSD_write+0x3a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <SSD_write+0x40>
 1d0:	00 00       	nop
			_delay_ms(MultiplexDelay);
			ClearBit(Display1Port,Display1Pin);
 1d2:	d9 98       	cbi	0x1b, 1	; 27
			SetBit(Display2Port,Display2Pin);
 1d4:	da 9a       	sbi	0x1b, 2	; 27
			
			
			SSD_port=number[tens];
 1d6:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <tens>
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ea 59       	subi	r30, 0x9A	; 154
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	80 81       	ld	r24, Z
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	8f e1       	ldi	r24, 0x1F	; 31
 1e6:	9e e4       	ldi	r25, 0x4E	; 78
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <SSD_write+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <SSD_write+0x5e>
 1ee:	00 00       	nop
			_delay_ms(MultiplexDelay);	
			SetBit(Display1Port,Display1Pin);
 1f0:	d9 9a       	sbi	0x1b, 1	; 27
			ClearBit(Display2Port,Display2Pin);	
 1f2:	da 98       	cbi	0x1b, 2	; 27
 1f4:	08 95       	ret

000001f6 <INIT_HeaterCooler>:
{
	ClearBit(coolerPort, coolerPin);
}
void HEATER_ON()
{
	SetBit(heaterPort, heaterPin);
 1f6:	8f 9a       	sbi	0x11, 7	; 17
 1f8:	8e 9a       	sbi	0x11, 6	; 17
 1fa:	08 95       	ret

000001fc <COOLER_OFF>:
 1fc:	96 98       	cbi	0x12, 6	; 18
 1fe:	08 95       	ret

00000200 <HEATER_OFF>:
}
void HEATER_OFF()
{
	ClearBit(heaterPort, heaterPin);
 200:	97 98       	cbi	0x12, 7	; 18
 202:	08 95       	ret

00000204 <__vector_9>:
#include "TCS.h"
#include "Timer.h"
char on = 0;  // variable to hold button state (0 or 1)

ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	
	if (setting==1)
 226:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <setting>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	59 f4       	brne	.+22     	; 0x244 <__vector_9+0x40>
	{
		SSD_OFF();
 22e:	0e 94 c5 00 	call	0x18a	; 0x18a <SSD_OFF>
		
		if (count==9)
 232:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <count>
 236:	89 30       	cpi	r24, 0x09	; 9
 238:	29 f4       	brne	.+10     	; 0x244 <__vector_9+0x40>
		{
			setting=0;
 23a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <setting>
			count=1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <count>
		}
		
	}
	TCNT1 = 57723;   
 244:	8b e7       	ldi	r24, 0x7B	; 123
 246:	91 ee       	ldi	r25, 0xE1	; 225
 248:	9d bd       	out	0x2d, r25	; 45
 24a:	8c bd       	out	0x2c, r24	; 44
	count++;
 24c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <count>
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <count>
	
	
}
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_1>:



ISR(INT0_vect)
{
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
	on=~on;		
 288:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 28c:	80 95       	com	r24
 28e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 292:	2f e7       	ldi	r18, 0x7F	; 127
 294:	88 e3       	ldi	r24, 0x38	; 56
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <__vector_1+0x20>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <__vector_1+0x2a>
 2a2:	00 00       	nop
	_delay_ms(50);  	/* Software debouncing control delay */
	
}
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <main>:

int main(void) {
	
	
	
	INIT_eeprom();
 2b4:	0e 94 a1 00 	call	0x142	; 0x142 <INIT_eeprom>
	INIT_buttons();
 2b8:	0e 94 49 00 	call	0x92	; 0x92 <INIT_buttons>
	INIT_SSD();
 2bc:	0e 94 c1 00 	call	0x182	; 0x182 <INIT_SSD>
	INIT_Timer1();
 2c0:	0e 94 be 01 	call	0x37c	; 0x37c <INIT_Timer1>
	INIT_HeaterCooler();
 2c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <INIT_HeaterCooler>
	LM35_Init(ADC_Channel0);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 a8 00 	call	0x150	; 0x150 <LM35_Init>
		{
			SSD_OFF();
			HEATER_OFF();
			COOLER_OFF();
			setting=0;
			count=1;
 2ce:	c1 e0       	ldi	r28, 0x01	; 1
	INIT_HeaterCooler();
	LM35_Init(ADC_Channel0);
	while (1)
	 {	
		
		if (on)
 2d0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 2d4:	88 23       	and	r24, r24
 2d6:	a1 f0       	breq	.+40     	; 0x300 <main+0x4c>
		{
			UpdateSetTemp();
 2d8:	0e 94 55 00 	call	0xaa	; 0xaa <UpdateSetTemp>
			
			if(!setting)
 2dc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <setting>
 2e0:	81 11       	cpse	r24, r1
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <main+0x3a>
			{
				SSD_write(LM35_Read());
 2e4:	0e 94 b9 00 	call	0x172	; 0x172 <LM35_Read>
 2e8:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
 2ec:	f1 cf       	rjmp	.-30     	; 0x2d0 <main+0x1c>
			}
			else
			{
				
				if (count%2==0)
 2ee:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <count>
 2f2:	80 fd       	sbrc	r24, 0
 2f4:	ed cf       	rjmp	.-38     	; 0x2d0 <main+0x1c>
					{SSD_write(settemp);}
 2f6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
 2fa:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_write>
 2fe:	e8 cf       	rjmp	.-48     	; 0x2d0 <main+0x1c>
			
			
		}
		else
		{
			SSD_OFF();
 300:	0e 94 c5 00 	call	0x18a	; 0x18a <SSD_OFF>
			HEATER_OFF();
 304:	0e 94 00 01 	call	0x200	; 0x200 <HEATER_OFF>
			COOLER_OFF();
 308:	0e 94 fe 00 	call	0x1fc	; 0x1fc <COOLER_OFF>
			setting=0;
 30c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <setting>
			count=1;
 310:	c0 93 73 00 	sts	0x0073, r28	; 0x800073 <count>
 314:	dd cf       	rjmp	.-70     	; 0x2d0 <main+0x1c>

00000316 <ADC_Init>:
#include "ADC.h"

static ADC_ConfigStruct ADC_InitStruct;


void ADC_Init(ADC_ConfigStruct* ptr){
 316:	dc 01       	movw	r26, r24
	ADC_InitStruct.PSC = ptr->PSC;
 318:	e5 e7       	ldi	r30, 0x75	; 117
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	8c 91       	ld	r24, X
 31e:	80 83       	st	Z, r24
	ADC_InitStruct.RMode = ptr->RMode;
 320:	11 96       	adiw	r26, 0x01	; 1
 322:	8c 91       	ld	r24, X
 324:	11 97       	sbiw	r26, 0x01	; 1
 326:	81 83       	std	Z+1, r24	; 0x01
	ADC_InitStruct.VRef = ptr->VRef;
 328:	12 96       	adiw	r26, 0x02	; 2
 32a:	9c 91       	ld	r25, X
 32c:	12 97       	sbiw	r26, 0x02	; 2
 32e:	92 83       	std	Z+2, r25	; 0x02
	ADC_InitStruct.Channel = ptr->Channel;
 330:	13 96       	adiw	r26, 0x03	; 3
 332:	9c 91       	ld	r25, X
 334:	93 83       	std	Z+3, r25	; 0x03
	if(ADC_InitStruct.RMode == Interrupt){
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	11 f4       	brne	.+4      	; 0x33e <ADC_Init+0x28>
		SetBit(ADCSRA_REG,ADIE_BIT);
 33a:	33 9a       	sbi	0x06, 3	; 6
 33c:	03 c0       	rjmp	.+6      	; 0x344 <ADC_Init+0x2e>
		}else if(ADC_InitStruct.RMode == Polling){
 33e:	81 11       	cpse	r24, r1
 340:	01 c0       	rjmp	.+2      	; 0x344 <ADC_Init+0x2e>
		ClearBit(ADCSRA_REG,ADIE_BIT);
 342:	33 98       	cbi	0x06, 3	; 6
	}
	// Enabling the ADC
	SetBit(ADCSRA_REG,ADEN_BIT);
 344:	37 9a       	sbi	0x06, 7	; 6
	// Setting System Clock pre-scalar
	ADCSRA_REG |= ADC_InitStruct.PSC;
 346:	96 b1       	in	r25, 0x06	; 6
 348:	e5 e7       	ldi	r30, 0x75	; 117
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	89 2b       	or	r24, r25
 350:	86 b9       	out	0x06, r24	; 6
	// Setting Vref
	//ADMUX_REG &= 0x3F;
	ADMUX_REG |= (ADC_InitStruct.VRef<<6);
 352:	27 b1       	in	r18, 0x07	; 7
 354:	92 81       	ldd	r25, Z+2	; 0x02
 356:	30 e4       	ldi	r19, 0x40	; 64
 358:	93 9f       	mul	r25, r19
 35a:	c0 01       	movw	r24, r0
 35c:	11 24       	eor	r1, r1
 35e:	82 2b       	or	r24, r18
 360:	87 b9       	out	0x07, r24	; 7
	// Setting the ADC channel to be used
	ADMUX_REG |= (ADC_InitStruct.Channel);
 362:	97 b1       	in	r25, 0x07	; 7
 364:	83 81       	ldd	r24, Z+3	; 0x03
 366:	89 2b       	or	r24, r25
 368:	87 b9       	out	0x07, r24	; 7
 36a:	08 95       	ret

0000036c <ADC_Read>:
}

unsigned short int ADC_Read(ADC_Channel channel){
	unsigned short Read=0;
	SetBit(ADCSRA_REG,ADSC_BIT);
 36c:	36 9a       	sbi	0x06, 6	; 6
	while(GetBit(ADCSRA_REG,ADIF_BIT)==0){
 36e:	34 9b       	sbis	0x06, 4	; 6
 370:	fe cf       	rjmp	.-4      	; 0x36e <ADC_Read+0x2>
	}
	Read = ADCL_REG;
 372:	84 b1       	in	r24, 0x04	; 4
	Read |= ADCH_REG<<8;
 374:	25 b1       	in	r18, 0x05	; 5
	return Read;
 376:	90 e0       	ldi	r25, 0x00	; 0
}
 378:	92 2b       	or	r25, r18
 37a:	08 95       	ret

0000037c <INIT_Timer1>:
	TIMSK |= (1 << TOIE0);
}

void INIT_Timer1()
{
	TCCR1A = 0x00;
 37c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS12)|(1 << CS10);
 37e:	8e b5       	in	r24, 0x2e	; 46
 380:	85 60       	ori	r24, 0x05	; 5
 382:	8e bd       	out	0x2e, r24	; 46
	
	TCNT1 = 57723;
 384:	8b e7       	ldi	r24, 0x7B	; 123
 386:	91 ee       	ldi	r25, 0xE1	; 225
 388:	9d bd       	out	0x2d, r25	; 45
 38a:	8c bd       	out	0x2c, r24	; 44
	
	TIMSK |= (1 << TOIE1);
 38c:	89 b7       	in	r24, 0x39	; 57
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	89 bf       	out	0x39, r24	; 57
 392:	08 95       	ret

00000394 <malloc>:
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	91 05       	cpc	r25, r1
 3a0:	10 f4       	brcc	.+4      	; 0x3a6 <malloc+0x12>
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <__flp>
 3aa:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <__flp+0x1>
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	a0 e0       	ldi	r26, 0x00	; 0
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	30 97       	sbiw	r30, 0x00	; 0
 3b8:	19 f1       	breq	.+70     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ba:	40 81       	ld	r20, Z
 3bc:	51 81       	ldd	r21, Z+1	; 0x01
 3be:	02 81       	ldd	r16, Z+2	; 0x02
 3c0:	13 81       	ldd	r17, Z+3	; 0x03
 3c2:	48 17       	cp	r20, r24
 3c4:	59 07       	cpc	r21, r25
 3c6:	c8 f0       	brcs	.+50     	; 0x3fa <malloc+0x66>
 3c8:	84 17       	cp	r24, r20
 3ca:	95 07       	cpc	r25, r21
 3cc:	69 f4       	brne	.+26     	; 0x3e8 <malloc+0x54>
 3ce:	10 97       	sbiw	r26, 0x00	; 0
 3d0:	31 f0       	breq	.+12     	; 0x3de <malloc+0x4a>
 3d2:	12 96       	adiw	r26, 0x02	; 2
 3d4:	0c 93       	st	X, r16
 3d6:	12 97       	sbiw	r26, 0x02	; 2
 3d8:	13 96       	adiw	r26, 0x03	; 3
 3da:	1c 93       	st	X, r17
 3dc:	27 c0       	rjmp	.+78     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3de:	00 93 7d 00 	sts	0x007D, r16	; 0x80007d <__flp>
 3e2:	10 93 7e 00 	sts	0x007E, r17	; 0x80007e <__flp+0x1>
 3e6:	22 c0       	rjmp	.+68     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3e8:	21 15       	cp	r18, r1
 3ea:	31 05       	cpc	r19, r1
 3ec:	19 f0       	breq	.+6      	; 0x3f4 <malloc+0x60>
 3ee:	42 17       	cp	r20, r18
 3f0:	53 07       	cpc	r21, r19
 3f2:	18 f4       	brcc	.+6      	; 0x3fa <malloc+0x66>
 3f4:	9a 01       	movw	r18, r20
 3f6:	bd 01       	movw	r22, r26
 3f8:	ef 01       	movw	r28, r30
 3fa:	df 01       	movw	r26, r30
 3fc:	f8 01       	movw	r30, r16
 3fe:	db cf       	rjmp	.-74     	; 0x3b6 <malloc+0x22>
 400:	21 15       	cp	r18, r1
 402:	31 05       	cpc	r19, r1
 404:	f9 f0       	breq	.+62     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 406:	28 1b       	sub	r18, r24
 408:	39 0b       	sbc	r19, r25
 40a:	24 30       	cpi	r18, 0x04	; 4
 40c:	31 05       	cpc	r19, r1
 40e:	80 f4       	brcc	.+32     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	9b 81       	ldd	r25, Y+3	; 0x03
 414:	61 15       	cp	r22, r1
 416:	71 05       	cpc	r23, r1
 418:	21 f0       	breq	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41a:	fb 01       	movw	r30, r22
 41c:	93 83       	std	Z+3, r25	; 0x03
 41e:	82 83       	std	Z+2, r24	; 0x02
 420:	04 c0       	rjmp	.+8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 422:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__flp+0x1>
 426:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__flp>
 42a:	fe 01       	movw	r30, r28
 42c:	32 96       	adiw	r30, 0x02	; 2
 42e:	44 c0       	rjmp	.+136    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 430:	fe 01       	movw	r30, r28
 432:	e2 0f       	add	r30, r18
 434:	f3 1f       	adc	r31, r19
 436:	81 93       	st	Z+, r24
 438:	91 93       	st	Z+, r25
 43a:	22 50       	subi	r18, 0x02	; 2
 43c:	31 09       	sbc	r19, r1
 43e:	39 83       	std	Y+1, r19	; 0x01
 440:	28 83       	st	Y, r18
 442:	3a c0       	rjmp	.+116    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 444:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__brkval>
 448:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <__brkval+0x1>
 44c:	23 2b       	or	r18, r19
 44e:	41 f4       	brne	.+16     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 450:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 454:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 458:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <__brkval+0x1>
 45c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__brkval>
 460:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 464:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 468:	21 15       	cp	r18, r1
 46a:	31 05       	cpc	r19, r1
 46c:	41 f4       	brne	.+16     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 46e:	2d b7       	in	r18, 0x3d	; 61
 470:	3e b7       	in	r19, 0x3e	; 62
 472:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 476:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 47a:	24 1b       	sub	r18, r20
 47c:	35 0b       	sbc	r19, r21
 47e:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <__brkval>
 482:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <__brkval+0x1>
 486:	e2 17       	cp	r30, r18
 488:	f3 07       	cpc	r31, r19
 48a:	a0 f4       	brcc	.+40     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 48c:	2e 1b       	sub	r18, r30
 48e:	3f 0b       	sbc	r19, r31
 490:	28 17       	cp	r18, r24
 492:	39 07       	cpc	r19, r25
 494:	78 f0       	brcs	.+30     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 496:	ac 01       	movw	r20, r24
 498:	4e 5f       	subi	r20, 0xFE	; 254
 49a:	5f 4f       	sbci	r21, 0xFF	; 255
 49c:	24 17       	cp	r18, r20
 49e:	35 07       	cpc	r19, r21
 4a0:	48 f0       	brcs	.+18     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4a2:	4e 0f       	add	r20, r30
 4a4:	5f 1f       	adc	r21, r31
 4a6:	50 93 7c 00 	sts	0x007C, r21	; 0x80007c <__brkval+0x1>
 4aa:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__brkval>
 4ae:	81 93       	st	Z+, r24
 4b0:	91 93       	st	Z+, r25
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b4:	e0 e0       	ldi	r30, 0x00	; 0
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	cf 01       	movw	r24, r30
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	08 95       	ret

000004c4 <free>:
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	09 f4       	brne	.+2      	; 0x4ce <free+0xa>
 4cc:	81 c0       	rjmp	.+258    	; 0x5d0 <free+0x10c>
 4ce:	fc 01       	movw	r30, r24
 4d0:	32 97       	sbiw	r30, 0x02	; 2
 4d2:	13 82       	std	Z+3, r1	; 0x03
 4d4:	12 82       	std	Z+2, r1	; 0x02
 4d6:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <__flp>
 4da:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <__flp+0x1>
 4de:	10 97       	sbiw	r26, 0x00	; 0
 4e0:	81 f4       	brne	.+32     	; 0x502 <free+0x3e>
 4e2:	20 81       	ld	r18, Z
 4e4:	31 81       	ldd	r19, Z+1	; 0x01
 4e6:	82 0f       	add	r24, r18
 4e8:	93 1f       	adc	r25, r19
 4ea:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__brkval>
 4ee:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <__brkval+0x1>
 4f2:	28 17       	cp	r18, r24
 4f4:	39 07       	cpc	r19, r25
 4f6:	51 f5       	brne	.+84     	; 0x54c <free+0x88>
 4f8:	f0 93 7c 00 	sts	0x007C, r31	; 0x80007c <__brkval+0x1>
 4fc:	e0 93 7b 00 	sts	0x007B, r30	; 0x80007b <__brkval>
 500:	67 c0       	rjmp	.+206    	; 0x5d0 <free+0x10c>
 502:	ed 01       	movw	r28, r26
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	ce 17       	cp	r28, r30
 50a:	df 07       	cpc	r29, r31
 50c:	40 f4       	brcc	.+16     	; 0x51e <free+0x5a>
 50e:	4a 81       	ldd	r20, Y+2	; 0x02
 510:	5b 81       	ldd	r21, Y+3	; 0x03
 512:	9e 01       	movw	r18, r28
 514:	41 15       	cp	r20, r1
 516:	51 05       	cpc	r21, r1
 518:	f1 f0       	breq	.+60     	; 0x556 <free+0x92>
 51a:	ea 01       	movw	r28, r20
 51c:	f5 cf       	rjmp	.-22     	; 0x508 <free+0x44>
 51e:	d3 83       	std	Z+3, r29	; 0x03
 520:	c2 83       	std	Z+2, r28	; 0x02
 522:	40 81       	ld	r20, Z
 524:	51 81       	ldd	r21, Z+1	; 0x01
 526:	84 0f       	add	r24, r20
 528:	95 1f       	adc	r25, r21
 52a:	c8 17       	cp	r28, r24
 52c:	d9 07       	cpc	r29, r25
 52e:	59 f4       	brne	.+22     	; 0x546 <free+0x82>
 530:	88 81       	ld	r24, Y
 532:	99 81       	ldd	r25, Y+1	; 0x01
 534:	84 0f       	add	r24, r20
 536:	95 1f       	adc	r25, r21
 538:	02 96       	adiw	r24, 0x02	; 2
 53a:	91 83       	std	Z+1, r25	; 0x01
 53c:	80 83       	st	Z, r24
 53e:	8a 81       	ldd	r24, Y+2	; 0x02
 540:	9b 81       	ldd	r25, Y+3	; 0x03
 542:	93 83       	std	Z+3, r25	; 0x03
 544:	82 83       	std	Z+2, r24	; 0x02
 546:	21 15       	cp	r18, r1
 548:	31 05       	cpc	r19, r1
 54a:	29 f4       	brne	.+10     	; 0x556 <free+0x92>
 54c:	f0 93 7e 00 	sts	0x007E, r31	; 0x80007e <__flp+0x1>
 550:	e0 93 7d 00 	sts	0x007D, r30	; 0x80007d <__flp>
 554:	3d c0       	rjmp	.+122    	; 0x5d0 <free+0x10c>
 556:	e9 01       	movw	r28, r18
 558:	fb 83       	std	Y+3, r31	; 0x03
 55a:	ea 83       	std	Y+2, r30	; 0x02
 55c:	49 91       	ld	r20, Y+
 55e:	59 91       	ld	r21, Y+
 560:	c4 0f       	add	r28, r20
 562:	d5 1f       	adc	r29, r21
 564:	ec 17       	cp	r30, r28
 566:	fd 07       	cpc	r31, r29
 568:	61 f4       	brne	.+24     	; 0x582 <free+0xbe>
 56a:	80 81       	ld	r24, Z
 56c:	91 81       	ldd	r25, Z+1	; 0x01
 56e:	84 0f       	add	r24, r20
 570:	95 1f       	adc	r25, r21
 572:	02 96       	adiw	r24, 0x02	; 2
 574:	e9 01       	movw	r28, r18
 576:	99 83       	std	Y+1, r25	; 0x01
 578:	88 83       	st	Y, r24
 57a:	82 81       	ldd	r24, Z+2	; 0x02
 57c:	93 81       	ldd	r25, Z+3	; 0x03
 57e:	9b 83       	std	Y+3, r25	; 0x03
 580:	8a 83       	std	Y+2, r24	; 0x02
 582:	e0 e0       	ldi	r30, 0x00	; 0
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	12 96       	adiw	r26, 0x02	; 2
 588:	8d 91       	ld	r24, X+
 58a:	9c 91       	ld	r25, X
 58c:	13 97       	sbiw	r26, 0x03	; 3
 58e:	00 97       	sbiw	r24, 0x00	; 0
 590:	19 f0       	breq	.+6      	; 0x598 <free+0xd4>
 592:	fd 01       	movw	r30, r26
 594:	dc 01       	movw	r26, r24
 596:	f7 cf       	rjmp	.-18     	; 0x586 <free+0xc2>
 598:	8d 91       	ld	r24, X+
 59a:	9c 91       	ld	r25, X
 59c:	11 97       	sbiw	r26, 0x01	; 1
 59e:	9d 01       	movw	r18, r26
 5a0:	2e 5f       	subi	r18, 0xFE	; 254
 5a2:	3f 4f       	sbci	r19, 0xFF	; 255
 5a4:	82 0f       	add	r24, r18
 5a6:	93 1f       	adc	r25, r19
 5a8:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__brkval>
 5ac:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <__brkval+0x1>
 5b0:	28 17       	cp	r18, r24
 5b2:	39 07       	cpc	r19, r25
 5b4:	69 f4       	brne	.+26     	; 0x5d0 <free+0x10c>
 5b6:	30 97       	sbiw	r30, 0x00	; 0
 5b8:	29 f4       	brne	.+10     	; 0x5c4 <free+0x100>
 5ba:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__flp+0x1>
 5be:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__flp>
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <free+0x104>
 5c4:	13 82       	std	Z+3, r1	; 0x03
 5c6:	12 82       	std	Z+2, r1	; 0x02
 5c8:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <__brkval+0x1>
 5cc:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <__brkval>
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <eeprom_read_byte>:
 5d6:	e1 99       	sbic	0x1c, 1	; 28
 5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <eeprom_read_byte>
 5da:	9f bb       	out	0x1f, r25	; 31
 5dc:	8e bb       	out	0x1e, r24	; 30
 5de:	e0 9a       	sbi	0x1c, 0	; 28
 5e0:	99 27       	eor	r25, r25
 5e2:	8d b3       	in	r24, 0x1d	; 29
 5e4:	08 95       	ret

000005e6 <eeprom_write_byte>:
 5e6:	26 2f       	mov	r18, r22

000005e8 <eeprom_write_r18>:
 5e8:	e1 99       	sbic	0x1c, 1	; 28
 5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <eeprom_write_r18>
 5ec:	9f bb       	out	0x1f, r25	; 31
 5ee:	8e bb       	out	0x1e, r24	; 30
 5f0:	2d bb       	out	0x1d, r18	; 29
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	f8 94       	cli
 5f6:	e2 9a       	sbi	0x1c, 2	; 28
 5f8:	e1 9a       	sbi	0x1c, 1	; 28
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	08 95       	ret

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
