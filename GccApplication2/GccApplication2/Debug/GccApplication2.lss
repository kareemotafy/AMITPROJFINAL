
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800066  00800066  00000546  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c11  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a4  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ba  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000020fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052d  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000220  00000000  00000000  000027a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000029c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a6 e6       	ldi	r26, 0x66	; 102
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 38       	cpi	r26, 0x86	; 134
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ec ea       	ldi	r30, 0xAC	; 172
  78:	f4 e0       	ldi	r31, 0x04	; 4
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  8a:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LM35_Init>:
 * Created: 1/5/2023 11:09:05 PM
 *  Author: Kareem
 */
#include "LM35.h"
void LM35_Init(ADC_Channel Channel_confg)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	ADC_ConfigStruct *ptr = (ADC_ConfigStruct *)(malloc(sizeof(ADC_ConfigStruct)));
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 33 01 	call	0x266	; 0x266 <malloc>
	;
	ptr->PSC = PSC_64;
  9e:	26 e0       	ldi	r18, 0x06	; 6
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	ptr->RMode = Polling;
  a4:	11 82       	std	Z+1, r1	; 0x01
	ptr->VRef = VInternal;
  a6:	23 e0       	ldi	r18, 0x03	; 3
  a8:	22 83       	std	Z+2, r18	; 0x02
	ptr->Channel = Channel_confg;
  aa:	c3 83       	std	Z+3, r28	; 0x03
	ADC_Init(ptr);
  ac:	0e 94 ce 00 	call	0x19c	; 0x19c <ADC_Init>
}
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <LM35_Read>:

unsigned short int LM35_Read(void)
{
	unsigned short int temp;

	temp = ADC_Read(ADC_Channel0) / 4;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <ADC_Read>

	return temp;
  ba:	96 95       	lsr	r25
  bc:	87 95       	ror	r24
  be:	96 95       	lsr	r25
  c0:	87 95       	ror	r24
  c2:	08 95       	ret

000000c4 <update_temp_reading>:

short temp_reading_counter = 0;
short temp_reading[10] = {};
static short current_temp = 0;

void update_temp_reading(void){
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
	if (temp_reading_counter < 10)
  c8:	c0 91 7c 00 	lds	r28, 0x007C	; 0x80007c <temp_reading_counter>
  cc:	d0 91 7d 00 	lds	r29, 0x007D	; 0x80007d <temp_reading_counter+0x1>
  d0:	ca 30       	cpi	r28, 0x0A	; 10
  d2:	d1 05       	cpc	r29, r1
  d4:	94 f4       	brge	.+36     	; 0xfa <update_temp_reading+0x36>
	{
		temp_reading[temp_reading_counter] = LM35_Read();
  d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <LM35_Read>
  da:	cc 0f       	add	r28, r28
  dc:	dd 1f       	adc	r29, r29
  de:	c8 59       	subi	r28, 0x98	; 152
  e0:	df 4f       	sbci	r29, 0xFF	; 255
  e2:	99 83       	std	Y+1, r25	; 0x01
  e4:	88 83       	st	Y, r24
		temp_reading_counter++;
  e6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <temp_reading_counter>
  ea:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <temp_reading_counter+0x1>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <temp_reading_counter+0x1>
  f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <temp_reading_counter>
  f8:	1a c0       	rjmp	.+52     	; 0x12e <update_temp_reading+0x6a>
	}
	else
	{
		temp_reading_counter = 0;
  fa:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <temp_reading_counter+0x1>
  fe:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <temp_reading_counter>
 102:	15 c0       	rjmp	.+42     	; 0x12e <update_temp_reading+0x6a>
	}

	for (int i = 0; i < 10; i++)
	{
		current_temp += temp_reading[i];
 104:	81 91       	ld	r24, Z+
 106:	91 91       	ld	r25, Z+
 108:	28 0f       	add	r18, r24
 10a:	39 1f       	adc	r19, r25
 10c:	82 2f       	mov	r24, r18
 10e:	93 2f       	mov	r25, r19
	else
	{
		temp_reading_counter = 0;
	}

	for (int i = 0; i < 10; i++)
 110:	e4 17       	cp	r30, r20
 112:	f5 07       	cpc	r31, r21
 114:	b9 f7       	brne	.-18     	; 0x104 <update_temp_reading+0x40>
	{
		current_temp += temp_reading[i];
	}
	current_temp /= 10;
 116:	6a e0       	ldi	r22, 0x0A	; 10
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	0e 94 0b 01 	call	0x216	; 0x216 <__divmodhi4>
 11e:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <__data_end+0x1>
 122:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <__data_end>
	PORTD = ~PORTD;
 126:	82 b3       	in	r24, 0x12	; 18
 128:	80 95       	com	r24
 12a:	82 bb       	out	0x12, r24	; 18
 12c:	09 c0       	rjmp	.+18     	; 0x140 <update_temp_reading+0x7c>
 12e:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 132:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 136:	e8 e6       	ldi	r30, 0x68	; 104
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	4c e7       	ldi	r20, 0x7C	; 124
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	e2 cf       	rjmp	.-60     	; 0x104 <update_temp_reading+0x40>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <__vector_7>:
#include "TCS.h"
#include "Clock.h"
#include "Timer.h"

// Timer interrupt service routine
ISR(TIMER1_COMPA_vect) {
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	update_temp_reading();
 168:	0e 94 62 00 	call	0xc4	; 0xc4 <update_temp_reading>
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <main>:

int main(void){	
	INIT_Timer1();
 18e:	0e 94 01 01 	call	0x202	; 0x202 <INIT_Timer1>
	LM35_Init(ADC_Channel0);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 49 00 	call	0x92	; 0x92 <LM35_Init>
	// Enable global interrupts
	sei();
 198:	78 94       	sei
 19a:	ff cf       	rjmp	.-2      	; 0x19a <main+0xc>

0000019c <ADC_Init>:
#include "ADC.h"

static ADC_ConfigStruct ADC_InitStruct;


void ADC_Init(ADC_ConfigStruct* ptr){
 19c:	dc 01       	movw	r26, r24
	ADC_InitStruct.PSC = ptr->PSC;
 19e:	ee e7       	ldi	r30, 0x7E	; 126
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	8c 91       	ld	r24, X
 1a4:	80 83       	st	Z, r24
	ADC_InitStruct.RMode = ptr->RMode;
 1a6:	11 96       	adiw	r26, 0x01	; 1
 1a8:	8c 91       	ld	r24, X
 1aa:	11 97       	sbiw	r26, 0x01	; 1
 1ac:	81 83       	std	Z+1, r24	; 0x01
	ADC_InitStruct.VRef = ptr->VRef;
 1ae:	12 96       	adiw	r26, 0x02	; 2
 1b0:	9c 91       	ld	r25, X
 1b2:	12 97       	sbiw	r26, 0x02	; 2
 1b4:	92 83       	std	Z+2, r25	; 0x02
	ADC_InitStruct.Channel = ptr->Channel;
 1b6:	13 96       	adiw	r26, 0x03	; 3
 1b8:	9c 91       	ld	r25, X
 1ba:	93 83       	std	Z+3, r25	; 0x03
	if(ADC_InitStruct.RMode == Interrupt){
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	11 f4       	brne	.+4      	; 0x1c4 <ADC_Init+0x28>
		SetBit(ADCSRA_REG,ADIE_BIT);
 1c0:	33 9a       	sbi	0x06, 3	; 6
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <ADC_Init+0x2e>
		}else if(ADC_InitStruct.RMode == Polling){
 1c4:	81 11       	cpse	r24, r1
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <ADC_Init+0x2e>
		ClearBit(ADCSRA_REG,ADIE_BIT);
 1c8:	33 98       	cbi	0x06, 3	; 6
	}
	// Enabling the ADC
	SetBit(ADCSRA_REG,ADEN_BIT);
 1ca:	37 9a       	sbi	0x06, 7	; 6
	// Setting System Clock pre-scalar
	ADCSRA_REG |= ADC_InitStruct.PSC;
 1cc:	96 b1       	in	r25, 0x06	; 6
 1ce:	ee e7       	ldi	r30, 0x7E	; 126
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	89 2b       	or	r24, r25
 1d6:	86 b9       	out	0x06, r24	; 6
	// Setting Vref
	//ADMUX_REG &= 0x3F;
	ADMUX_REG |= (ADC_InitStruct.VRef<<6);
 1d8:	27 b1       	in	r18, 0x07	; 7
 1da:	92 81       	ldd	r25, Z+2	; 0x02
 1dc:	30 e4       	ldi	r19, 0x40	; 64
 1de:	93 9f       	mul	r25, r19
 1e0:	c0 01       	movw	r24, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	82 2b       	or	r24, r18
 1e6:	87 b9       	out	0x07, r24	; 7
	// Setting the ADC channel to be used
	ADMUX_REG |= (ADC_InitStruct.Channel);
 1e8:	97 b1       	in	r25, 0x07	; 7
 1ea:	83 81       	ldd	r24, Z+3	; 0x03
 1ec:	89 2b       	or	r24, r25
 1ee:	87 b9       	out	0x07, r24	; 7
 1f0:	08 95       	ret

000001f2 <ADC_Read>:
}

unsigned short int ADC_Read(ADC_Channel channel){
	unsigned short Read=0;
	SetBit(ADCSRA_REG,ADSC_BIT);
 1f2:	36 9a       	sbi	0x06, 6	; 6
	while(GetBit(ADCSRA_REG,ADIF_BIT)==0){
 1f4:	34 9b       	sbis	0x06, 4	; 6
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <ADC_Read+0x2>
	}
	Read = ADCL_REG;
 1f8:	84 b1       	in	r24, 0x04	; 4
	Read |= ADCH_REG<<8;
 1fa:	25 b1       	in	r18, 0x05	; 5
	return Read;
 1fc:	90 e0       	ldi	r25, 0x00	; 0
}
 1fe:	92 2b       	or	r25, r18
 200:	08 95       	ret

00000202 <INIT_Timer1>:
#define TIMER_COUNTER_VALUE 80000


void INIT_Timer1(void){
	// Set up timer in CTC mode
	TCCR1A = 0;
 202:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << WGM12) | (1 << CS10);
 204:	89 e0       	ldi	r24, 0x09	; 9
 206:	8e bd       	out	0x2e, r24	; 46
	// Set timer counter value
	TCNT1 = TIMER_COUNTER_VALUE;
 208:	80 e8       	ldi	r24, 0x80	; 128
 20a:	98 e3       	ldi	r25, 0x38	; 56
 20c:	9d bd       	out	0x2d, r25	; 45
 20e:	8c bd       	out	0x2c, r24	; 44

	// Enable timer compare interrupt
	TIMSK = (1 << OCIE1A);
 210:	80 e1       	ldi	r24, 0x10	; 16
 212:	89 bf       	out	0x39, r24	; 57
 214:	08 95       	ret

00000216 <__divmodhi4>:
 216:	97 fb       	bst	r25, 7
 218:	07 2e       	mov	r0, r23
 21a:	16 f4       	brtc	.+4      	; 0x220 <__divmodhi4+0xa>
 21c:	00 94       	com	r0
 21e:	07 d0       	rcall	.+14     	; 0x22e <__divmodhi4_neg1>
 220:	77 fd       	sbrc	r23, 7
 222:	09 d0       	rcall	.+18     	; 0x236 <__divmodhi4_neg2>
 224:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
 228:	07 fc       	sbrc	r0, 7
 22a:	05 d0       	rcall	.+10     	; 0x236 <__divmodhi4_neg2>
 22c:	3e f4       	brtc	.+14     	; 0x23c <__divmodhi4_exit>

0000022e <__divmodhi4_neg1>:
 22e:	90 95       	com	r25
 230:	81 95       	neg	r24
 232:	9f 4f       	sbci	r25, 0xFF	; 255
 234:	08 95       	ret

00000236 <__divmodhi4_neg2>:
 236:	70 95       	com	r23
 238:	61 95       	neg	r22
 23a:	7f 4f       	sbci	r23, 0xFF	; 255

0000023c <__divmodhi4_exit>:
 23c:	08 95       	ret

0000023e <__udivmodhi4>:
 23e:	aa 1b       	sub	r26, r26
 240:	bb 1b       	sub	r27, r27
 242:	51 e1       	ldi	r21, 0x11	; 17
 244:	07 c0       	rjmp	.+14     	; 0x254 <__udivmodhi4_ep>

00000246 <__udivmodhi4_loop>:
 246:	aa 1f       	adc	r26, r26
 248:	bb 1f       	adc	r27, r27
 24a:	a6 17       	cp	r26, r22
 24c:	b7 07       	cpc	r27, r23
 24e:	10 f0       	brcs	.+4      	; 0x254 <__udivmodhi4_ep>
 250:	a6 1b       	sub	r26, r22
 252:	b7 0b       	sbc	r27, r23

00000254 <__udivmodhi4_ep>:
 254:	88 1f       	adc	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	5a 95       	dec	r21
 25a:	a9 f7       	brne	.-22     	; 0x246 <__udivmodhi4_loop>
 25c:	80 95       	com	r24
 25e:	90 95       	com	r25
 260:	bc 01       	movw	r22, r24
 262:	cd 01       	movw	r24, r26
 264:	08 95       	ret

00000266 <malloc>:
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	91 05       	cpc	r25, r1
 272:	10 f4       	brcc	.+4      	; 0x278 <malloc+0x12>
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__flp>
 27c:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__flp+0x1>
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	a0 e0       	ldi	r26, 0x00	; 0
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	30 97       	sbiw	r30, 0x00	; 0
 28a:	19 f1       	breq	.+70     	; 0x2d2 <malloc+0x6c>
 28c:	40 81       	ld	r20, Z
 28e:	51 81       	ldd	r21, Z+1	; 0x01
 290:	02 81       	ldd	r16, Z+2	; 0x02
 292:	13 81       	ldd	r17, Z+3	; 0x03
 294:	48 17       	cp	r20, r24
 296:	59 07       	cpc	r21, r25
 298:	c8 f0       	brcs	.+50     	; 0x2cc <malloc+0x66>
 29a:	84 17       	cp	r24, r20
 29c:	95 07       	cpc	r25, r21
 29e:	69 f4       	brne	.+26     	; 0x2ba <malloc+0x54>
 2a0:	10 97       	sbiw	r26, 0x00	; 0
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <malloc+0x4a>
 2a4:	12 96       	adiw	r26, 0x02	; 2
 2a6:	0c 93       	st	X, r16
 2a8:	12 97       	sbiw	r26, 0x02	; 2
 2aa:	13 96       	adiw	r26, 0x03	; 3
 2ac:	1c 93       	st	X, r17
 2ae:	27 c0       	rjmp	.+78     	; 0x2fe <malloc+0x98>
 2b0:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <__flp>
 2b4:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <__flp+0x1>
 2b8:	22 c0       	rjmp	.+68     	; 0x2fe <malloc+0x98>
 2ba:	21 15       	cp	r18, r1
 2bc:	31 05       	cpc	r19, r1
 2be:	19 f0       	breq	.+6      	; 0x2c6 <malloc+0x60>
 2c0:	42 17       	cp	r20, r18
 2c2:	53 07       	cpc	r21, r19
 2c4:	18 f4       	brcc	.+6      	; 0x2cc <malloc+0x66>
 2c6:	9a 01       	movw	r18, r20
 2c8:	bd 01       	movw	r22, r26
 2ca:	ef 01       	movw	r28, r30
 2cc:	df 01       	movw	r26, r30
 2ce:	f8 01       	movw	r30, r16
 2d0:	db cf       	rjmp	.-74     	; 0x288 <malloc+0x22>
 2d2:	21 15       	cp	r18, r1
 2d4:	31 05       	cpc	r19, r1
 2d6:	f9 f0       	breq	.+62     	; 0x316 <malloc+0xb0>
 2d8:	28 1b       	sub	r18, r24
 2da:	39 0b       	sbc	r19, r25
 2dc:	24 30       	cpi	r18, 0x04	; 4
 2de:	31 05       	cpc	r19, r1
 2e0:	80 f4       	brcc	.+32     	; 0x302 <malloc+0x9c>
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	9b 81       	ldd	r25, Y+3	; 0x03
 2e6:	61 15       	cp	r22, r1
 2e8:	71 05       	cpc	r23, r1
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <malloc+0x8e>
 2ec:	fb 01       	movw	r30, r22
 2ee:	93 83       	std	Z+3, r25	; 0x03
 2f0:	82 83       	std	Z+2, r24	; 0x02
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <malloc+0x96>
 2f4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__flp+0x1>
 2f8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__flp>
 2fc:	fe 01       	movw	r30, r28
 2fe:	32 96       	adiw	r30, 0x02	; 2
 300:	44 c0       	rjmp	.+136    	; 0x38a <malloc+0x124>
 302:	fe 01       	movw	r30, r28
 304:	e2 0f       	add	r30, r18
 306:	f3 1f       	adc	r31, r19
 308:	81 93       	st	Z+, r24
 30a:	91 93       	st	Z+, r25
 30c:	22 50       	subi	r18, 0x02	; 2
 30e:	31 09       	sbc	r19, r1
 310:	39 83       	std	Y+1, r19	; 0x01
 312:	28 83       	st	Y, r18
 314:	3a c0       	rjmp	.+116    	; 0x38a <malloc+0x124>
 316:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <__brkval>
 31a:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <__brkval+0x1>
 31e:	23 2b       	or	r18, r19
 320:	41 f4       	brne	.+16     	; 0x332 <malloc+0xcc>
 322:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 326:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 32a:	30 93 83 00 	sts	0x0083, r19	; 0x800083 <__brkval+0x1>
 32e:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <__brkval>
 332:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 336:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 33a:	21 15       	cp	r18, r1
 33c:	31 05       	cpc	r19, r1
 33e:	41 f4       	brne	.+16     	; 0x350 <malloc+0xea>
 340:	2d b7       	in	r18, 0x3d	; 61
 342:	3e b7       	in	r19, 0x3e	; 62
 344:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 348:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 34c:	24 1b       	sub	r18, r20
 34e:	35 0b       	sbc	r19, r21
 350:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <__brkval>
 354:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <__brkval+0x1>
 358:	e2 17       	cp	r30, r18
 35a:	f3 07       	cpc	r31, r19
 35c:	a0 f4       	brcc	.+40     	; 0x386 <malloc+0x120>
 35e:	2e 1b       	sub	r18, r30
 360:	3f 0b       	sbc	r19, r31
 362:	28 17       	cp	r18, r24
 364:	39 07       	cpc	r19, r25
 366:	78 f0       	brcs	.+30     	; 0x386 <malloc+0x120>
 368:	ac 01       	movw	r20, r24
 36a:	4e 5f       	subi	r20, 0xFE	; 254
 36c:	5f 4f       	sbci	r21, 0xFF	; 255
 36e:	24 17       	cp	r18, r20
 370:	35 07       	cpc	r19, r21
 372:	48 f0       	brcs	.+18     	; 0x386 <malloc+0x120>
 374:	4e 0f       	add	r20, r30
 376:	5f 1f       	adc	r21, r31
 378:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <__brkval+0x1>
 37c:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <__brkval>
 380:	81 93       	st	Z+, r24
 382:	91 93       	st	Z+, r25
 384:	02 c0       	rjmp	.+4      	; 0x38a <malloc+0x124>
 386:	e0 e0       	ldi	r30, 0x00	; 0
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	cf 01       	movw	r24, r30
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	08 95       	ret

00000396 <free>:
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	00 97       	sbiw	r24, 0x00	; 0
 39c:	09 f4       	brne	.+2      	; 0x3a0 <free+0xa>
 39e:	81 c0       	rjmp	.+258    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 3a0:	fc 01       	movw	r30, r24
 3a2:	32 97       	sbiw	r30, 0x02	; 2
 3a4:	13 82       	std	Z+3, r1	; 0x03
 3a6:	12 82       	std	Z+2, r1	; 0x02
 3a8:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <__flp>
 3ac:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <__flp+0x1>
 3b0:	10 97       	sbiw	r26, 0x00	; 0
 3b2:	81 f4       	brne	.+32     	; 0x3d4 <free+0x3e>
 3b4:	20 81       	ld	r18, Z
 3b6:	31 81       	ldd	r19, Z+1	; 0x01
 3b8:	82 0f       	add	r24, r18
 3ba:	93 1f       	adc	r25, r19
 3bc:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <__brkval>
 3c0:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <__brkval+0x1>
 3c4:	28 17       	cp	r18, r24
 3c6:	39 07       	cpc	r19, r25
 3c8:	51 f5       	brne	.+84     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3ca:	f0 93 83 00 	sts	0x0083, r31	; 0x800083 <__brkval+0x1>
 3ce:	e0 93 82 00 	sts	0x0082, r30	; 0x800082 <__brkval>
 3d2:	67 c0       	rjmp	.+206    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 3d4:	ed 01       	movw	r28, r26
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	ce 17       	cp	r28, r30
 3dc:	df 07       	cpc	r29, r31
 3de:	40 f4       	brcc	.+16     	; 0x3f0 <free+0x5a>
 3e0:	4a 81       	ldd	r20, Y+2	; 0x02
 3e2:	5b 81       	ldd	r21, Y+3	; 0x03
 3e4:	9e 01       	movw	r18, r28
 3e6:	41 15       	cp	r20, r1
 3e8:	51 05       	cpc	r21, r1
 3ea:	f1 f0       	breq	.+60     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3ec:	ea 01       	movw	r28, r20
 3ee:	f5 cf       	rjmp	.-22     	; 0x3da <free+0x44>
 3f0:	d3 83       	std	Z+3, r29	; 0x03
 3f2:	c2 83       	std	Z+2, r28	; 0x02
 3f4:	40 81       	ld	r20, Z
 3f6:	51 81       	ldd	r21, Z+1	; 0x01
 3f8:	84 0f       	add	r24, r20
 3fa:	95 1f       	adc	r25, r21
 3fc:	c8 17       	cp	r28, r24
 3fe:	d9 07       	cpc	r29, r25
 400:	59 f4       	brne	.+22     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 402:	88 81       	ld	r24, Y
 404:	99 81       	ldd	r25, Y+1	; 0x01
 406:	84 0f       	add	r24, r20
 408:	95 1f       	adc	r25, r21
 40a:	02 96       	adiw	r24, 0x02	; 2
 40c:	91 83       	std	Z+1, r25	; 0x01
 40e:	80 83       	st	Z, r24
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	9b 81       	ldd	r25, Y+3	; 0x03
 414:	93 83       	std	Z+3, r25	; 0x03
 416:	82 83       	std	Z+2, r24	; 0x02
 418:	21 15       	cp	r18, r1
 41a:	31 05       	cpc	r19, r1
 41c:	29 f4       	brne	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 41e:	f0 93 85 00 	sts	0x0085, r31	; 0x800085 <__flp+0x1>
 422:	e0 93 84 00 	sts	0x0084, r30	; 0x800084 <__flp>
 426:	3d c0       	rjmp	.+122    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 428:	e9 01       	movw	r28, r18
 42a:	fb 83       	std	Y+3, r31	; 0x03
 42c:	ea 83       	std	Y+2, r30	; 0x02
 42e:	49 91       	ld	r20, Y+
 430:	59 91       	ld	r21, Y+
 432:	c4 0f       	add	r28, r20
 434:	d5 1f       	adc	r29, r21
 436:	ec 17       	cp	r30, r28
 438:	fd 07       	cpc	r31, r29
 43a:	61 f4       	brne	.+24     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 43c:	80 81       	ld	r24, Z
 43e:	91 81       	ldd	r25, Z+1	; 0x01
 440:	84 0f       	add	r24, r20
 442:	95 1f       	adc	r25, r21
 444:	02 96       	adiw	r24, 0x02	; 2
 446:	e9 01       	movw	r28, r18
 448:	99 83       	std	Y+1, r25	; 0x01
 44a:	88 83       	st	Y, r24
 44c:	82 81       	ldd	r24, Z+2	; 0x02
 44e:	93 81       	ldd	r25, Z+3	; 0x03
 450:	9b 83       	std	Y+3, r25	; 0x03
 452:	8a 83       	std	Y+2, r24	; 0x02
 454:	e0 e0       	ldi	r30, 0x00	; 0
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	12 96       	adiw	r26, 0x02	; 2
 45a:	8d 91       	ld	r24, X+
 45c:	9c 91       	ld	r25, X
 45e:	13 97       	sbiw	r26, 0x03	; 3
 460:	00 97       	sbiw	r24, 0x00	; 0
 462:	19 f0       	breq	.+6      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 464:	fd 01       	movw	r30, r26
 466:	dc 01       	movw	r26, r24
 468:	f7 cf       	rjmp	.-18     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 46a:	8d 91       	ld	r24, X+
 46c:	9c 91       	ld	r25, X
 46e:	11 97       	sbiw	r26, 0x01	; 1
 470:	9d 01       	movw	r18, r26
 472:	2e 5f       	subi	r18, 0xFE	; 254
 474:	3f 4f       	sbci	r19, 0xFF	; 255
 476:	82 0f       	add	r24, r18
 478:	93 1f       	adc	r25, r19
 47a:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <__brkval>
 47e:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <__brkval+0x1>
 482:	28 17       	cp	r18, r24
 484:	39 07       	cpc	r19, r25
 486:	69 f4       	brne	.+26     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 488:	30 97       	sbiw	r30, 0x00	; 0
 48a:	29 f4       	brne	.+10     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 48c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__flp+0x1>
 490:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__flp>
 494:	02 c0       	rjmp	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 496:	13 82       	std	Z+3, r1	; 0x03
 498:	12 82       	std	Z+2, r1	; 0x02
 49a:	b0 93 83 00 	sts	0x0083, r27	; 0x800083 <__brkval+0x1>
 49e:	a0 93 82 00 	sts	0x0082, r26	; 0x800082 <__brkval>
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
