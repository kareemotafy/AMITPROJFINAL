
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000007e4  00000878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800072  00800072  0000088a  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000928  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001480  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba6  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dec  00000000  00000000  00002b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00003934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000727  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c8  00000000  00000000  0000433b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004603  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 39       	cpi	r26, 0x9D	; 157
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 33 02 	call	0x466	; 0x466 <main>
  8a:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INIT_buttons>:
  92:	92 9a       	sbi	0x12, 2	; 18
  94:	8a 98       	cbi	0x11, 2	; 17
  96:	90 9a       	sbi	0x12, 0	; 18
  98:	88 98       	cbi	0x11, 0	; 17
  9a:	91 9a       	sbi	0x12, 1	; 18
  9c:	89 98       	cbi	0x11, 1	; 17
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	8b bf       	out	0x3b, r24	; 59
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	85 bf       	out	0x35, r24	; 53
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <UpdateSetTemp>:
  aa:	80 9b       	sbis	0x10, 0	; 16
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <UpdateSetTemp+0x8>
  ae:	81 99       	sbic	0x10, 1	; 16
  b0:	43 c0       	rjmp	.+134    	; 0x138 <UpdateSetTemp+0x8e>
  b2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <setting>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	71 f5       	brne	.+92     	; 0x116 <UpdateSetTemp+0x6c>
  ba:	80 99       	sbic	0x10, 0	; 16
  bc:	17 c0       	rjmp	.+46     	; 0xec <UpdateSetTemp+0x42>
  be:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
  c2:	88 23       	and	r24, r24
  c4:	99 f0       	breq	.+38     	; 0xec <UpdateSetTemp+0x42>
  c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  ca:	8b 34       	cpi	r24, 0x4B	; 75
  cc:	18 f4       	brcc	.+6      	; 0xd4 <UpdateSetTemp+0x2a>
  ce:	8b 5f       	subi	r24, 0xFB	; 251
  d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
  d4:	80 99       	sbic	0x10, 0	; 16
  d6:	0a c0       	rjmp	.+20     	; 0xec <UpdateSetTemp+0x42>
  d8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  dc:	0e 94 cd 00 	call	0x19a	; 0x19a <SSD_write>
  e0:	80 9b       	sbis	0x10, 0	; 16
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <UpdateSetTemp+0x2e>
  e4:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <setting>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	a9 f4       	brne	.+42     	; 0x116 <UpdateSetTemp+0x6c>
  ec:	81 99       	sbic	0x10, 1	; 16
  ee:	13 c0       	rjmp	.+38     	; 0x116 <UpdateSetTemp+0x6c>
  f0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
  f4:	84 32       	cpi	r24, 0x24	; 36
  f6:	78 f0       	brcs	.+30     	; 0x116 <UpdateSetTemp+0x6c>
  f8:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <count>
  fc:	99 23       	and	r25, r25
  fe:	59 f0       	breq	.+22     	; 0x116 <UpdateSetTemp+0x6c>
 100:	85 50       	subi	r24, 0x05	; 5
 102:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
 106:	81 99       	sbic	0x10, 1	; 16
 108:	06 c0       	rjmp	.+12     	; 0x116 <UpdateSetTemp+0x6c>
 10a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
 10e:	0e 94 cd 00 	call	0x19a	; 0x19a <SSD_write>
 112:	81 9b       	sbis	0x10, 1	; 16
 114:	fa cf       	rjmp	.-12     	; 0x10a <UpdateSetTemp+0x60>
 116:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <settemp>
 11a:	85 e5       	ldi	r24, 0x55	; 85
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <eeprom_write_byte>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <setting>
 128:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <count>
 12c:	85 e5       	ldi	r24, 0x55	; 85
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 db 03 	call	0x7b6	; 0x7b6 <eeprom_read_byte>
 134:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
 138:	08 95       	ret

0000013a <INIT_eeprom>:
 13a:	85 e5       	ldi	r24, 0x55	; 85
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <eeprom_read_byte>
 142:	8f 3f       	cpi	r24, 0xFF	; 255
 144:	19 f0       	breq	.+6      	; 0x14c <INIT_eeprom+0x12>
 146:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <settemp>
 14a:	08 95       	ret
 14c:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <settemp>
 150:	85 e5       	ldi	r24, 0x55	; 85
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <eeprom_write_byte>
 158:	08 95       	ret

0000015a <LM35_Init>:
 * Created: 1/5/2023 11:09:05 PM
 *  Author: Kareem
 */
#include "LM35.h"
void LM35_Init(ADC_Channel Channel_confg)
{
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
	ADC_ConfigStruct *ptr = (ADC_ConfigStruct *)(malloc(sizeof(ADC_ConfigStruct)));
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 ba 02 	call	0x574	; 0x574 <malloc>
	;
	ptr->PSC = PSC_64;
 166:	26 e0       	ldi	r18, 0x06	; 6
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
	ptr->RMode = Polling;
 16c:	11 82       	std	Z+1, r1	; 0x01
	ptr->VRef = VInternal;
 16e:	23 e0       	ldi	r18, 0x03	; 3
 170:	22 83       	std	Z+2, r18	; 0x02
	ptr->Channel = Channel_confg;
 172:	c3 83       	std	Z+3, r28	; 0x03
	ADC_Init(ptr);
 174:	0e 94 3f 02 	call	0x47e	; 0x47e <ADC_Init>
}
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <LM35_Read>:

unsigned short int LM35_Read(void)
{
	unsigned short int temp;

	temp = ADC_Read(ADC_Channel0) / 4;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <ADC_Read>

	return temp;
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	08 95       	ret

0000018c <INIT_SSD>:
char tens;
extern char SSDMultiplex;

	void INIT_SSD()
	{
		DDRB=0xff;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	87 bb       	out	0x17, r24	; 23
		PORTB=0;
 190:	18 ba       	out	0x18, r1	; 24
 192:	08 95       	ret

00000194 <SSD_OFF>:
	}
	
	void SSD_OFF()
	{
		SSD_port=0x7f;
 194:	8f e7       	ldi	r24, 0x7F	; 127
 196:	88 bb       	out	0x18, r24	; 24
 198:	08 95       	ret

0000019a <SSD_write>:
	
	
	
	void SSD_write(char num)
	{
			units=num%10;
 19a:	9d ec       	ldi	r25, 0xCD	; 205
 19c:	89 9f       	mul	r24, r25
 19e:	91 2d       	mov	r25, r1
 1a0:	11 24       	eor	r1, r1
 1a2:	96 95       	lsr	r25
 1a4:	96 95       	lsr	r25
 1a6:	96 95       	lsr	r25
 1a8:	39 2f       	mov	r19, r25
 1aa:	33 0f       	add	r19, r19
 1ac:	23 2f       	mov	r18, r19
 1ae:	22 0f       	add	r18, r18
 1b0:	22 0f       	add	r18, r18
 1b2:	23 0f       	add	r18, r19
 1b4:	82 1b       	sub	r24, r18
 1b6:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <units>
			tens=num/10;
 1ba:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <tens>
			
			if (!SSDMultiplex)
 1be:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <SSDMultiplex>
 1c2:	81 11       	cpse	r24, r1
 1c4:	0a c0       	rjmp	.+20     	; 0x1da <SSD_write+0x40>
			{
				
				SetBit(Display1Port,Display1Pin);
 1c6:	d9 9a       	sbi	0x1b, 1	; 27
				ClearBit(Display2Port,Display2Pin);
 1c8:	da 98       	cbi	0x1b, 2	; 27
				SSD_port=number[units];
 1ca:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <units>
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	ea 59       	subi	r30, 0x9A	; 154
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	80 81       	ld	r24, Z
 1d6:	88 bb       	out	0x18, r24	; 24
 1d8:	08 95       	ret
			}
			else
			{
				
				ClearBit(Display1Port,Display1Pin);
 1da:	d9 98       	cbi	0x1b, 1	; 27
				SetBit(Display2Port,Display2Pin);
 1dc:	da 9a       	sbi	0x1b, 2	; 27
				SSD_port=number[tens];
 1de:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <tens>
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ea 59       	subi	r30, 0x9A	; 154
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	80 81       	ld	r24, Z
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret

000001ee <SYSTEM_init>:
char settemp = 60;

// system initialization for all modules
void SYSTEM_init()
{
	INIT_eeprom();
 1ee:	0e 94 9d 00 	call	0x13a	; 0x13a <INIT_eeprom>
	INIT_buttons();
 1f2:	0e 94 49 00 	call	0x92	; 0x92 <INIT_buttons>
	INIT_SSD();
 1f6:	0e 94 c6 00 	call	0x18c	; 0x18c <INIT_SSD>
	INIT_Timer0();
 1fa:	0e 94 72 02 	call	0x4e4	; 0x4e4 <INIT_Timer0>
	INIT_HeaterCooler();
 1fe:	0e 94 6f 01 	call	0x2de	; 0x2de <INIT_HeaterCooler>
	LM35_Init(ADC_Channel0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 ad 00 	call	0x15a	; 0x15a <LM35_Init>
 208:	08 95       	ret

0000020a <SYSTEM_timer>:
};

void SYSTEM_timer()
{
	// multiplexing for dual panel SSD
	if (timer0CountSSD >= 1)
 20a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timer0CountSSD>
 20e:	88 23       	and	r24, r24
 210:	61 f0       	breq	.+24     	; 0x22a <SYSTEM_timer+0x20>
	{
		if (SSDMultiplex == 1)
 212:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <SSDMultiplex>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	19 f4       	brne	.+6      	; 0x220 <SYSTEM_timer+0x16>
		{
			SSDMultiplex = 0;
 21a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <SSDMultiplex>
 21e:	03 c0       	rjmp	.+6      	; 0x226 <SYSTEM_timer+0x1c>
		}
		else
		{
			SSDMultiplex = 1;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <SSDMultiplex>
		}
		timer0CountSSD = 0;
 226:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <timer0CountSSD>
	}

	// used for tcs
	// counts for overflows at 100ms
	timer0Count++;
 22a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <timer0Count>
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <timer0Count>

	// detect when to switch ssd panels
	// counts for overflows at ~30ms
	timer0CountSSD++;
 234:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timer0CountSSD>
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <timer0CountSSD>

	// used for ssd blinking
	// counts for overflows at 1s
	settingCounter++;
 23e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <settingCounter>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <settingCounter>

	if (settingCounter >= 30)
 248:	8e 31       	cpi	r24, 0x1E	; 30
 24a:	d8 f0       	brcs	.+54     	; 0x282 <SYSTEM_timer+0x78>
	{
		ledStatus = ~ledStatus;
 24c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 250:	80 95       	com	r24
 252:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
		if (setting == 1)
 256:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <setting>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	59 f4       	brne	.+22     	; 0x274 <SYSTEM_timer+0x6a>
		{
			SSD_OFF();
 25e:	0e 94 ca 00 	call	0x194	; 0x194 <SSD_OFF>

			if (count == 9)
 262:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 266:	89 30       	cpi	r24, 0x09	; 9
 268:	29 f4       	brne	.+10     	; 0x274 <SYSTEM_timer+0x6a>
			{
				setting = 0;
 26a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <setting>
				count = 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <count>
			}
		}
		count++;
 274:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <count>
		settingCounter = 0;
 27e:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <settingCounter>
	}

	if (timer0Count >= 3)
 282:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <timer0Count>
 286:	83 30       	cpi	r24, 0x03	; 3
 288:	20 f0       	brcs	.+8      	; 0x292 <SYSTEM_timer+0x88>
	{
		timer0Count = 0;
 28a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <timer0Count>
		TCS_Handler();
 28e:	0e 94 b1 01 	call	0x362	; 0x362 <TCS_Handler>
 292:	08 95       	ret

00000294 <SYSTEM_OFF>:
	}
};

void SYSTEM_OFF()
{
	SSD_OFF();
 294:	0e 94 ca 00 	call	0x194	; 0x194 <SSD_OFF>
	HEATER_OFF();
 298:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HEATER_OFF>
	LED_OFF();
 29c:	0e 94 88 01 	call	0x310	; 0x310 <LED_OFF>
	COOLER_OFF();
 2a0:	0e 94 75 01 	call	0x2ea	; 0x2ea <COOLER_OFF>
	setting = 0;
 2a4:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <setting>
	count = 1;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <count>
 2ae:	08 95       	ret

000002b0 <SYSTEM_loop>:
}

void SYSTEM_loop()
{

	UpdateSetTemp();
 2b0:	0e 94 55 00 	call	0xaa	; 0xaa <UpdateSetTemp>

	if (!setting)
 2b4:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <setting>
 2b8:	81 11       	cpse	r24, r1
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <SYSTEM_loop+0x16>
	{
		SSD_write(LM35_Read());
 2bc:	0e 94 be 00 	call	0x17c	; 0x17c <LM35_Read>
 2c0:	0e 94 cd 00 	call	0x19a	; 0x19a <SSD_write>
 2c4:	08 95       	ret
	}
	else
	{
		if (count % 2 == 0)
 2c6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 2ca:	80 fd       	sbrc	r24, 0
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <SYSTEM_loop+0x28>
		{
			SSD_write(settemp);
 2ce:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <settemp>
 2d2:	0e 94 cd 00 	call	0x19a	; 0x19a <SSD_write>
 2d6:	08 95       	ret
		}
		else
		{
			SSD_OFF();
 2d8:	0e 94 ca 00 	call	0x194	; 0x194 <SSD_OFF>
 2dc:	08 95       	ret

000002de <INIT_HeaterCooler>:

#include "TCS.h"
extern char ledStatus;
void INIT_HeaterCooler()
{
	SetBit(heaterDDR, heaterPin);
 2de:	8f 9a       	sbi	0x11, 7	; 17
	SetBit(coolerDDR, coolerPin);
 2e0:	8e 9a       	sbi	0x11, 6	; 17
	SetBit(ledDDR, ledPin);
 2e2:	8b 9a       	sbi	0x11, 3	; 17
 2e4:	08 95       	ret

000002e6 <COOLER_ON>:
}

void COOLER_ON()
{
	SetBit(coolerPort, coolerPin);
 2e6:	96 9a       	sbi	0x12, 6	; 18
 2e8:	08 95       	ret

000002ea <COOLER_OFF>:
}

void COOLER_OFF()
{
	ClearBit(coolerPort, coolerPin);
 2ea:	96 98       	cbi	0x12, 6	; 18
 2ec:	08 95       	ret

000002ee <HEATER_ON>:
}
void HEATER_ON()
{
	SetBit(heaterPort, heaterPin);
 2ee:	97 9a       	sbi	0x12, 7	; 18
 2f0:	08 95       	ret

000002f2 <HEATER_OFF>:
}
void HEATER_OFF()
{
	ClearBit(heaterPort, heaterPin);
 2f2:	97 98       	cbi	0x12, 7	; 18
 2f4:	08 95       	ret

000002f6 <HEATER_LED>:
}

void HEATER_LED()
{
	if (ledStatus)
 2f6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 2fa:	88 23       	and	r24, r24
 2fc:	29 f0       	breq	.+10     	; 0x308 <HEATER_LED+0x12>
	{
		SetBit(ledPort, ledPin);
 2fe:	93 9a       	sbi	0x12, 3	; 18
	}
	if (!ledStatus)
 300:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 304:	81 11       	cpse	r24, r1
 306:	01 c0       	rjmp	.+2      	; 0x30a <HEATER_LED+0x14>
	{
		ClearBit(ledPort, ledPin);
 308:	93 98       	cbi	0x12, 3	; 18
 30a:	08 95       	ret

0000030c <COOLER_LED>:
	}
}

void COOLER_LED()
{
	SetBit(ledPort, ledPin);
 30c:	93 9a       	sbi	0x12, 3	; 18
 30e:	08 95       	ret

00000310 <LED_OFF>:
}

void LED_OFF()
{
	ClearBit(ledPort, ledPin);
 310:	93 98       	cbi	0x12, 3	; 18
 312:	08 95       	ret

00000314 <TCS_Actuator>:
long int current_temp = 0;

// activates the cooler or the heater depending on the temperature and settemp
void TCS_Actuator()
{
	char settemp = eeprom_read_byte((int *)0x55);
 314:	85 e5       	ldi	r24, 0x55	; 85
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 db 03 	call	0x7b6	; 0x7b6 <eeprom_read_byte>
	int diff = settemp - current_temp;
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <current_temp>
 322:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <current_temp+0x1>
 326:	82 1b       	sub	r24, r18
 328:	93 0b       	sbc	r25, r19

	if (diff < -11)
 32a:	85 3f       	cpi	r24, 0xF5	; 245
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	92 07       	cpc	r25, r18
 330:	3c f4       	brge	.+14     	; 0x340 <TCS_Actuator+0x2c>
	{
		COOLER_ON();
 332:	0e 94 73 01 	call	0x2e6	; 0x2e6 <COOLER_ON>
		HEATER_OFF();
 336:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HEATER_OFF>
		COOLER_LED();
 33a:	0e 94 86 01 	call	0x30c	; 0x30c <COOLER_LED>
 33e:	08 95       	ret
	}
	else if (diff > -2)
 340:	8f 3f       	cpi	r24, 0xFF	; 255
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	3c f0       	brlt	.+14     	; 0x354 <TCS_Actuator+0x40>
	{
		HEATER_ON();
 346:	0e 94 77 01 	call	0x2ee	; 0x2ee <HEATER_ON>
		COOLER_OFF();
 34a:	0e 94 75 01 	call	0x2ea	; 0x2ea <COOLER_OFF>
		HEATER_LED();
 34e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <HEATER_LED>
 352:	08 95       	ret
	}
	else
	{
		HEATER_OFF();
 354:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HEATER_OFF>
		COOLER_OFF();
 358:	0e 94 75 01 	call	0x2ea	; 0x2ea <COOLER_OFF>
		LED_OFF();
 35c:	0e 94 88 01 	call	0x310	; 0x310 <LED_OFF>
 360:	08 95       	ret

00000362 <TCS_Handler>:
}

// reads the temperature from the LM35 sensor
// and stores it in an array of 10 elements with average value
void TCS_Handler()
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29

	if (temp_reading_counter < 10)
 366:	c0 91 90 00 	lds	r28, 0x0090	; 0x800090 <temp_reading_counter>
 36a:	d0 91 91 00 	lds	r29, 0x0091	; 0x800091 <temp_reading_counter+0x1>
 36e:	ca 30       	cpi	r28, 0x0A	; 10
 370:	d1 05       	cpc	r29, r1
 372:	94 f4       	brge	.+36     	; 0x398 <TCS_Handler+0x36>
	{
		temp_reading[temp_reading_counter] = LM35_Read();
 374:	0e 94 be 00 	call	0x17c	; 0x17c <LM35_Read>
 378:	cc 0f       	add	r28, r28
 37a:	dd 1f       	adc	r29, r29
 37c:	c4 58       	subi	r28, 0x84	; 132
 37e:	df 4f       	sbci	r29, 0xFF	; 255
 380:	99 83       	std	Y+1, r25	; 0x01
 382:	88 83       	st	Y, r24
		temp_reading_counter++;
 384:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <temp_reading_counter>
 388:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <temp_reading_counter+0x1>
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <temp_reading_counter+0x1>
 392:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <temp_reading_counter>
 396:	2f c0       	rjmp	.+94     	; 0x3f6 <TCS_Handler+0x94>
	}
	else
	{
		temp_reading_counter = 0;
 398:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <temp_reading_counter+0x1>
 39c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <temp_reading_counter>
 3a0:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <current_temp>
 3a4:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <current_temp+0x1>
 3a8:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <current_temp+0x2>
 3ac:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <current_temp+0x3>
 3b0:	ec e7       	ldi	r30, 0x7C	; 124
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	20 e9       	ldi	r18, 0x90	; 144
 3b6:	30 e0       	ldi	r19, 0x00	; 0
		for (int i = 0; i < 10; i++)
		{
			current_temp += temp_reading[i];
 3b8:	81 91       	ld	r24, Z+
 3ba:	91 91       	ld	r25, Z+
 3bc:	09 2e       	mov	r0, r25
 3be:	00 0c       	add	r0, r0
 3c0:	aa 0b       	sbc	r26, r26
 3c2:	bb 0b       	sbc	r27, r27
 3c4:	48 0f       	add	r20, r24
 3c6:	59 1f       	adc	r21, r25
 3c8:	6a 1f       	adc	r22, r26
 3ca:	7b 1f       	adc	r23, r27
		temp_reading_counter++;
	}
	else
	{
		temp_reading_counter = 0;
		for (int i = 0; i < 10; i++)
 3cc:	e2 17       	cp	r30, r18
 3ce:	f3 07       	cpc	r31, r19
 3d0:	99 f7       	brne	.-26     	; 0x3b8 <TCS_Handler+0x56>
		{
			current_temp += temp_reading[i];
		}
		current_temp /= 10;
 3d2:	cb 01       	movw	r24, r22
 3d4:	ba 01       	movw	r22, r20
 3d6:	2a e0       	ldi	r18, 0x0A	; 10
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__divmodsi4>
 3e2:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <current_temp>
 3e6:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <current_temp+0x1>
 3ea:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <current_temp+0x2>
 3ee:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <current_temp+0x3>
		TCS_Actuator();
 3f2:	0e 94 8a 01 	call	0x314	; 0x314 <TCS_Actuator>
	}
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <__vector_11>:
//

#include "SYSTEM.h"

ISR(TIMER0_OVF_vect) // Timer0 ISR
{
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	2f 93       	push	r18
 408:	3f 93       	push	r19
 40a:	4f 93       	push	r20
 40c:	5f 93       	push	r21
 40e:	6f 93       	push	r22
 410:	7f 93       	push	r23
 412:	8f 93       	push	r24
 414:	9f 93       	push	r25
 416:	af 93       	push	r26
 418:	bf 93       	push	r27
 41a:	ef 93       	push	r30
 41c:	ff 93       	push	r31
	SYSTEM_timer();
 41e:	0e 94 05 01 	call	0x20a	; 0x20a <SYSTEM_timer>
}
 422:	ff 91       	pop	r31
 424:	ef 91       	pop	r30
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	7f 91       	pop	r23
 430:	6f 91       	pop	r22
 432:	5f 91       	pop	r21
 434:	4f 91       	pop	r20
 436:	3f 91       	pop	r19
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <__vector_1>:

// global device enable toggle
char on = 0;
ISR(INT0_vect)
{
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	8f 93       	push	r24
	on = ~on;
 450:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <on>
 454:	80 95       	com	r24
 456:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <on>
}
 45a:	8f 91       	pop	r24
 45c:	0f 90       	pop	r0
 45e:	0f be       	out	0x3f, r0	; 63
 460:	0f 90       	pop	r0
 462:	1f 90       	pop	r1
 464:	18 95       	reti

00000466 <main>:

int main(void)
{

	SYSTEM_init();
 466:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SYSTEM_init>

	while (1)
	{
		if (on)
 46a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <on>
 46e:	88 23       	and	r24, r24
 470:	19 f0       	breq	.+6      	; 0x478 <main+0x12>
		{
			SYSTEM_loop();
 472:	0e 94 58 01 	call	0x2b0	; 0x2b0 <SYSTEM_loop>
 476:	f9 cf       	rjmp	.-14     	; 0x46a <main+0x4>
		}
		else
		{
			SYSTEM_OFF();
 478:	0e 94 4a 01 	call	0x294	; 0x294 <SYSTEM_OFF>
 47c:	f6 cf       	rjmp	.-20     	; 0x46a <main+0x4>

0000047e <ADC_Init>:
#include "ADC.h"

static ADC_ConfigStruct ADC_InitStruct;


void ADC_Init(ADC_ConfigStruct* ptr){
 47e:	dc 01       	movw	r26, r24
	ADC_InitStruct.PSC = ptr->PSC;
 480:	e3 e9       	ldi	r30, 0x93	; 147
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	8c 91       	ld	r24, X
 486:	80 83       	st	Z, r24
	ADC_InitStruct.RMode = ptr->RMode;
 488:	11 96       	adiw	r26, 0x01	; 1
 48a:	8c 91       	ld	r24, X
 48c:	11 97       	sbiw	r26, 0x01	; 1
 48e:	81 83       	std	Z+1, r24	; 0x01
	ADC_InitStruct.VRef = ptr->VRef;
 490:	12 96       	adiw	r26, 0x02	; 2
 492:	9c 91       	ld	r25, X
 494:	12 97       	sbiw	r26, 0x02	; 2
 496:	92 83       	std	Z+2, r25	; 0x02
	ADC_InitStruct.Channel = ptr->Channel;
 498:	13 96       	adiw	r26, 0x03	; 3
 49a:	9c 91       	ld	r25, X
 49c:	93 83       	std	Z+3, r25	; 0x03
	if(ADC_InitStruct.RMode == Interrupt){
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <ADC_Init+0x28>
		SetBit(ADCSRA_REG,ADIE_BIT);
 4a2:	33 9a       	sbi	0x06, 3	; 6
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <ADC_Init+0x2e>
		}else if(ADC_InitStruct.RMode == Polling){
 4a6:	81 11       	cpse	r24, r1
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <ADC_Init+0x2e>
		ClearBit(ADCSRA_REG,ADIE_BIT);
 4aa:	33 98       	cbi	0x06, 3	; 6
	}
	// Enabling the ADC
	SetBit(ADCSRA_REG,ADEN_BIT);
 4ac:	37 9a       	sbi	0x06, 7	; 6
	// Setting System Clock pre-scalar
	ADCSRA_REG |= ADC_InitStruct.PSC;
 4ae:	96 b1       	in	r25, 0x06	; 6
 4b0:	e3 e9       	ldi	r30, 0x93	; 147
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	89 2b       	or	r24, r25
 4b8:	86 b9       	out	0x06, r24	; 6
	// Setting Vref
	//ADMUX_REG &= 0x3F;
	ADMUX_REG |= (ADC_InitStruct.VRef<<6);
 4ba:	27 b1       	in	r18, 0x07	; 7
 4bc:	92 81       	ldd	r25, Z+2	; 0x02
 4be:	30 e4       	ldi	r19, 0x40	; 64
 4c0:	93 9f       	mul	r25, r19
 4c2:	c0 01       	movw	r24, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	82 2b       	or	r24, r18
 4c8:	87 b9       	out	0x07, r24	; 7
	// Setting the ADC channel to be used
	ADMUX_REG |= (ADC_InitStruct.Channel);
 4ca:	97 b1       	in	r25, 0x07	; 7
 4cc:	83 81       	ldd	r24, Z+3	; 0x03
 4ce:	89 2b       	or	r24, r25
 4d0:	87 b9       	out	0x07, r24	; 7
 4d2:	08 95       	ret

000004d4 <ADC_Read>:
}

unsigned short int ADC_Read(ADC_Channel channel){
	unsigned short Read=0;
	SetBit(ADCSRA_REG,ADSC_BIT);
 4d4:	36 9a       	sbi	0x06, 6	; 6
	while(GetBit(ADCSRA_REG,ADIF_BIT)==0){
 4d6:	34 9b       	sbis	0x06, 4	; 6
 4d8:	fe cf       	rjmp	.-4      	; 0x4d6 <ADC_Read+0x2>
	}
	Read = ADCL_REG;
 4da:	84 b1       	in	r24, 0x04	; 4
	Read |= ADCH_REG<<8;
 4dc:	25 b1       	in	r18, 0x05	; 5
	return Read;
 4de:	90 e0       	ldi	r25, 0x00	; 0
}
 4e0:	92 2b       	or	r25, r18
 4e2:	08 95       	ret

000004e4 <INIT_Timer0>:
// Timer counter value for 100ms interrupt frequency

void INIT_Timer0()
{
	
	TIMSK=(1<<TOIE0);  	/* Enable Timer0 overflow interrupts */
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	89 bf       	out	0x39, r24	; 57
	
	TCNT0 = 8;  		/* Load TCNT0, count for 10ms*/
 4e8:	88 e0       	ldi	r24, 0x08	; 8
 4ea:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1<<CS02) | (1<<CS00); /* Start timer0 with /1024 prescaler*/
 4ec:	85 e0       	ldi	r24, 0x05	; 5
 4ee:	83 bf       	out	0x33, r24	; 51
 4f0:	08 95       	ret

000004f2 <__divmodsi4>:
 4f2:	05 2e       	mov	r0, r21
 4f4:	97 fb       	bst	r25, 7
 4f6:	1e f4       	brtc	.+6      	; 0x4fe <__divmodsi4+0xc>
 4f8:	00 94       	com	r0
 4fa:	0e 94 90 02 	call	0x520	; 0x520 <__negsi2>
 4fe:	57 fd       	sbrc	r21, 7
 500:	07 d0       	rcall	.+14     	; 0x510 <__divmodsi4_neg2>
 502:	0e 94 98 02 	call	0x530	; 0x530 <__udivmodsi4>
 506:	07 fc       	sbrc	r0, 7
 508:	03 d0       	rcall	.+6      	; 0x510 <__divmodsi4_neg2>
 50a:	4e f4       	brtc	.+18     	; 0x51e <__divmodsi4_exit>
 50c:	0c 94 90 02 	jmp	0x520	; 0x520 <__negsi2>

00000510 <__divmodsi4_neg2>:
 510:	50 95       	com	r21
 512:	40 95       	com	r20
 514:	30 95       	com	r19
 516:	21 95       	neg	r18
 518:	3f 4f       	sbci	r19, 0xFF	; 255
 51a:	4f 4f       	sbci	r20, 0xFF	; 255
 51c:	5f 4f       	sbci	r21, 0xFF	; 255

0000051e <__divmodsi4_exit>:
 51e:	08 95       	ret

00000520 <__negsi2>:
 520:	90 95       	com	r25
 522:	80 95       	com	r24
 524:	70 95       	com	r23
 526:	61 95       	neg	r22
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	8f 4f       	sbci	r24, 0xFF	; 255
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	08 95       	ret

00000530 <__udivmodsi4>:
 530:	a1 e2       	ldi	r26, 0x21	; 33
 532:	1a 2e       	mov	r1, r26
 534:	aa 1b       	sub	r26, r26
 536:	bb 1b       	sub	r27, r27
 538:	fd 01       	movw	r30, r26
 53a:	0d c0       	rjmp	.+26     	; 0x556 <__udivmodsi4_ep>

0000053c <__udivmodsi4_loop>:
 53c:	aa 1f       	adc	r26, r26
 53e:	bb 1f       	adc	r27, r27
 540:	ee 1f       	adc	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	a2 17       	cp	r26, r18
 546:	b3 07       	cpc	r27, r19
 548:	e4 07       	cpc	r30, r20
 54a:	f5 07       	cpc	r31, r21
 54c:	20 f0       	brcs	.+8      	; 0x556 <__udivmodsi4_ep>
 54e:	a2 1b       	sub	r26, r18
 550:	b3 0b       	sbc	r27, r19
 552:	e4 0b       	sbc	r30, r20
 554:	f5 0b       	sbc	r31, r21

00000556 <__udivmodsi4_ep>:
 556:	66 1f       	adc	r22, r22
 558:	77 1f       	adc	r23, r23
 55a:	88 1f       	adc	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	1a 94       	dec	r1
 560:	69 f7       	brne	.-38     	; 0x53c <__udivmodsi4_loop>
 562:	60 95       	com	r22
 564:	70 95       	com	r23
 566:	80 95       	com	r24
 568:	90 95       	com	r25
 56a:	9b 01       	movw	r18, r22
 56c:	ac 01       	movw	r20, r24
 56e:	bd 01       	movw	r22, r26
 570:	cf 01       	movw	r24, r30
 572:	08 95       	ret

00000574 <malloc>:
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	91 05       	cpc	r25, r1
 580:	10 f4       	brcc	.+4      	; 0x586 <malloc+0x12>
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <__flp>
 58a:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <__flp+0x1>
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	a0 e0       	ldi	r26, 0x00	; 0
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	30 97       	sbiw	r30, 0x00	; 0
 598:	19 f1       	breq	.+70     	; 0x5e0 <malloc+0x6c>
 59a:	40 81       	ld	r20, Z
 59c:	51 81       	ldd	r21, Z+1	; 0x01
 59e:	02 81       	ldd	r16, Z+2	; 0x02
 5a0:	13 81       	ldd	r17, Z+3	; 0x03
 5a2:	48 17       	cp	r20, r24
 5a4:	59 07       	cpc	r21, r25
 5a6:	c8 f0       	brcs	.+50     	; 0x5da <malloc+0x66>
 5a8:	84 17       	cp	r24, r20
 5aa:	95 07       	cpc	r25, r21
 5ac:	69 f4       	brne	.+26     	; 0x5c8 <malloc+0x54>
 5ae:	10 97       	sbiw	r26, 0x00	; 0
 5b0:	31 f0       	breq	.+12     	; 0x5be <malloc+0x4a>
 5b2:	12 96       	adiw	r26, 0x02	; 2
 5b4:	0c 93       	st	X, r16
 5b6:	12 97       	sbiw	r26, 0x02	; 2
 5b8:	13 96       	adiw	r26, 0x03	; 3
 5ba:	1c 93       	st	X, r17
 5bc:	27 c0       	rjmp	.+78     	; 0x60c <malloc+0x98>
 5be:	00 93 9b 00 	sts	0x009B, r16	; 0x80009b <__flp>
 5c2:	10 93 9c 00 	sts	0x009C, r17	; 0x80009c <__flp+0x1>
 5c6:	22 c0       	rjmp	.+68     	; 0x60c <malloc+0x98>
 5c8:	21 15       	cp	r18, r1
 5ca:	31 05       	cpc	r19, r1
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <malloc+0x60>
 5ce:	42 17       	cp	r20, r18
 5d0:	53 07       	cpc	r21, r19
 5d2:	18 f4       	brcc	.+6      	; 0x5da <malloc+0x66>
 5d4:	9a 01       	movw	r18, r20
 5d6:	bd 01       	movw	r22, r26
 5d8:	ef 01       	movw	r28, r30
 5da:	df 01       	movw	r26, r30
 5dc:	f8 01       	movw	r30, r16
 5de:	db cf       	rjmp	.-74     	; 0x596 <malloc+0x22>
 5e0:	21 15       	cp	r18, r1
 5e2:	31 05       	cpc	r19, r1
 5e4:	f9 f0       	breq	.+62     	; 0x624 <malloc+0xb0>
 5e6:	28 1b       	sub	r18, r24
 5e8:	39 0b       	sbc	r19, r25
 5ea:	24 30       	cpi	r18, 0x04	; 4
 5ec:	31 05       	cpc	r19, r1
 5ee:	80 f4       	brcc	.+32     	; 0x610 <malloc+0x9c>
 5f0:	8a 81       	ldd	r24, Y+2	; 0x02
 5f2:	9b 81       	ldd	r25, Y+3	; 0x03
 5f4:	61 15       	cp	r22, r1
 5f6:	71 05       	cpc	r23, r1
 5f8:	21 f0       	breq	.+8      	; 0x602 <malloc+0x8e>
 5fa:	fb 01       	movw	r30, r22
 5fc:	93 83       	std	Z+3, r25	; 0x03
 5fe:	82 83       	std	Z+2, r24	; 0x02
 600:	04 c0       	rjmp	.+8      	; 0x60a <malloc+0x96>
 602:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <__flp+0x1>
 606:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <__flp>
 60a:	fe 01       	movw	r30, r28
 60c:	32 96       	adiw	r30, 0x02	; 2
 60e:	44 c0       	rjmp	.+136    	; 0x698 <malloc+0x124>
 610:	fe 01       	movw	r30, r28
 612:	e2 0f       	add	r30, r18
 614:	f3 1f       	adc	r31, r19
 616:	81 93       	st	Z+, r24
 618:	91 93       	st	Z+, r25
 61a:	22 50       	subi	r18, 0x02	; 2
 61c:	31 09       	sbc	r19, r1
 61e:	39 83       	std	Y+1, r19	; 0x01
 620:	28 83       	st	Y, r18
 622:	3a c0       	rjmp	.+116    	; 0x698 <malloc+0x124>
 624:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <__brkval>
 628:	30 91 9a 00 	lds	r19, 0x009A	; 0x80009a <__brkval+0x1>
 62c:	23 2b       	or	r18, r19
 62e:	41 f4       	brne	.+16     	; 0x640 <malloc+0xcc>
 630:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 634:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 638:	30 93 9a 00 	sts	0x009A, r19	; 0x80009a <__brkval+0x1>
 63c:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__brkval>
 640:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 644:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 648:	21 15       	cp	r18, r1
 64a:	31 05       	cpc	r19, r1
 64c:	41 f4       	brne	.+16     	; 0x65e <malloc+0xea>
 64e:	2d b7       	in	r18, 0x3d	; 61
 650:	3e b7       	in	r19, 0x3e	; 62
 652:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 656:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 65a:	24 1b       	sub	r18, r20
 65c:	35 0b       	sbc	r19, r21
 65e:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <__brkval>
 662:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <__brkval+0x1>
 666:	e2 17       	cp	r30, r18
 668:	f3 07       	cpc	r31, r19
 66a:	a0 f4       	brcc	.+40     	; 0x694 <malloc+0x120>
 66c:	2e 1b       	sub	r18, r30
 66e:	3f 0b       	sbc	r19, r31
 670:	28 17       	cp	r18, r24
 672:	39 07       	cpc	r19, r25
 674:	78 f0       	brcs	.+30     	; 0x694 <malloc+0x120>
 676:	ac 01       	movw	r20, r24
 678:	4e 5f       	subi	r20, 0xFE	; 254
 67a:	5f 4f       	sbci	r21, 0xFF	; 255
 67c:	24 17       	cp	r18, r20
 67e:	35 07       	cpc	r19, r21
 680:	48 f0       	brcs	.+18     	; 0x694 <malloc+0x120>
 682:	4e 0f       	add	r20, r30
 684:	5f 1f       	adc	r21, r31
 686:	50 93 9a 00 	sts	0x009A, r21	; 0x80009a <__brkval+0x1>
 68a:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <__brkval>
 68e:	81 93       	st	Z+, r24
 690:	91 93       	st	Z+, r25
 692:	02 c0       	rjmp	.+4      	; 0x698 <malloc+0x124>
 694:	e0 e0       	ldi	r30, 0x00	; 0
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	cf 01       	movw	r24, r30
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	0f 91       	pop	r16
 6a2:	08 95       	ret

000006a4 <free>:
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	00 97       	sbiw	r24, 0x00	; 0
 6aa:	09 f4       	brne	.+2      	; 0x6ae <free+0xa>
 6ac:	81 c0       	rjmp	.+258    	; 0x7b0 <free+0x10c>
 6ae:	fc 01       	movw	r30, r24
 6b0:	32 97       	sbiw	r30, 0x02	; 2
 6b2:	13 82       	std	Z+3, r1	; 0x03
 6b4:	12 82       	std	Z+2, r1	; 0x02
 6b6:	a0 91 9b 00 	lds	r26, 0x009B	; 0x80009b <__flp>
 6ba:	b0 91 9c 00 	lds	r27, 0x009C	; 0x80009c <__flp+0x1>
 6be:	10 97       	sbiw	r26, 0x00	; 0
 6c0:	81 f4       	brne	.+32     	; 0x6e2 <free+0x3e>
 6c2:	20 81       	ld	r18, Z
 6c4:	31 81       	ldd	r19, Z+1	; 0x01
 6c6:	82 0f       	add	r24, r18
 6c8:	93 1f       	adc	r25, r19
 6ca:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <__brkval>
 6ce:	30 91 9a 00 	lds	r19, 0x009A	; 0x80009a <__brkval+0x1>
 6d2:	28 17       	cp	r18, r24
 6d4:	39 07       	cpc	r19, r25
 6d6:	51 f5       	brne	.+84     	; 0x72c <free+0x88>
 6d8:	f0 93 9a 00 	sts	0x009A, r31	; 0x80009a <__brkval+0x1>
 6dc:	e0 93 99 00 	sts	0x0099, r30	; 0x800099 <__brkval>
 6e0:	67 c0       	rjmp	.+206    	; 0x7b0 <free+0x10c>
 6e2:	ed 01       	movw	r28, r26
 6e4:	20 e0       	ldi	r18, 0x00	; 0
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	ce 17       	cp	r28, r30
 6ea:	df 07       	cpc	r29, r31
 6ec:	40 f4       	brcc	.+16     	; 0x6fe <free+0x5a>
 6ee:	4a 81       	ldd	r20, Y+2	; 0x02
 6f0:	5b 81       	ldd	r21, Y+3	; 0x03
 6f2:	9e 01       	movw	r18, r28
 6f4:	41 15       	cp	r20, r1
 6f6:	51 05       	cpc	r21, r1
 6f8:	f1 f0       	breq	.+60     	; 0x736 <free+0x92>
 6fa:	ea 01       	movw	r28, r20
 6fc:	f5 cf       	rjmp	.-22     	; 0x6e8 <free+0x44>
 6fe:	d3 83       	std	Z+3, r29	; 0x03
 700:	c2 83       	std	Z+2, r28	; 0x02
 702:	40 81       	ld	r20, Z
 704:	51 81       	ldd	r21, Z+1	; 0x01
 706:	84 0f       	add	r24, r20
 708:	95 1f       	adc	r25, r21
 70a:	c8 17       	cp	r28, r24
 70c:	d9 07       	cpc	r29, r25
 70e:	59 f4       	brne	.+22     	; 0x726 <free+0x82>
 710:	88 81       	ld	r24, Y
 712:	99 81       	ldd	r25, Y+1	; 0x01
 714:	84 0f       	add	r24, r20
 716:	95 1f       	adc	r25, r21
 718:	02 96       	adiw	r24, 0x02	; 2
 71a:	91 83       	std	Z+1, r25	; 0x01
 71c:	80 83       	st	Z, r24
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	9b 81       	ldd	r25, Y+3	; 0x03
 722:	93 83       	std	Z+3, r25	; 0x03
 724:	82 83       	std	Z+2, r24	; 0x02
 726:	21 15       	cp	r18, r1
 728:	31 05       	cpc	r19, r1
 72a:	29 f4       	brne	.+10     	; 0x736 <free+0x92>
 72c:	f0 93 9c 00 	sts	0x009C, r31	; 0x80009c <__flp+0x1>
 730:	e0 93 9b 00 	sts	0x009B, r30	; 0x80009b <__flp>
 734:	3d c0       	rjmp	.+122    	; 0x7b0 <free+0x10c>
 736:	e9 01       	movw	r28, r18
 738:	fb 83       	std	Y+3, r31	; 0x03
 73a:	ea 83       	std	Y+2, r30	; 0x02
 73c:	49 91       	ld	r20, Y+
 73e:	59 91       	ld	r21, Y+
 740:	c4 0f       	add	r28, r20
 742:	d5 1f       	adc	r29, r21
 744:	ec 17       	cp	r30, r28
 746:	fd 07       	cpc	r31, r29
 748:	61 f4       	brne	.+24     	; 0x762 <free+0xbe>
 74a:	80 81       	ld	r24, Z
 74c:	91 81       	ldd	r25, Z+1	; 0x01
 74e:	84 0f       	add	r24, r20
 750:	95 1f       	adc	r25, r21
 752:	02 96       	adiw	r24, 0x02	; 2
 754:	e9 01       	movw	r28, r18
 756:	99 83       	std	Y+1, r25	; 0x01
 758:	88 83       	st	Y, r24
 75a:	82 81       	ldd	r24, Z+2	; 0x02
 75c:	93 81       	ldd	r25, Z+3	; 0x03
 75e:	9b 83       	std	Y+3, r25	; 0x03
 760:	8a 83       	std	Y+2, r24	; 0x02
 762:	e0 e0       	ldi	r30, 0x00	; 0
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	12 96       	adiw	r26, 0x02	; 2
 768:	8d 91       	ld	r24, X+
 76a:	9c 91       	ld	r25, X
 76c:	13 97       	sbiw	r26, 0x03	; 3
 76e:	00 97       	sbiw	r24, 0x00	; 0
 770:	19 f0       	breq	.+6      	; 0x778 <free+0xd4>
 772:	fd 01       	movw	r30, r26
 774:	dc 01       	movw	r26, r24
 776:	f7 cf       	rjmp	.-18     	; 0x766 <free+0xc2>
 778:	8d 91       	ld	r24, X+
 77a:	9c 91       	ld	r25, X
 77c:	11 97       	sbiw	r26, 0x01	; 1
 77e:	9d 01       	movw	r18, r26
 780:	2e 5f       	subi	r18, 0xFE	; 254
 782:	3f 4f       	sbci	r19, 0xFF	; 255
 784:	82 0f       	add	r24, r18
 786:	93 1f       	adc	r25, r19
 788:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <__brkval>
 78c:	30 91 9a 00 	lds	r19, 0x009A	; 0x80009a <__brkval+0x1>
 790:	28 17       	cp	r18, r24
 792:	39 07       	cpc	r19, r25
 794:	69 f4       	brne	.+26     	; 0x7b0 <free+0x10c>
 796:	30 97       	sbiw	r30, 0x00	; 0
 798:	29 f4       	brne	.+10     	; 0x7a4 <free+0x100>
 79a:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__flp+0x1>
 79e:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__flp>
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <free+0x104>
 7a4:	13 82       	std	Z+3, r1	; 0x03
 7a6:	12 82       	std	Z+2, r1	; 0x02
 7a8:	b0 93 9a 00 	sts	0x009A, r27	; 0x80009a <__brkval+0x1>
 7ac:	a0 93 99 00 	sts	0x0099, r26	; 0x800099 <__brkval>
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <eeprom_read_byte>:
 7b6:	e1 99       	sbic	0x1c, 1	; 28
 7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <eeprom_read_byte>
 7ba:	9f bb       	out	0x1f, r25	; 31
 7bc:	8e bb       	out	0x1e, r24	; 30
 7be:	e0 9a       	sbi	0x1c, 0	; 28
 7c0:	99 27       	eor	r25, r25
 7c2:	8d b3       	in	r24, 0x1d	; 29
 7c4:	08 95       	ret

000007c6 <eeprom_write_byte>:
 7c6:	26 2f       	mov	r18, r22

000007c8 <eeprom_write_r18>:
 7c8:	e1 99       	sbic	0x1c, 1	; 28
 7ca:	fe cf       	rjmp	.-4      	; 0x7c8 <eeprom_write_r18>
 7cc:	9f bb       	out	0x1f, r25	; 31
 7ce:	8e bb       	out	0x1e, r24	; 30
 7d0:	2d bb       	out	0x1d, r18	; 29
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	f8 94       	cli
 7d6:	e2 9a       	sbi	0x1c, 2	; 28
 7d8:	e1 9a       	sbi	0x1c, 1	; 28
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	01 96       	adiw	r24, 0x01	; 1
 7de:	08 95       	ret

000007e0 <_exit>:
 7e0:	f8 94       	cli

000007e2 <__stop_program>:
 7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <__stop_program>
