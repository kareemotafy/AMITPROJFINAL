
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000004a8  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800070  00800070  0000054c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d11  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093b  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064a  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000022f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000514  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a5  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002b9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  8a:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LM35_Init>:
 * Created: 1/5/2023 11:09:05 PM
 *  Author: Kareem
 */
#include "LM35.h"
void LM35_Init(ADC_Channel Channel_confg)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	ADC_ConfigStruct *ptr = (ADC_ConfigStruct *)(malloc(sizeof(ADC_ConfigStruct)));
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 31 01 	call	0x262	; 0x262 <malloc>
	;
	ptr->PSC = PSC_64;
  9e:	26 e0       	ldi	r18, 0x06	; 6
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	ptr->RMode = Polling;
  a4:	11 82       	std	Z+1, r1	; 0x01
	ptr->VRef = VInternal;
  a6:	23 e0       	ldi	r18, 0x03	; 3
  a8:	22 83       	std	Z+2, r18	; 0x02
	ptr->Channel = Channel_confg;
  aa:	c3 83       	std	Z+3, r28	; 0x03
	ADC_Init(ptr);
  ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ADC_Init>
}
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <LM35_Read>:

unsigned short int LM35_Read(void)
{
	unsigned short int temp;

	temp = ADC_Read(ADC_Channel0) / 4;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 29 01 	call	0x252	; 0x252 <ADC_Read>

	return temp;
  ba:	96 95       	lsr	r25
  bc:	87 95       	ror	r24
  be:	96 95       	lsr	r25
  c0:	87 95       	ror	r24
  c2:	08 95       	ret

000000c4 <SSD_OFF>:
char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
char units;
char tens;
	void SSD_OFF()
	{
		SSD_port=0x7f;
  c4:	8f e7       	ldi	r24, 0x7F	; 127
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	08 95       	ret

000000ca <SSD_write>:
	}
	
	
	void SSD_write(char num)
	{
			units=num%10;
  ca:	9d ec       	ldi	r25, 0xCD	; 205
  cc:	89 9f       	mul	r24, r25
  ce:	91 2d       	mov	r25, r1
  d0:	11 24       	eor	r1, r1
  d2:	e9 2f       	mov	r30, r25
  d4:	e6 95       	lsr	r30
  d6:	e6 95       	lsr	r30
  d8:	e6 95       	lsr	r30
  da:	ee 0f       	add	r30, r30
  dc:	2e 2f       	mov	r18, r30
  de:	22 0f       	add	r18, r18
  e0:	22 0f       	add	r18, r18
  e2:	e2 0f       	add	r30, r18
  e4:	8e 1b       	sub	r24, r30
  e6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <units>
			tens=num/10;
  ea:	96 95       	lsr	r25
  ec:	96 95       	lsr	r25
  ee:	96 95       	lsr	r25
  f0:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <tens>
			
			
			
			SSD_port=number[units];
  f4:	e8 2f       	mov	r30, r24
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ea 59       	subi	r30, 0x9A	; 154
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 81       	ld	r24, Z
  fe:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e0       	ldi	r24, 0x0F	; 15
 102:	97 e2       	ldi	r25, 0x27	; 39
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <SSD_write+0x3a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <SSD_write+0x40>
 10a:	00 00       	nop
			_delay_ms(MultiplexDelay);
			ClearBit(Display1Port,Display1Pin);
 10c:	d9 98       	cbi	0x1b, 1	; 27
			SetBit(Display2Port,Display2Pin);
 10e:	da 9a       	sbi	0x1b, 2	; 27
			SSD_port=number[tens];
 110:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <tens>
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	ea 59       	subi	r30, 0x9A	; 154
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	80 81       	ld	r24, Z
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	97 e2       	ldi	r25, 0x27	; 39
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <SSD_write+0x58>
 126:	00 c0       	rjmp	.+0      	; 0x128 <SSD_write+0x5e>
 128:	00 00       	nop
			_delay_ms(MultiplexDelay);	
			SetBit(Display1Port,Display1Pin);
 12a:	d9 9a       	sbi	0x1b, 1	; 27
			ClearBit(Display2Port,Display2Pin);
 12c:	da 98       	cbi	0x1b, 2	; 27
 12e:	08 95       	ret

00000130 <__vector_1>:
char on = 0;  // variable to hold button state (0 or 1)
char count=0;
char setting=0;

ISR(INT0_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
	on=~on;		
 140:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <on>
 144:	80 95       	com	r24
 146:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <on>
 14a:	2f e7       	ldi	r18, 0x7F	; 127
 14c:	88 e3       	ldi	r24, 0x38	; 56
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <__vector_1+0x20>
 158:	00 c0       	rjmp	.+0      	; 0x15a <__vector_1+0x2a>
 15a:	00 00       	nop
	_delay_ms(50);  	/* Software debouncing control delay */
	
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <main>:

int main(void) {
	// Configure button as input
	DDRD=0;  // set PD2 as input
 16c:	11 ba       	out	0x11, r1	; 17
	PORTD=0xff;  // enable pull-up resistor on PD2
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	82 bb       	out	0x12, r24	; 18
	DDRB=0xff;
 172:	87 bb       	out	0x17, r24	; 23
	PORTB=0;
 174:	18 ba       	out	0x18, r1	; 24
	GICR = 1<<INT0;		/* Enable INT0*/
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	85 bf       	out	0x35, r24	; 53
	
	sei();
 17e:	78 94       	sei
	
	LM35_Init(ADC_Channel0);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 49 00 	call	0x92	; 0x92 <LM35_Init>
	while (1) {	
		if ((!GetBit(PIND,0))||(!GetBit(PIND,1)))
		{
			setting=1;
 186:	c1 e0       	ldi	r28, 0x01	; 1
	
	sei();
	
	LM35_Init(ADC_Channel0);
	while (1) {	
		if ((!GetBit(PIND,0))||(!GetBit(PIND,1)))
 188:	80 9b       	sbis	0x10, 0	; 16
 18a:	02 c0       	rjmp	.+4      	; 0x190 <main+0x24>
 18c:	81 99       	sbic	0x10, 1	; 16
 18e:	09 c0       	rjmp	.+18     	; 0x1a2 <main+0x36>
		{
			setting=1;
 190:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__data_end>
			count=0;
 194:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <count>
		}
		if (on)
 198:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <on>
 19c:	88 23       	and	r24, r24
 19e:	39 f1       	breq	.+78     	; 0x1ee <main+0x82>
 1a0:	0d c0       	rjmp	.+26     	; 0x1bc <main+0x50>
 1a2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <on>
 1a6:	88 23       	and	r24, r24
 1a8:	11 f1       	breq	.+68     	; 0x1ee <main+0x82>
		{
			if(!setting)
 1aa:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1ae:	81 11       	cpse	r24, r1
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <main+0x50>
			{
				SSD_write(LM35_Read());
 1b2:	0e 94 5a 00 	call	0xb4	; 0xb4 <LM35_Read>
 1b6:	0e 94 65 00 	call	0xca	; 0xca <SSD_write>
 1ba:	e6 cf       	rjmp	.-52     	; 0x188 <main+0x1c>
			}
			else
			{
				
				SSD_OFF();
 1bc:	0e 94 62 00 	call	0xc4	; 0xc4 <SSD_OFF>
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	89 e6       	ldi	r24, 0x69	; 105
 1c4:	98 e1       	ldi	r25, 0x18	; 24
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x5a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x64>
 1d0:	00 00       	nop
				_delay_ms(1000);
				SSD_write(LM35_Read());
 1d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <LM35_Read>
 1d6:	0e 94 65 00 	call	0xca	; 0xca <SSD_write>
				
				
				
				if (count==5)
 1da:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <count>
 1de:	85 30       	cpi	r24, 0x05	; 5
 1e0:	11 f4       	brne	.+4      	; 0x1e6 <main+0x7a>
				{
					setting=0;
 1e2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
				}
			
				count++;
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <count>
 1ec:	cd cf       	rjmp	.-102    	; 0x188 <main+0x1c>
			}
			
		}
		else
		{
			SSD_OFF();
 1ee:	0e 94 62 00 	call	0xc4	; 0xc4 <SSD_OFF>
			setting=0;
 1f2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
			count=0;
 1f6:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <count>
 1fa:	c6 cf       	rjmp	.-116    	; 0x188 <main+0x1c>

000001fc <ADC_Init>:
#include "ADC.h"

static ADC_ConfigStruct ADC_InitStruct;


void ADC_Init(ADC_ConfigStruct* ptr){
 1fc:	dc 01       	movw	r26, r24
	ADC_InitStruct.PSC = ptr->PSC;
 1fe:	e3 e7       	ldi	r30, 0x73	; 115
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	8c 91       	ld	r24, X
 204:	80 83       	st	Z, r24
	ADC_InitStruct.RMode = ptr->RMode;
 206:	11 96       	adiw	r26, 0x01	; 1
 208:	8c 91       	ld	r24, X
 20a:	11 97       	sbiw	r26, 0x01	; 1
 20c:	81 83       	std	Z+1, r24	; 0x01
	ADC_InitStruct.VRef = ptr->VRef;
 20e:	12 96       	adiw	r26, 0x02	; 2
 210:	9c 91       	ld	r25, X
 212:	12 97       	sbiw	r26, 0x02	; 2
 214:	92 83       	std	Z+2, r25	; 0x02
	ADC_InitStruct.Channel = ptr->Channel;
 216:	13 96       	adiw	r26, 0x03	; 3
 218:	9c 91       	ld	r25, X
 21a:	93 83       	std	Z+3, r25	; 0x03
	if(ADC_InitStruct.RMode == Interrupt){
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	11 f4       	brne	.+4      	; 0x224 <ADC_Init+0x28>
		SetBit(ADCSRA_REG,ADIE_BIT);
 220:	33 9a       	sbi	0x06, 3	; 6
 222:	03 c0       	rjmp	.+6      	; 0x22a <ADC_Init+0x2e>
		}else if(ADC_InitStruct.RMode == Polling){
 224:	81 11       	cpse	r24, r1
 226:	01 c0       	rjmp	.+2      	; 0x22a <ADC_Init+0x2e>
		ClearBit(ADCSRA_REG,ADIE_BIT);
 228:	33 98       	cbi	0x06, 3	; 6
	}
	// Enabling the ADC
	SetBit(ADCSRA_REG,ADEN_BIT);
 22a:	37 9a       	sbi	0x06, 7	; 6
	// Setting System Clock pre-scalar
	ADCSRA_REG |= ADC_InitStruct.PSC;
 22c:	96 b1       	in	r25, 0x06	; 6
 22e:	e3 e7       	ldi	r30, 0x73	; 115
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	89 2b       	or	r24, r25
 236:	86 b9       	out	0x06, r24	; 6
	// Setting Vref
	//ADMUX_REG &= 0x3F;
	ADMUX_REG |= (ADC_InitStruct.VRef<<6);
 238:	27 b1       	in	r18, 0x07	; 7
 23a:	92 81       	ldd	r25, Z+2	; 0x02
 23c:	30 e4       	ldi	r19, 0x40	; 64
 23e:	93 9f       	mul	r25, r19
 240:	c0 01       	movw	r24, r0
 242:	11 24       	eor	r1, r1
 244:	82 2b       	or	r24, r18
 246:	87 b9       	out	0x07, r24	; 7
	// Setting the ADC channel to be used
	ADMUX_REG |= (ADC_InitStruct.Channel);
 248:	97 b1       	in	r25, 0x07	; 7
 24a:	83 81       	ldd	r24, Z+3	; 0x03
 24c:	89 2b       	or	r24, r25
 24e:	87 b9       	out	0x07, r24	; 7
 250:	08 95       	ret

00000252 <ADC_Read>:
}

unsigned short int ADC_Read(ADC_Channel channel){
	unsigned short Read=0;
	SetBit(ADCSRA_REG,ADSC_BIT);
 252:	36 9a       	sbi	0x06, 6	; 6
	while(GetBit(ADCSRA_REG,ADIF_BIT)==0){
 254:	34 9b       	sbis	0x06, 4	; 6
 256:	fe cf       	rjmp	.-4      	; 0x254 <ADC_Read+0x2>
	}
	Read = ADCL_REG;
 258:	84 b1       	in	r24, 0x04	; 4
	Read |= ADCH_REG<<8;
 25a:	25 b1       	in	r18, 0x05	; 5
	return Read;
 25c:	90 e0       	ldi	r25, 0x00	; 0
}
 25e:	92 2b       	or	r25, r18
 260:	08 95       	ret

00000262 <malloc>:
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	91 05       	cpc	r25, r1
 26e:	10 f4       	brcc	.+4      	; 0x274 <malloc+0x12>
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <__flp>
 278:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <__flp+0x1>
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	a0 e0       	ldi	r26, 0x00	; 0
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	30 97       	sbiw	r30, 0x00	; 0
 286:	19 f1       	breq	.+70     	; 0x2ce <malloc+0x6c>
 288:	40 81       	ld	r20, Z
 28a:	51 81       	ldd	r21, Z+1	; 0x01
 28c:	02 81       	ldd	r16, Z+2	; 0x02
 28e:	13 81       	ldd	r17, Z+3	; 0x03
 290:	48 17       	cp	r20, r24
 292:	59 07       	cpc	r21, r25
 294:	c8 f0       	brcs	.+50     	; 0x2c8 <malloc+0x66>
 296:	84 17       	cp	r24, r20
 298:	95 07       	cpc	r25, r21
 29a:	69 f4       	brne	.+26     	; 0x2b6 <malloc+0x54>
 29c:	10 97       	sbiw	r26, 0x00	; 0
 29e:	31 f0       	breq	.+12     	; 0x2ac <malloc+0x4a>
 2a0:	12 96       	adiw	r26, 0x02	; 2
 2a2:	0c 93       	st	X, r16
 2a4:	12 97       	sbiw	r26, 0x02	; 2
 2a6:	13 96       	adiw	r26, 0x03	; 3
 2a8:	1c 93       	st	X, r17
 2aa:	27 c0       	rjmp	.+78     	; 0x2fa <malloc+0x98>
 2ac:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__flp>
 2b0:	10 93 7c 00 	sts	0x007C, r17	; 0x80007c <__flp+0x1>
 2b4:	22 c0       	rjmp	.+68     	; 0x2fa <malloc+0x98>
 2b6:	21 15       	cp	r18, r1
 2b8:	31 05       	cpc	r19, r1
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <malloc+0x60>
 2bc:	42 17       	cp	r20, r18
 2be:	53 07       	cpc	r21, r19
 2c0:	18 f4       	brcc	.+6      	; 0x2c8 <malloc+0x66>
 2c2:	9a 01       	movw	r18, r20
 2c4:	bd 01       	movw	r22, r26
 2c6:	ef 01       	movw	r28, r30
 2c8:	df 01       	movw	r26, r30
 2ca:	f8 01       	movw	r30, r16
 2cc:	db cf       	rjmp	.-74     	; 0x284 <malloc+0x22>
 2ce:	21 15       	cp	r18, r1
 2d0:	31 05       	cpc	r19, r1
 2d2:	f9 f0       	breq	.+62     	; 0x312 <malloc+0xb0>
 2d4:	28 1b       	sub	r18, r24
 2d6:	39 0b       	sbc	r19, r25
 2d8:	24 30       	cpi	r18, 0x04	; 4
 2da:	31 05       	cpc	r19, r1
 2dc:	80 f4       	brcc	.+32     	; 0x2fe <malloc+0x9c>
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	9b 81       	ldd	r25, Y+3	; 0x03
 2e2:	61 15       	cp	r22, r1
 2e4:	71 05       	cpc	r23, r1
 2e6:	21 f0       	breq	.+8      	; 0x2f0 <malloc+0x8e>
 2e8:	fb 01       	movw	r30, r22
 2ea:	93 83       	std	Z+3, r25	; 0x03
 2ec:	82 83       	std	Z+2, r24	; 0x02
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <malloc+0x96>
 2f0:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__flp+0x1>
 2f4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__flp>
 2f8:	fe 01       	movw	r30, r28
 2fa:	32 96       	adiw	r30, 0x02	; 2
 2fc:	44 c0       	rjmp	.+136    	; 0x386 <malloc+0x124>
 2fe:	fe 01       	movw	r30, r28
 300:	e2 0f       	add	r30, r18
 302:	f3 1f       	adc	r31, r19
 304:	81 93       	st	Z+, r24
 306:	91 93       	st	Z+, r25
 308:	22 50       	subi	r18, 0x02	; 2
 30a:	31 09       	sbc	r19, r1
 30c:	39 83       	std	Y+1, r19	; 0x01
 30e:	28 83       	st	Y, r18
 310:	3a c0       	rjmp	.+116    	; 0x386 <malloc+0x124>
 312:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__brkval>
 316:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <__brkval+0x1>
 31a:	23 2b       	or	r18, r19
 31c:	41 f4       	brne	.+16     	; 0x32e <malloc+0xcc>
 31e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 322:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 326:	30 93 7a 00 	sts	0x007A, r19	; 0x80007a <__brkval+0x1>
 32a:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <__brkval>
 32e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 332:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 336:	21 15       	cp	r18, r1
 338:	31 05       	cpc	r19, r1
 33a:	41 f4       	brne	.+16     	; 0x34c <malloc+0xea>
 33c:	2d b7       	in	r18, 0x3d	; 61
 33e:	3e b7       	in	r19, 0x3e	; 62
 340:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 344:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 348:	24 1b       	sub	r18, r20
 34a:	35 0b       	sbc	r19, r21
 34c:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <__brkval>
 350:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <__brkval+0x1>
 354:	e2 17       	cp	r30, r18
 356:	f3 07       	cpc	r31, r19
 358:	a0 f4       	brcc	.+40     	; 0x382 <malloc+0x120>
 35a:	2e 1b       	sub	r18, r30
 35c:	3f 0b       	sbc	r19, r31
 35e:	28 17       	cp	r18, r24
 360:	39 07       	cpc	r19, r25
 362:	78 f0       	brcs	.+30     	; 0x382 <malloc+0x120>
 364:	ac 01       	movw	r20, r24
 366:	4e 5f       	subi	r20, 0xFE	; 254
 368:	5f 4f       	sbci	r21, 0xFF	; 255
 36a:	24 17       	cp	r18, r20
 36c:	35 07       	cpc	r19, r21
 36e:	48 f0       	brcs	.+18     	; 0x382 <malloc+0x120>
 370:	4e 0f       	add	r20, r30
 372:	5f 1f       	adc	r21, r31
 374:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__brkval+0x1>
 378:	40 93 79 00 	sts	0x0079, r20	; 0x800079 <__brkval>
 37c:	81 93       	st	Z+, r24
 37e:	91 93       	st	Z+, r25
 380:	02 c0       	rjmp	.+4      	; 0x386 <malloc+0x124>
 382:	e0 e0       	ldi	r30, 0x00	; 0
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	cf 01       	movw	r24, r30
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <free>:
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	09 f4       	brne	.+2      	; 0x39c <free+0xa>
 39a:	81 c0       	rjmp	.+258    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 39c:	fc 01       	movw	r30, r24
 39e:	32 97       	sbiw	r30, 0x02	; 2
 3a0:	13 82       	std	Z+3, r1	; 0x03
 3a2:	12 82       	std	Z+2, r1	; 0x02
 3a4:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <__flp>
 3a8:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <__flp+0x1>
 3ac:	10 97       	sbiw	r26, 0x00	; 0
 3ae:	81 f4       	brne	.+32     	; 0x3d0 <free+0x3e>
 3b0:	20 81       	ld	r18, Z
 3b2:	31 81       	ldd	r19, Z+1	; 0x01
 3b4:	82 0f       	add	r24, r18
 3b6:	93 1f       	adc	r25, r19
 3b8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__brkval>
 3bc:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <__brkval+0x1>
 3c0:	28 17       	cp	r18, r24
 3c2:	39 07       	cpc	r19, r25
 3c4:	51 f5       	brne	.+84     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3c6:	f0 93 7a 00 	sts	0x007A, r31	; 0x80007a <__brkval+0x1>
 3ca:	e0 93 79 00 	sts	0x0079, r30	; 0x800079 <__brkval>
 3ce:	67 c0       	rjmp	.+206    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 3d0:	ed 01       	movw	r28, r26
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	ce 17       	cp	r28, r30
 3d8:	df 07       	cpc	r29, r31
 3da:	40 f4       	brcc	.+16     	; 0x3ec <free+0x5a>
 3dc:	4a 81       	ldd	r20, Y+2	; 0x02
 3de:	5b 81       	ldd	r21, Y+3	; 0x03
 3e0:	9e 01       	movw	r18, r28
 3e2:	41 15       	cp	r20, r1
 3e4:	51 05       	cpc	r21, r1
 3e6:	f1 f0       	breq	.+60     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3e8:	ea 01       	movw	r28, r20
 3ea:	f5 cf       	rjmp	.-22     	; 0x3d6 <free+0x44>
 3ec:	d3 83       	std	Z+3, r29	; 0x03
 3ee:	c2 83       	std	Z+2, r28	; 0x02
 3f0:	40 81       	ld	r20, Z
 3f2:	51 81       	ldd	r21, Z+1	; 0x01
 3f4:	84 0f       	add	r24, r20
 3f6:	95 1f       	adc	r25, r21
 3f8:	c8 17       	cp	r28, r24
 3fa:	d9 07       	cpc	r29, r25
 3fc:	59 f4       	brne	.+22     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3fe:	88 81       	ld	r24, Y
 400:	99 81       	ldd	r25, Y+1	; 0x01
 402:	84 0f       	add	r24, r20
 404:	95 1f       	adc	r25, r21
 406:	02 96       	adiw	r24, 0x02	; 2
 408:	91 83       	std	Z+1, r25	; 0x01
 40a:	80 83       	st	Z, r24
 40c:	8a 81       	ldd	r24, Y+2	; 0x02
 40e:	9b 81       	ldd	r25, Y+3	; 0x03
 410:	93 83       	std	Z+3, r25	; 0x03
 412:	82 83       	std	Z+2, r24	; 0x02
 414:	21 15       	cp	r18, r1
 416:	31 05       	cpc	r19, r1
 418:	29 f4       	brne	.+10     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 41a:	f0 93 7c 00 	sts	0x007C, r31	; 0x80007c <__flp+0x1>
 41e:	e0 93 7b 00 	sts	0x007B, r30	; 0x80007b <__flp>
 422:	3d c0       	rjmp	.+122    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 424:	e9 01       	movw	r28, r18
 426:	fb 83       	std	Y+3, r31	; 0x03
 428:	ea 83       	std	Y+2, r30	; 0x02
 42a:	49 91       	ld	r20, Y+
 42c:	59 91       	ld	r21, Y+
 42e:	c4 0f       	add	r28, r20
 430:	d5 1f       	adc	r29, r21
 432:	ec 17       	cp	r30, r28
 434:	fd 07       	cpc	r31, r29
 436:	61 f4       	brne	.+24     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 438:	80 81       	ld	r24, Z
 43a:	91 81       	ldd	r25, Z+1	; 0x01
 43c:	84 0f       	add	r24, r20
 43e:	95 1f       	adc	r25, r21
 440:	02 96       	adiw	r24, 0x02	; 2
 442:	e9 01       	movw	r28, r18
 444:	99 83       	std	Y+1, r25	; 0x01
 446:	88 83       	st	Y, r24
 448:	82 81       	ldd	r24, Z+2	; 0x02
 44a:	93 81       	ldd	r25, Z+3	; 0x03
 44c:	9b 83       	std	Y+3, r25	; 0x03
 44e:	8a 83       	std	Y+2, r24	; 0x02
 450:	e0 e0       	ldi	r30, 0x00	; 0
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	12 96       	adiw	r26, 0x02	; 2
 456:	8d 91       	ld	r24, X+
 458:	9c 91       	ld	r25, X
 45a:	13 97       	sbiw	r26, 0x03	; 3
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	19 f0       	breq	.+6      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 460:	fd 01       	movw	r30, r26
 462:	dc 01       	movw	r26, r24
 464:	f7 cf       	rjmp	.-18     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 466:	8d 91       	ld	r24, X+
 468:	9c 91       	ld	r25, X
 46a:	11 97       	sbiw	r26, 0x01	; 1
 46c:	9d 01       	movw	r18, r26
 46e:	2e 5f       	subi	r18, 0xFE	; 254
 470:	3f 4f       	sbci	r19, 0xFF	; 255
 472:	82 0f       	add	r24, r18
 474:	93 1f       	adc	r25, r19
 476:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__brkval>
 47a:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <__brkval+0x1>
 47e:	28 17       	cp	r18, r24
 480:	39 07       	cpc	r19, r25
 482:	69 f4       	brne	.+26     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 484:	30 97       	sbiw	r30, 0x00	; 0
 486:	29 f4       	brne	.+10     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 488:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__flp+0x1>
 48c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__flp>
 490:	02 c0       	rjmp	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 492:	13 82       	std	Z+3, r1	; 0x03
 494:	12 82       	std	Z+2, r1	; 0x02
 496:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <__brkval+0x1>
 49a:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <__brkval>
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
